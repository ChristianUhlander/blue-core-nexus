import React, { useState } from 'react';
import { 
  Shield, 
  Users, 
  Settings, 
  FileText, 
  AlertTriangle, 
  Activity, 
  Server, 
  Database,
  Search,
  Play,
  Pause,
  Trash2,
  Plus,
  Download,
  Upload,
  Eye,
  RefreshCw,
  ArrowLeft,
  Network,
  Computer,
  Copy,
  Check
} from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Progress } from '@/components/ui/progress';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';

const WazuhManagement = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [isAddAgentOpen, setIsAddAgentOpen] = useState(false);
  const [agentForm, setAgentForm] = useState({
    name: '',
    ip: '',
    os: 'linux',
    group: 'default',
    description: ''
  });
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  // Mock data - replace with actual Wazuh API calls
  const agents = [
    { id: '001', name: 'web-server-01', ip: '192.168.1.10', os: 'Ubuntu 20.04', status: 'active', lastSeen: '2 min ago' },
    { id: '002', name: 'db-server-01', ip: '192.168.1.11', os: 'CentOS 8', status: 'active', lastSeen: '5 min ago' },
    { id: '003', name: 'mail-server-01', ip: '192.168.1.12', os: 'Windows Server 2019', status: 'disconnected', lastSeen: '2 hours ago' },
  ];

  const rules = [
    { id: '100001', level: 'High', description: 'SSH authentication success', groups: ['authentication', 'ssh'] },
    { id: '100002', level: 'Medium', description: 'Multiple authentication failures', groups: ['authentication', 'brute_force'] },
    { id: '100003', level: 'Low', description: 'User login', groups: ['authentication', 'login'] },
  ];

  const alerts = [
    { id: 1, timestamp: '2024-01-20 14:30:15', agent: 'web-server-01', rule: 'SSH Brute Force', level: 'High', ip: '203.0.113.1' },
    { id: 2, timestamp: '2024-01-20 14:25:32', agent: 'db-server-01', rule: 'Root login', level: 'Medium', ip: '192.168.1.100' },
    { id: 3, timestamp: '2024-01-20 14:20:45', agent: 'mail-server-01', rule: 'File integrity', level: 'Low', ip: '192.168.1.12' },
  ];

  /**
   * Handles adding a new Wazuh agent
   * Validates the form data and generates installation command
   */
  const handleAddAgent = () => {
    if (!agentForm.name || !agentForm.ip) {
      toast({
        title: "Validation Error",
        description: "Agent name and IP address are required",
        variant: "destructive",
      });
      return;
    }

    // In a real implementation, this would make an API call to the Wazuh manager
    // POST /agents with the agent configuration
    toast({
      title: "Agent Configuration Ready",
      description: `Agent ${agentForm.name} configured for IP ${agentForm.ip}. Installation command generated.`,
    });
    
    // Reset form and close dialog
    setAgentForm({ name: '', ip: '', os: 'linux', group: 'default', description: '' });
    setIsAddAgentOpen(false);
  };

  /**
   * Generates the Wazuh agent installation command
   * This would typically be provided by the Wazuh API after agent registration
   */
  const generateInstallCommand = () => {
    const managerIp = "192.168.1.100"; // This would come from configuration
    const agentKey = "MDA4IGFnZW50LTAxIDEwLjAuMC4xMDA"; // This would be generated by Wazuh manager
    
    if (agentForm.os === 'linux') {
      return `curl -so wazuh-agent-4.7.0.deb https://packages.wazuh.com/4.x/apt/pool/main/w/wazuh-agent/wazuh-agent_4.7.0-1_amd64.deb && sudo WAZUH_MANAGER='${managerIp}' WAZUH_AGENT_NAME='${agentForm.name}' dpkg -i ./wazuh-agent-4.7.0.deb`;
    } else if (agentForm.os === 'windows') {
      return `Invoke-WebRequest -Uri https://packages.wazuh.com/4.x/windows/wazuh-agent-4.7.0-1.msi -OutFile wazuh-agent-4.7.0.msi; msiexec.exe /i wazuh-agent-4.7.0.msi /q WAZUH_MANAGER='${managerIp}' WAZUH_AGENT_NAME='${agentForm.name}'`;
    } else {
      return `pkg install wazuh-agent && echo 'WAZUH_MANAGER="${managerIp}"' >> /usr/local/etc/wazuh-agent.conf && echo 'WAZUH_AGENT_NAME="${agentForm.name}"' >> /usr/local/etc/wazuh-agent.conf`;
    }
  };

  /**
   * Copies the installation command to clipboard
   */
  const copyInstallCommand = async () => {
    const command = generateInstallCommand();
    try {
      await navigator.clipboard.writeText(command);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
      toast({
        title: "Copied to clipboard",
        description: "Installation command has been copied to your clipboard",
      });
    } catch (err) {
      toast({
        title: "Copy failed",
        description: "Failed to copy to clipboard. Please select and copy manually.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="min-h-screen gradient-bg p-6">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <Shield className="h-8 w-8 text-primary glow" />
            <h1 className="text-4xl font-bold text-glow">Wazuh SIEM Management</h1>
          </div>
          <Button
            variant="outline"
            onClick={() => window.location.href = '/'}
            className="glow-hover border-primary/50 hover:border-primary text-primary hover:bg-primary/10"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            ‚Üê Back to Main Dashboard
          </Button>
        </div>
        <p className="text-muted-foreground text-lg">
          Comprehensive security monitoring and incident response management
        </p>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <Card className="gradient-card glow-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Agents</CardTitle>
            <Users className="h-4 w-4 text-primary" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-primary">247</div>
            <p className="text-xs text-muted-foreground">+12 from last week</p>
          </CardContent>
        </Card>

        <Card className="gradient-card glow-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Alerts</CardTitle>
            <AlertTriangle className="h-4 w-4 text-destructive" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-destructive">23</div>
            <p className="text-xs text-muted-foreground">-5 from yesterday</p>
          </CardContent>
        </Card>

        <Card className="gradient-card glow-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Rules Active</CardTitle>
            <FileText className="h-4 w-4 text-secondary" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-secondary">1,847</div>
            <p className="text-xs text-muted-foreground">Custom + Default</p>
          </CardContent>
        </Card>

        <Card className="gradient-card glow-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">System Health</CardTitle>
            <Activity className="h-4 w-4 text-accent" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-accent">98.7%</div>
            <Progress value={98.7} className="mt-2" />
          </CardContent>
        </Card>
      </div>

      {/* Main Management Tabs */}
      <Tabs defaultValue="agents" className="space-y-6">
        <TabsList className="grid w-full grid-cols-6 gradient-card">
          <TabsTrigger value="agents" className="flex items-center gap-2">
            <Server className="h-4 w-4" />
            Agents
          </TabsTrigger>
          <TabsTrigger value="rules" className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            Rules
          </TabsTrigger>
          <TabsTrigger value="alerts" className="flex items-center gap-2">
            <AlertTriangle className="h-4 w-4" />
            Alerts
          </TabsTrigger>
          <TabsTrigger value="monitoring" className="flex items-center gap-2">
            <Activity className="h-4 w-4" />
            Monitoring
          </TabsTrigger>
          <TabsTrigger value="config" className="flex items-center gap-2">
            <Settings className="h-4 w-4" />
            Configuration
          </TabsTrigger>
          <TabsTrigger value="reports" className="flex items-center gap-2">
            <Database className="h-4 w-4" />
            Reports
          </TabsTrigger>
        </TabsList>

        {/* Agents Management */}
        <TabsContent value="agents" className="space-y-6">
          <Card className="gradient-card glow">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <Server className="h-5 w-5 text-primary" />
                    Agent Management
                  </CardTitle>
                  <CardDescription>Monitor and control Wazuh agents across your infrastructure</CardDescription>
                </div>
                <div className="flex gap-2">
                  <Button variant="outline" className="glow-hover">
                    <Download className="h-4 w-4 mr-2" />
                    Deploy Agent
                  </Button>
                  
                  <Dialog open={isAddAgentOpen} onOpenChange={setIsAddAgentOpen}>
                    <DialogTrigger asChild>
                      <Button className="glow-hover">
                        <Plus className="h-4 w-4 mr-2" />
                        Add Agent
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="sm:max-w-[600px] gradient-card">
                      <DialogHeader>
                        <DialogTitle className="flex items-center gap-2">
                          <Server className="h-5 w-5 text-primary" />
                          Add New Wazuh Agent
                        </DialogTitle>
                        <DialogDescription>
                          Configure a new agent to monitor your infrastructure. Fill in the details and get the installation command.
                        </DialogDescription>
                      </DialogHeader>
                      
                      <div className="grid gap-6 py-4">
                        {/* Agent Basic Information */}
                        <div className="grid grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <Label htmlFor="agent-name">Agent Name *</Label>
                            <Input
                              id="agent-name"
                              placeholder="web-server-01"
                              value={agentForm.name}
                              onChange={(e) => setAgentForm({...agentForm, name: e.target.value})}
                              className="glow-hover"
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="agent-ip">IP Address *</Label>
                            <Input
                              id="agent-ip"
                              placeholder="192.168.1.100"
                              value={agentForm.ip}
                              onChange={(e) => setAgentForm({...agentForm, ip: e.target.value})}
                              className="glow-hover"
                            />
                          </div>
                        </div>
                        
                        {/* Operating System and Group */}
                        <div className="grid grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <Label htmlFor="agent-os">Operating System</Label>
                            <Select value={agentForm.os} onValueChange={(value) => setAgentForm({...agentForm, os: value})}>
                              <SelectTrigger className="glow-hover">
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="linux">Linux</SelectItem>
                                <SelectItem value="windows">Windows</SelectItem>
                                <SelectItem value="macos">macOS</SelectItem>
                                <SelectItem value="freebsd">FreeBSD</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="agent-group">Agent Group</Label>
                            <Select value={agentForm.group} onValueChange={(value) => setAgentForm({...agentForm, group: value})}>
                              <SelectTrigger className="glow-hover">
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="default">Default</SelectItem>
                                <SelectItem value="web-servers">Web Servers</SelectItem>
                                <SelectItem value="db-servers">Database Servers</SelectItem>
                                <SelectItem value="mail-servers">Mail Servers</SelectItem>
                                <SelectItem value="workstations">Workstations</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        </div>
                        
                        {/* Description */}
                        <div className="space-y-2">
                          <Label htmlFor="agent-description">Description (Optional)</Label>
                          <Textarea
                            id="agent-description"
                            placeholder="Production web server hosting main application"
                            value={agentForm.description}
                            onChange={(e) => setAgentForm({...agentForm, description: e.target.value})}
                            className="glow-hover"
                            rows={3}
                          />
                        </div>
                        
                        {/* Installation Command Preview */}
                        {agentForm.name && agentForm.ip && (
                          <div className="space-y-2">
                            <Label>Installation Command</Label>
                            <div className="relative">
                              <pre className="bg-muted p-3 rounded-md text-sm overflow-x-auto border">
                                <code>{generateInstallCommand()}</code>
                              </pre>
                              <Button
                                size="sm"
                                variant="outline"
                                className="absolute top-2 right-2"
                                onClick={copyInstallCommand}
                              >
                                {copied ? (
                                  <Check className="h-3 w-3" />
                                ) : (
                                  <Copy className="h-3 w-3" />
                                )}
                              </Button>
                            </div>
                            <p className="text-xs text-muted-foreground">
                              Run this command on the target system to install and configure the Wazuh agent.
                            </p>
                          </div>
                        )}
                      </div>
                      
                      <div className="flex justify-end gap-2">
                        <Button variant="outline" onClick={() => setIsAddAgentOpen(false)}>
                          Cancel
                        </Button>
                        <Button onClick={handleAddAgent} className="glow-hover">
                          <Network className="h-4 w-4 mr-2" />
                          Configure Agent
                        </Button>
                      </div>
                    </DialogContent>
                  </Dialog>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="flex items-center gap-4 mb-4">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input 
                    placeholder="Search agents..." 
                    className="pl-10"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
                <Button variant="outline" className="glow-hover">
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Refresh
                </Button>
              </div>

              <ScrollArea className="h-[400px]">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Agent ID</TableHead>
                      <TableHead>Name</TableHead>
                      <TableHead>IP Address</TableHead>
                      <TableHead>OS</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Last Seen</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {agents.map((agent) => (
                      <TableRow key={agent.id}>
                        <TableCell className="font-mono">{agent.id}</TableCell>
                        <TableCell className="font-medium">{agent.name}</TableCell>
                        <TableCell>{agent.ip}</TableCell>
                        <TableCell>{agent.os}</TableCell>
                        <TableCell>
                          <Badge variant={agent.status === 'active' ? 'default' : 'destructive'}>
                            {agent.status}
                          </Badge>
                        </TableCell>
                        <TableCell>{agent.lastSeen}</TableCell>
                        <TableCell>
                          <div className="flex gap-1">
                            <Button size="sm" variant="outline">
                              <Eye className="h-3 w-3" />
                            </Button>
                            <Button size="sm" variant="outline">
                              <Pause className="h-3 w-3" />
                            </Button>
                            <Button size="sm" variant="outline">
                              <Trash2 className="h-3 w-3" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </ScrollArea>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Rules Management */}
        <TabsContent value="rules" className="space-y-6">
          <Card className="gradient-card glow">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5 text-primary" />
                    Detection Rules
                  </CardTitle>
                  <CardDescription>Manage detection rules and custom signatures</CardDescription>
                </div>
                <div className="flex gap-2">
                  <Button variant="outline" className="glow-hover">
                    <Upload className="h-4 w-4 mr-2" />
                    Import Rules
                  </Button>
                  <Button className="glow-hover">
                    <Plus className="h-4 w-4 mr-2" />
                    Create Rule
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[400px]">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Rule ID</TableHead>
                      <TableHead>Level</TableHead>
                      <TableHead>Description</TableHead>
                      <TableHead>Groups</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {rules.map((rule) => (
                      <TableRow key={rule.id}>
                        <TableCell className="font-mono">{rule.id}</TableCell>
                        <TableCell>
                          <Badge variant={
                            rule.level === 'High' ? 'destructive' : 
                            rule.level === 'Medium' ? 'secondary' : 'outline'
                          }>
                            {rule.level}
                          </Badge>
                        </TableCell>
                        <TableCell>{rule.description}</TableCell>
                        <TableCell>
                          <div className="flex gap-1 flex-wrap">
                            {rule.groups.map((group, index) => (
                              <Badge key={index} variant="outline" className="text-xs">
                                {group}
                              </Badge>
                            ))}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex gap-1">
                            <Button size="sm" variant="outline">
                              <Eye className="h-3 w-3" />
                            </Button>
                            <Button size="sm" variant="outline">
                              <Settings className="h-3 w-3" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </ScrollArea>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Alerts Management */}
        <TabsContent value="alerts" className="space-y-6">
          <Card className="gradient-card glow">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <AlertTriangle className="h-5 w-5 text-primary" />
                Security Alerts
              </CardTitle>
              <CardDescription>Real-time security alerts and incident response</CardDescription>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[400px]">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Timestamp</TableHead>
                      <TableHead>Agent</TableHead>
                      <TableHead>Rule</TableHead>
                      <TableHead>Level</TableHead>
                      <TableHead>Source IP</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {alerts.map((alert) => (
                      <TableRow key={alert.id}>
                        <TableCell className="font-mono text-sm">{alert.timestamp}</TableCell>
                        <TableCell>{alert.agent}</TableCell>
                        <TableCell>{alert.rule}</TableCell>
                        <TableCell>
                          <Badge variant={
                            alert.level === 'High' ? 'destructive' : 
                            alert.level === 'Medium' ? 'secondary' : 'outline'
                          }>
                            {alert.level}
                          </Badge>
                        </TableCell>
                        <TableCell className="font-mono">{alert.ip}</TableCell>
                        <TableCell>
                          <div className="flex gap-1">
                            <Button size="sm" variant="outline">
                              <Eye className="h-3 w-3" />
                            </Button>
                            <Button size="sm" variant="outline">
                              <Play className="h-3 w-3" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </ScrollArea>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Additional tabs would be implemented similarly */}
        <TabsContent value="monitoring">
          <Card className="gradient-card glow">
            <CardHeader>
              <CardTitle>System Monitoring</CardTitle>
              <CardDescription>Real-time system performance and health metrics</CardDescription>
            </CardHeader>
            <CardContent className="h-[400px] flex items-center justify-center">
              <p className="text-muted-foreground">Monitoring dashboard coming soon...</p>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="config">
          <Card className="gradient-card glow">
            <CardHeader>
              <CardTitle>Configuration Management</CardTitle>
              <CardDescription>Wazuh server and agent configuration settings</CardDescription>
            </CardHeader>
            <CardContent className="h-[400px] flex items-center justify-center">
              <p className="text-muted-foreground">Configuration panel coming soon...</p>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="reports">
          <Card className="gradient-card glow">
            <CardHeader>
              <CardTitle>Security Reports</CardTitle>
              <CardDescription>Generate and manage security compliance reports</CardDescription>
            </CardHeader>
            <CardContent className="h-[400px] flex items-center justify-center">
              <p className="text-muted-foreground">Reports dashboard coming soon...</p>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <div className="mt-8 text-center">
        <p className="text-sm text-muted-foreground">
          Connect to Supabase to enable Wazuh API integration and real-time functionality
        </p>
      </div>
    </div>
  );
};

export default WazuhManagement;