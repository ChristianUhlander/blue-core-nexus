/**
 * Modern Penetration Testing Framework Types
 * Updated with latest tools and methodologies from 2024
 * 
 * Research Sources:
 * - BloodHound CE 5.0+ (SpecterOps)
 * - CrackMapExec (NetExec fork)
 * - Mimikatz latest
 * - HackTricks methodology
 * - OWASP K8s Security Testing Guide
 * - Kubernetes penetration testing tools 2024
 */

// ========== CORE PENTEST TYPES ==========

export interface ModernPentestSession {
  id: string;
  name: string;
  description: string;
  target: PentestTarget;
  methodology: 'hacktricks' | 'owasp' | 'nist' | 'ptes' | 'custom';
  status: 'planning' | 'active' | 'paused' | 'completed' | 'failed';
  startTime: string;
  endTime?: string;
  findings: ModernFinding[];
  evidence: Evidence[];
  tools: ModernToolConfig[];
  aiAgent?: AIAgentConfig;
  metadata: SessionMetadata;
}

export interface PentestTarget {
  type: 'kubernetes' | 'active_directory' | 'web_application' | 'network' | 'cloud' | 'hybrid';
  primary: string;
  scope: TargetScope;
  authentication?: AuthConfig;
  environment: 'development' | 'staging' | 'production';
  businessCriticality: 'low' | 'medium' | 'high' | 'critical';
  compliance: ComplianceFramework[];
}

export interface TargetScope {
  inScope: string[];
  outOfScope: string[];
  domains: string[];
  ipRanges: string[];
  ports: number[];
  k8sNamespaces?: string[];
  adDomains?: string[];
}

export interface AuthConfig {
  type: 'none' | 'basic' | 'token' | 'certificate';
  username?: string;
  password?: string;
  token?: string;
  certificatePath?: string;
}

// ========== MODERN TOOL CONFIGURATIONS ==========

export interface ModernToolConfig {
  category: 'reconnaissance' | 'enumeration' | 'exploitation' | 'post_exploitation' | 'persistence' | 'cleanup';
  name: string;
  version: string;
  enabled: boolean;
  priority: number;
  configuration: Record<string, any>;
  resourceLimits: ResourceLimits;
  safety: SafetyConfig;
  integrations: string[];
}

// Active Directory Tools
export interface BloodHoundConfig extends ModernToolConfig {
  name: 'bloodhound';
  configuration: {
    collectors: ('AzureHound' | 'SharpHound' | 'BloodHound.py')[];
    domain: string;
    username?: string;
    password?: string;
    ldapPort: number;
    globalCatalogPort: number;
    outputFormat: 'json' | 'zip';
    stealthMode: boolean;
    customQueries: BloodHoundQuery[];
  };
}

export interface CrackMapExecConfig extends ModernToolConfig {
  name: 'crackmapexec';
  configuration: {
    protocols: ('smb' | 'ldap' | 'mssql' | 'winrm' | 'ssh' | 'rdp')[];
    authentication: {
      username?: string;
      password?: string;
      ntlmHash?: string;
      kerberosTicket?: string;
      certificatePath?: string;
    };
    modules: string[];
    stealthMode: boolean;
    threads: number;
    timeout: number;
  };
}

export interface MimikatzConfig extends ModernToolConfig {
  name: 'mimikatz';
  configuration: {
    modules: ('sekurlsa' | 'kerberos' | 'lsadump' | 'crypto' | 'dpapi')[];
    outputFile: string;
    stealth: boolean;
    antivirusEvasion: boolean;
  };
}

// Kubernetes Tools
export interface KdiggerConfig extends ModernToolConfig {
  name: 'kdigger';
  configuration: {
    runtime: 'docker' | 'containerd' | 'crio';
    namespace: string;
    serviceAccount: string;
    outputFormat: 'json' | 'yaml' | 'table';
    checks: string[];
  };
}

export interface KubeHunterConfig extends ModernToolConfig {
  name: 'kube-hunter';
  configuration: {
    remote: boolean;
    cidr?: string;
    mapping: boolean;
    reportFormat: 'json' | 'yaml';
  };
}

export interface KubeBenchConfig extends ModernToolConfig {
  name: 'kube-bench';
  configuration: {
    benchmark: 'cis-1.6' | 'cis-1.7' | 'cis-1.8' | 'custom';
    nodeType: 'master' | 'node' | 'etcd';
    outputFormat: 'json' | 'yaml' | 'junit';
  };
}

// Network & Web Tools
export interface NmapConfig extends ModernToolConfig {
  name: 'nmap';
  configuration: {
    scanTypes: ('syn' | 'tcp' | 'udp' | 'sctp')[];
    ports: string;
    timing: '0' | '1' | '2' | '3' | '4' | '5';
    scripts: string[];
    outputFormat: ('xml' | 'json' | 'grepable')[];
    stealthMode: boolean;
    serviceDetection: boolean;
    osDetection: boolean;
    aggressiveScan: boolean;
  };
}

// ========== HACKTRICKS METHODOLOGY ==========

export interface HackTricksPhase {
  id: string;
  name: string;
  description: string;
  techniques: HackTricksTechnique[];
  prerequisites: string[];
  expectedOutputs: string[];
  successCriteria: string[];
}

export interface HackTricksTechnique {
  id: string;
  name: string;
  category: string;
  description: string;
  commands: TechniqueCommand[];
  tools: string[];
  mitreAttackId?: string;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  detectionLikelihood: 'low' | 'medium' | 'high';
}

export interface TechniqueCommand {
  tool: string;
  command: string;
  parameters: Record<string, string>;
  expectedOutput: string;
  dangerLevel: 'safe' | 'caution' | 'destructive';
  requiresConfirmation: boolean;
}

// ========== ACTIVE DIRECTORY SPECIFIC ==========

export interface ADTarget {
  domain: string;
  domainControllers: string[];
  forestLevel: string;
  domainLevel: string;
  trusts: ADTrust[];
  computers: number;
  users: number;
  groups: number;
  gpos: number;
}

export interface ADTrust {
  targetDomain: string;
  trustType: 'parent-child' | 'external' | 'forest' | 'shortcut';
  trustDirection: 'inbound' | 'outbound' | 'bidirectional';
  filteringSID: boolean;
}

export interface BloodHoundQuery {
  name: string;
  description: string;
  cypher: string;
  category: 'domain_admin_paths' | 'kerberoasting' | 'asreproasting' | 'unconstrained_delegation';
}

// ========== KUBERNETES SPECIFIC ==========

export interface K8sTarget {
  clusterName: string;
  version: string;
  platform: 'eks' | 'gke' | 'aks' | 'openshift' | 'rancher' | 'vanilla';
  nodes: number;
  namespaces: string[];
  rbacEnabled: boolean;
  networkPolicies: boolean;
  podSecurityStandards: boolean;
  admissionControllers: string[];
}

export interface K8sVulnerability {
  id: string;
  name: string;
  category: 'rbac' | 'network' | 'pod_security' | 'secrets' | 'etcd' | 'api_server';
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  impact: string;
  remediation: string;
  cve?: string;
  kubernetesVersion: string;
}

// ========== FINDINGS & EVIDENCE ==========

export interface ModernFinding {
  id: string;
  title: string;
  category: FindingCategory;
  severity: 'informational' | 'low' | 'medium' | 'high' | 'critical';
  confidence: 'tentative' | 'firm' | 'certain';
  cvss: CVSSScore;
  description: string;
  technicalDetails: string;
  impact: string;
  recommendation: string;
  references: string[];
  evidence: Evidence[];
  attackPath?: AttackPath;
  mitreAttack: MitreMapping;
  discoveredAt: string;
  tool: string;
  validated: boolean;
}

export interface AttackPath {
  steps: AttackStep[];
  totalComplexity: 'low' | 'medium' | 'high';
  requiredPrivileges: 'none' | 'user' | 'admin' | 'system';
  detectionDifficulty: 'easy' | 'medium' | 'hard';
}

export interface AttackStep {
  id: string;
  name: string;
  description: string;
  technique: string;
  prerequisites: string[];
  commands: string[];
  expectedOutput: string;
}

export interface Evidence {
  id: string;
  type: 'screenshot' | 'command_output' | 'file' | 'network_capture' | 'log';
  title: string;
  content: string;
  metadata: Record<string, any>;
  timestamp: string;
  source: string;
  hash: string;
}

// ========== QA & COMPLIANCE ==========

export interface QAChecklist {
  id: string;
  category: 'preparation' | 'execution' | 'reporting' | 'cleanup';
  items: QAItem[];
  completedItems: number;
  totalItems: number;
  compliance: ComplianceFramework[];
}

export interface QAItem {
  id: string;
  description: string;
  required: boolean;
  completed: boolean;
  evidence?: string;
  notes?: string;
  reviewer?: string;
  reviewDate?: string;
}

export interface ComplianceFramework {
  name: 'iso27001' | 'nist' | 'pci-dss' | 'sox' | 'hipaa' | 'gdpr';
  version: string;
  requirements: ComplianceRequirement[];
}

export interface ComplianceRequirement {
  id: string;
  description: string;
  satisfied: boolean;
  evidence: string[];
  gaps: string[];
}

// ========== AI AGENT CONFIGURATION ==========

export interface AIAgentConfig {
  model: string;
  temperature: number;
  maxTokens: number;
  systemPrompt: string;
  contextWindow: number;
  reasoning: 'chain_of_thought' | 'tree_of_thought' | 'react';
  decisionMaking: AIDecisionConfig;
  capabilities: AICapabilities;
  hackTricksIntegration: boolean;
  perplexityResearch: boolean;
}

export interface AIDecisionConfig {
  riskTolerance: 'conservative' | 'moderate' | 'aggressive';
  confirmationRequired: boolean;
  blacklistCommands: string[];
  whitelistTargets: string[];
  maxAutonomousActions: number;
}

export interface AICapabilities {
  commandGeneration: boolean;
  outputAnalysis: boolean;
  nextStepRecommendation: boolean;
  exploitSelection: boolean;
  reportGeneration: boolean;
  hackTricksQuery: boolean;
  threatIntelligence: boolean;
}

// ========== UTILITY TYPES ==========

export interface ResourceLimits {
  maxExecutionTime: number;
  maxMemoryUsage: number;
  maxCpuUsage: number;
  maxDiskUsage?: number;
  maxNetworkBandwidth?: number;
}

export interface SafetyConfig {
  destructive: boolean;
  requiresConfirmation: boolean;
  allowedTargets: string[];
  blockedTargets: string[];
  maxConcurrentInstances: number;
}

export interface SessionMetadata {
  tester: string;
  client: string;
  engagement: string;
  scope: string;
  timeline: {
    start: string;
    end: string;
  };
  approvals: string[];
  constraints: string[];
}

export interface CVSSScore {
  version: '3.1' | '4.0';
  vector: string;
  baseScore: number;
  temporalScore?: number;
  environmentalScore?: number;
  severity: string;
}

export interface MitreMapping {
  tactics: string[];
  techniques: string[];
  subTechniques?: string[];
}

export type FindingCategory = 
  | 'authentication'
  | 'authorization'
  | 'cryptography'
  | 'data_validation'
  | 'configuration'
  | 'network_security'
  | 'privilege_escalation'
  | 'information_disclosure'
  | 'denial_of_service'
  | 'code_execution'
  | 'kubernetes_rbac'
  | 'kubernetes_network'
  | 'active_directory'
  | 'credential_theft';

// ========== API RESPONSE TYPES ==========

export interface ModernPentestApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  timestamp: string;
  sessionId?: string;
  metadata?: Record<string, any>;
}

export interface ModernPentestWSMessage {
  type: 'tool_output' | 'finding_discovered' | 'phase_complete' | 'session_status' | 'ai_decision' | 'qa_update';
  sessionId: string;
  data: any;
  timestamp: string;
  source: string;
}

// ========== EXECUTION TYPES ==========

export interface ExecutionStep {
  id: string;
  sessionId: string;
  phase: string;
  technique: string;
  tool: string;
  command: string;
  status: 'pending' | 'running' | 'completed' | 'failed' | 'skipped';
  startTime: string;
  endTime?: string;
  output: string;
  findings: string[];
  nextSteps: string[];
  aiAnalysis?: string;
}

export interface ToolExecution {
  id: string;
  tool: string;
  command: string;
  parameters: Record<string, any>;
  status: 'queued' | 'running' | 'completed' | 'failed' | 'cancelled';
  output: string;
  errors: string[];
  duration: number;
  resourceUsage: ResourceUsage;
}

export interface ResourceUsage {
  cpu: number;
  memory: number;
  disk: number;
  network: number;
}

// ========== REPORTING TYPES ==========

export interface PentestReport {
  id: string;
  sessionId: string;
  title: string;
  executiveSummary: string;
  methodology: string;
  scope: string;
  findings: ModernFinding[];
  recommendations: Recommendation[];
  appendices: Appendix[];
  metadata: ReportMetadata;
  qaChecklist: QAChecklist;
  compliance: ComplianceFramework[];
}

export interface Recommendation {
  id: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  category: string;
  description: string;
  implementation: string;
  effort: 'low' | 'medium' | 'high';
  cost: 'low' | 'medium' | 'high';
  timeline: string;
  risks: string[];
}

export interface Appendix {
  id: string;
  title: string;
  type: 'tool_output' | 'raw_data' | 'screenshots' | 'configurations';
  content: string;
  files: string[];
}

export interface ReportMetadata {
  version: string;
  createdAt: string;
  createdBy: string;
  format: 'html' | 'pdf' | 'markdown' | 'docx';
  template: string;
  language: string;
  classification: 'public' | 'internal' | 'confidential' | 'restricted';
}