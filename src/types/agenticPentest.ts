/**
 * Agentic Penetration Testing Framework Types
 * AI-Powered Autonomous Security Assessment System
 * 
 * RESEARCH SOURCES:
 * - RedTeamLLM: Agentic AI framework for offensive security (arXiv:2505.06913)
 * - OWASP Testing Guide v4.2
 * - NIST SP 800-115: Technical Guide to Information Security Testing
 * - CIS Penetration Testing Guidelines
 * - Kali Linux Tool Documentation
 * 
 * SUPPORTED TOOLS:
 * - Nmap: Network discovery and security auditing
 * - SQLMap: Automatic SQL injection and database takeover tool
 * - Nikto: Web server scanner
 * - Amass: Attack surface mapping and asset discovery
 * - DNSRecon: DNS enumeration and network reconnaissance
 * - Sn1per: Automated penetration testing framework
 * - Metasploit: Penetration testing platform
 * - Burp Suite: Web application security testing
 */

// Core agentic pentest session types
export interface AgenticPentestSession {
  id: string;
  name: string;
  description: string;
  target: PentestTarget;
  status: 'planning' | 'reconnaissance' | 'scanning' | 'enumeration' | 'exploitation' | 'post_exploitation' | 'reporting' | 'completed' | 'failed';
  phase: PentestPhase;
  methodology: 'owasp' | 'nist' | 'cis' | 'ptes' | 'custom';
  aiAgent: AIAgentConfig;
  tools: KaliToolConfig[];
  findings: AgenticFinding[];
  executionHistory: ExecutionStep[];
  timeline: {
    started: string;
    estimated_completion: string;
    actual_completion?: string;
  };
  configuration: SessionConfiguration;
  logs: AgenticLog[];
}

// AI Agent Configuration for LLM integration
export interface AIAgentConfig {
  model: 'gpt-5-2025-08-07' | 'claude-sonnet-4-20250514' | 'claude-opus-4-20250514' | 'llama-3.1-sonar-large-128k-online';
  temperature: number; // 0.0-1.0 for creativity vs precision
  maxTokens: number;
  systemPrompt: string;
  contextWindow: number;
  reasoning: 'step_by_step' | 'chain_of_thought' | 'tree_of_thought';
  decisionMaking: {
    riskTolerance: 'conservative' | 'moderate' | 'aggressive';
    confirmationRequired: boolean;
    blacklistCommands: string[];
    whitelistTargets: string[];
  };
  capabilities: {
    commandGeneration: boolean;
    outputAnalysis: boolean;
    nextStepRecommendation: boolean;
    exploitSelection: boolean;
    reportGeneration: boolean;
  };
}

// Kali Linux tool configurations
export interface KaliToolConfig {
  name: 'nmap' | 'sqlmap' | 'nikto' | 'amass' | 'dnsrecon' | 'sn1per' | 'metasploit' | 'burpsuite' | 'gobuster' | 'dirb' | 'hydra' | 'john' | 'hashcat' | 'ffuf' | 'bloodhound' | 'crackmapexec' | 'mimikatz' | 'recon-ng' | 'ghidra' | 'wireshark' | 'social-engineer-toolkit' | 'mobsf';
  version: string;
  enabled: boolean;
  priority: number; // 1-10, used by AI for tool selection
  category?: 'network' | 'web' | 'ad' | 'osint' | 'reversing' | 'social' | 'mobile' | 'general';
  description?: string;
  configuration: Record<string, any>;
  resourceLimits: {
    maxExecutionTime: number; // seconds
    maxMemoryUsage: number; // MB
    maxCpuUsage: number; // percentage
  };
  safety: {
    destructive: boolean;
    requiresConfirmation: boolean;
    allowedTargets: string[];
    blockedTargets: string[];
  };
}

// Pentest phases based on OWASP methodology
export interface PentestPhase {
  current: 'information_gathering' | 'vulnerability_assessment' | 'exploitation' | 'post_exploitation' | 'reporting';
  completed: string[];
  nextSteps: string[];
  aiRecommendations: string[];
  estimatedTimeRemaining: number; // minutes
}

// Target configuration for agentic testing
export interface PentestTarget {
  type: 'web_application' | 'network' | 'api' | 'mobile' | 'cloud' | 'iot' | 'mixed';
  primary: string; // Main target URL/IP
  scope: {
    inScope: string[];
    outOfScope: string[];
    domains: string[];
    ipRanges: string[];
    ports: number[];
  };
  authentication: {
    type: 'none' | 'basic' | 'form' | 'oauth' | 'api_key' | 'jwt' | 'custom';
    credentials?: {
      username: string;
      password: string;
      apiKey?: string;
      token?: string;
    };
  };
  environment: 'production' | 'staging' | 'development' | 'testing';
  businessCriticality: 'low' | 'medium' | 'high' | 'critical';
}

// AI-generated findings with confidence scoring
export interface AgenticFinding {
  id: string;
  title: string;
  description: string;
  severity: 'info' | 'low' | 'medium' | 'high' | 'critical';
  confidence: number; // 0-100%
  cvss: {
    score: number;
    vector: string;
    exploitability: number;
    impact: number;
  };
  category: 'injection' | 'broken_auth' | 'sensitive_exposure' | 'xxe' | 'broken_access' | 'security_misconfig' | 'xss' | 'insecure_deserialization' | 'vulnerable_components' | 'insufficient_logging';
  owasp: {
    category: string;
    reference: string;
    testing_guide: string;
  };
  evidence: Evidence[];
  recommendation: string;
  remediation: {
    priority: 'immediate' | 'high' | 'medium' | 'low';
    effort: 'minimal' | 'moderate' | 'significant' | 'extensive';
    steps: string[];
    resources: string[];
  };
  aiAnalysis: {
    discoveryMethod: string;
    reasoningChain: string[];
    alternativeAttacks: string[];
    businessImpact: string;
  };
  tool: string; // Which Kali tool discovered this
  timestamp: string;
  verified: boolean;
}

// Evidence collection for findings
export interface Evidence {
  type: 'command_output' | 'screenshot' | 'network_capture' | 'log_file' | 'proof_of_concept' | 'payload';
  content: string | Buffer;
  filename?: string;
  metadata: {
    tool: string;
    command: string;
    timestamp: string;
    size: number;
    hash: string;
  };
  sensitive: boolean; // Contains sensitive data requiring redaction
}

// Execution step tracking for AI decision making
export interface ExecutionStep {
  id: string;
  timestamp: string;
  phase: string;
  tool: string;
  command: string;
  reasoning: string; // AI's reasoning for this step
  expectedOutcome: string;
  actualOutcome: 'success' | 'failure' | 'partial' | 'timeout' | 'error';
  output: string;
  duration: number; // milliseconds
  nextSteps: string[];
  aiConfidence: number; // 0-100%
  humanReviewRequired: boolean;
  findings: string[]; // IDs of findings discovered
}

// Session configuration
export interface SessionConfiguration {
  maxDuration: number; // hours
  maxFindings: number;
  automaticMode: boolean; // Fully autonomous vs human-in-the-loop
  notifications: {
    criticalFindings: boolean;
    phaseCompletion: boolean;
    errors: boolean;
    approvalRequired: boolean;
  };
  reporting: {
    format: 'html' | 'pdf' | 'json' | 'xml' | 'markdown';
    includeEvidence: boolean;
    executiveSummary: boolean;
    technicalDetails: boolean;
    remediationPlan: boolean;
  };
  compliance: {
    frameworks: string[];
    requirements: string[];
    attestation: boolean;
  };
}

// Logging for audit and debugging
export interface AgenticLog {
  id: string;
  timestamp: string;
  level: 'debug' | 'info' | 'warn' | 'error' | 'critical';
  category: 'ai_decision' | 'tool_execution' | 'finding_discovery' | 'error_handling' | 'security_event';
  message: string;
  data?: Record<string, any>;
  aiContext?: {
    prompt: string;
    response: string;
    reasoning: string;
    confidence: number;
  };
}

// Tool-specific configurations
export interface NmapConfig extends KaliToolConfig {
  name: 'nmap';
  configuration: {
    scanType: 'tcp' | 'udp' | 'syn' | 'ack' | 'fin' | 'null' | 'xmas' | 'maimon' | 'window' | 'scanflags';
    ports: string; // e.g., "1-1000", "80,443,8080", "top-ports 1000"
    timing: '0' | '1' | '2' | '3' | '4' | '5'; // T0-T5
    scripts: string[]; // NSE scripts
    outputFormat: 'xml' | 'json' | 'gnmap' | 'normal';
    osDetection: boolean;
    serviceVersion: boolean;
    aggressive: boolean;
    stealth: boolean;
    fragmentPackets: boolean;
    decoyScans: boolean;
    spoofSource: boolean;
  };
}

export interface SQLMapConfig extends KaliToolConfig {
  name: 'sqlmap';
  configuration: {
    target: string;
    testParameters: string[];
    dbms: 'mysql' | 'oracle' | 'postgresql' | 'mssql' | 'sqlite' | 'access' | 'firebird' | 'sybase' | 'db2' | 'hsqldb' | 'auto';
    technique: string; // BEUSTQ
    level: 1 | 2 | 3 | 4 | 5;
    risk: 1 | 2 | 3;
    threads: number;
    dumpData: boolean;
    dumpAll: boolean;
    batch: boolean;
    tamper: string[];
    userAgent: string;
    headers: Record<string, string>;
    cookies: string;
    proxy: string;
  };
}

export interface NiktoConfig extends KaliToolConfig {
  name: 'nikto';
  configuration: {
    target: string;
    port: number;
    ssl: boolean;
    plugins: string[];
    tuning: string; // x (reverse lookups), 1-9 (test categories)
    maxtime: number; // seconds
    timeout: number; // seconds
    useragent: string;
    cookies: string;
    headers: Record<string, string>;
    proxy: string;
    output: 'txt' | 'html' | 'xml' | 'csv' | 'json';
  };
}

export interface AmassConfig extends KaliToolConfig {
  name: 'amass';
  configuration: {
    mode: 'intel' | 'enum' | 'viz' | 'track' | 'db';
    domain: string;
    passive: boolean;
    active: boolean;
    bruteforce: boolean;
    wordlists: string[];
    resolvers: string[];
    sources: string[]; // APIs to use
    timeout: number;
    maxDNSQueries: number;
    alterations: boolean;
    minForRecursive: number;
  };
}

export interface Sn1perConfig extends KaliToolConfig {
  name: 'sn1per';
  configuration: {
    mode: 'stealth' | 'flyover' | 'airstrike' | 'nuke' | 'discover' | 'port' | 'fullportonly' | 'web' | 'webporthttp' | 'webporthttps' | 'webscan' | 'massweb';
    target: string;
    workspace: string;
    threads: number;
    timeout: number;
    bruteforce: boolean;
    osint: boolean;
    recon: boolean;
    vulnscan: boolean;
    exploitscan: boolean;
    reporting: boolean;
  };
}

// API response types for backend integration
export interface AgenticPentestApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  timestamp: string;
  sessionId: string;
  aiContext?: {
    reasoning: string;
    confidence: number;
    recommendations: string[];
  };
}

// WebSocket message types for real-time updates
export interface AgenticPentestWSMessage {
  type: 'session_start' | 'phase_change' | 'tool_execution' | 'finding_discovered' | 'ai_decision' | 'error' | 'session_complete';
  sessionId: string;
  data: any;
  timestamp: string;
  aiAgent?: {
    reasoning: string;
    nextAction: string;
    confidence: number;
  };
}