/**
 * Active Directory Penetration Testing Module
 * Modern AD assessment using latest tools and techniques
 * 
 * Tools Integrated:
 * - BloodHound CE 5.0+ (Attack path analysis)
 * - CrackMapExec/NetExec (Lateral movement)
 * - Mimikatz (Credential extraction)
 * - Impacket suite (Protocol exploitation)
 * - Rubeus (Kerberos attacks)
 * - PowerView (AD enumeration)
 * 
 * Attack Techniques:
 * - Domain enumeration
 * - Kerberoasting
 * - ASREPRoasting
 * - DCSync attacks
 * - Golden/Silver ticket attacks
 * - Unconstrained delegation abuse
 */

import React, { useState, useCallback, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  Users, 
  Shield, 
  Key, 
  Network, 
  Database, 
  Target,
  PlayCircle,
  StopCircle,
  Eye,
  Terminal,
  Activity,
  Clock,
  CheckCircle,
  AlertTriangle,
  RefreshCw,
  Download,
  Search,
  Loader2,
  Settings,
  Lock,
  Unlock,
  Server,
  Globe
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { modernPentestApi } from "@/services/modernPentestApi";
import { RealtimeTerminal } from "@/components/RealtimeTerminal";
import { ToolConfigurationForm } from "@/components/ToolConfigurationForm";
import { PentestTarget, BloodHoundConfig, CrackMapExecConfig, MimikatzConfig } from "@/types/modernPentest";
import { toolConfigurations } from "@/data/toolConfigurations";

interface ADPentestingModuleProps {
  sessionId?: string;
  targetConfig: PentestTarget;
}

interface ADToolExecution {
  id: string;
  tool: string;
  status: 'idle' | 'running' | 'completed' | 'failed';
  progress: number;
  output: string;
  findings: number;
  startTime?: string;
  duration?: number;
}

export const ADPentestingModule: React.FC<ADPentestingModuleProps> = ({ 
  sessionId, 
  targetConfig 
}) => {
  const { toast } = useToast();

  // Tool execution state
  const [toolExecutions, setToolExecutions] = useState<ADToolExecution[]>([
    { id: 'bloodhound', tool: 'BloodHound', status: 'idle', progress: 0, output: '', findings: 0 },
    { id: 'crackmapexec', tool: 'CrackMapExec', status: 'idle', progress: 0, output: '', findings: 0 },
    { id: 'mimikatz', tool: 'Mimikatz', status: 'idle', progress: 0, output: '', findings: 0 },
    { id: 'impacket', tool: 'Impacket', status: 'idle', progress: 0, output: '', findings: 0 }
  ]);

  // AD configuration
  const [adConfig, setAdConfig] = useState({
    domain: '',
    domainController: '',
    username: '',
    password: '',
    ntlmHash: '',
    useKerberos: false,
    stealthMode: true,
    customQueries: true
  });

  // BloodHound configuration
  const [bloodhoundConfig, setBloodhoundConfig] = useState<Partial<BloodHoundConfig>>({
    name: 'bloodhound',
    configuration: {
      collectors: ['SharpHound'],
      domain: '',
      ldapPort: 389,
      globalCatalogPort: 3268,
      outputFormat: 'json',
      stealthMode: true,
      customQueries: [
        {
          name: 'Find Domain Admins',
          description: 'Identify all domain administrator accounts',
          cypher: 'MATCH (u:User)-[:MemberOf*1..]->(g:Group {name:"DOMAIN ADMINS@DOMAIN.LOCAL"}) RETURN u',
          category: 'domain_admin_paths'
        },
        {
          name: 'Kerberoastable Users',
          description: 'Find users with SPN set for Kerberoasting',
          cypher: 'MATCH (u:User {hasspn:true}) RETURN u',
          category: 'kerberoasting'
        },
        {
          name: 'ASREPRoastable Users',
          description: 'Find users with "Do not require Kerberos preauthentication"',
          cypher: 'MATCH (u:User {dontreqpreauth:true}) RETURN u',
          category: 'asreproasting'
        }
      ]
    }
  });

  // CrackMapExec configuration
  const [cmeConfig, setCmeConfig] = useState<Partial<CrackMapExecConfig>>({
    name: 'crackmapexec',
    configuration: {
      protocols: ['smb', 'ldap', 'winrm'],
      authentication: {
        username: '',
        password: ''
      },
      modules: ['lsassy', 'nanodump', 'procdump'],
      stealthMode: true,
      threads: 5,
      timeout: 30
    }
  });

  // BloodHound analysis results
  const [bloodhoundData, setBloodhoundData] = useState<any>(null);

  // Update tool execution status
  const updateToolStatus = useCallback((toolId: string, updates: Partial<ADToolExecution>) => {
    setToolExecutions(prev => 
      prev.map(tool => 
        tool.id === toolId ? { ...tool, ...updates } : tool
      )
    );
  }, []);

  // Execute BloodHound collection
  const executeBloodHound = useCallback(async () => {
    if (!sessionId) {
      toast({
        title: "No Active Session",
        description: "Please start a penetration test session first",
        variant: "destructive"
      });
      return;
    }

    try {
      updateToolStatus('bloodhound', { 
        status: 'running', 
        progress: 0,
        startTime: new Date().toISOString()
      });

      const config = {
        ...bloodhoundConfig,
        sessionId,
        configuration: {
          ...bloodhoundConfig.configuration!,
          domain: adConfig.domain,
          username: adConfig.username,
          password: adConfig.password
        }
      };

      const response = await modernPentestApi.executeBloodHound(config as any);

      if (response.success) {
        updateToolStatus('bloodhound', { 
          status: 'completed', 
          progress: 100,
          output: 'BloodHound collection completed successfully'
        });

        // Fetch analysis results
        const analysisResponse = await modernPentestApi.getBloodHoundAnalysis(sessionId);
        if (analysisResponse.success) {
          setBloodhoundData(analysisResponse.data);
        }

        toast({
          title: "BloodHound Complete",
          description: "AD enumeration and analysis completed"
        });
      } else {
        throw new Error(response.error || 'BloodHound execution failed');
      }
    } catch (error) {
      updateToolStatus('bloodhound', { 
        status: 'failed', 
        output: error instanceof Error ? error.message : 'Unknown error'
      });

      toast({
        title: "BloodHound Failed",
        description: error instanceof Error ? error.message : 'Unknown error occurred',
        variant: "destructive"
      });
    }
  }, [sessionId, bloodhoundConfig, adConfig, updateToolStatus, toast]);

  // Execute CrackMapExec
  const executeCrackMapExec = useCallback(async () => {
    if (!sessionId) {
      toast({
        title: "No Active Session",
        description: "Please start a penetration test session first",
        variant: "destructive"
      });
      return;
    }

    try {
      updateToolStatus('crackmapexec', { 
        status: 'running', 
        progress: 0,
        startTime: new Date().toISOString()
      });

      const config = {
        ...cmeConfig,
        sessionId,
        targets: [targetConfig.primary],
        configuration: {
          ...cmeConfig.configuration!,
          authentication: {
            username: adConfig.username,
            password: adConfig.password,
            ntlmHash: adConfig.ntlmHash
          }
        }
      };

      const response = await modernPentestApi.executeCrackMapExec(config as any);

      if (response.success) {
        updateToolStatus('crackmapexec', { 
          status: 'completed', 
          progress: 100,
          output: 'CrackMapExec enumeration completed successfully'
        });

        toast({
          title: "CrackMapExec Complete",
          description: "Lateral movement assessment completed"
        });
      } else {
        throw new Error(response.error || 'CrackMapExec execution failed');
      }
    } catch (error) {
      updateToolStatus('crackmapexec', { 
        status: 'failed', 
        output: error instanceof Error ? error.message : 'Unknown error'
      });

      toast({
        title: "CrackMapExec Failed",
        description: error instanceof Error ? error.message : 'Unknown error occurred',
        variant: "destructive"
      });
    }
  }, [sessionId, cmeConfig, targetConfig, adConfig, updateToolStatus, toast]);

  // Execute all AD tools in sequence
  const executeFullADAssessment = useCallback(async () => {
    if (!adConfig.domain || (!adConfig.password && !adConfig.ntlmHash)) {
      toast({
        title: "Configuration Required",
        description: "Please configure domain and credentials first",
        variant: "destructive"
      });
      return;
    }

    // Execute tools in sequence
    await executeBloodHound();
    await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds
    await executeCrackMapExec();

    toast({
      title: "AD Assessment Complete",
      description: "Full Active Directory assessment completed successfully"
    });
  }, [adConfig, executeBloodHound, executeCrackMapExec, toast]);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-2xl font-bold flex items-center gap-2">
            <Users className="h-6 w-6" />
            Active Directory Penetration Testing
          </h3>
          <p className="text-muted-foreground">
            Comprehensive AD security assessment using modern tools and techniques
          </p>
        </div>
        <Button 
          onClick={executeFullADAssessment}
          disabled={!sessionId || toolExecutions.some(t => t.status === 'running')}
          size="lg"
        >
          {toolExecutions.some(t => t.status === 'running') ? (
            <>
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              Running Assessment
            </>
          ) : (
            <>
              <PlayCircle className="w-4 h-4 mr-2" />
              Start AD Assessment
            </>
          )}
        </Button>
      </div>

      <Tabs defaultValue="config" className="w-full">
        <TabsList className="grid grid-cols-5 w-full">
          <TabsTrigger value="config">Configuration</TabsTrigger>
          <TabsTrigger value="bloodhound">BloodHound</TabsTrigger>
          <TabsTrigger value="crackmapexec">CrackMapExec</TabsTrigger>
          <TabsTrigger value="attacks">Attack Techniques</TabsTrigger>
          <TabsTrigger value="results">Results</TabsTrigger>
        </TabsList>

        {/* Configuration Tab */}
        <TabsContent value="config" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* AD Target Configuration */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Target className="h-5 w-5" />
                  AD Target Configuration
                </CardTitle>
                <CardDescription>
                  Configure Active Directory target and authentication
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="domain">Domain</Label>
                  <Input
                    id="domain"
                    value={adConfig.domain}
                    onChange={(e) => setAdConfig({...adConfig, domain: e.target.value})}
                    placeholder="company.local"
                  />
                </div>

                <div>
                  <Label htmlFor="domain-controller">Domain Controller</Label>
                  <Input
                    id="domain-controller"
                    value={adConfig.domainController}
                    onChange={(e) => setAdConfig({...adConfig, domainController: e.target.value})}
                    placeholder="dc01.company.local"
                  />
                </div>

                <div>
                  <Label htmlFor="username">Username</Label>
                  <Input
                    id="username"
                    value={adConfig.username}
                    onChange={(e) => setAdConfig({...adConfig, username: e.target.value})}
                    placeholder="testuser"
                  />
                </div>

                <div>
                  <Label htmlFor="password">Password</Label>
                  <Input
                    id="password"
                    type="password"
                    value={adConfig.password}
                    onChange={(e) => setAdConfig({...adConfig, password: e.target.value})}
                    placeholder="Password123!"
                  />
                </div>

                <div>
                  <Label htmlFor="ntlm-hash">NTLM Hash (Alternative to password)</Label>
                  <Input
                    id="ntlm-hash"
                    value={adConfig.ntlmHash}
                    onChange={(e) => setAdConfig({...adConfig, ntlmHash: e.target.value})}
                    placeholder="aad3b435b51404eeaad3b435b51404ee:5fbc3d5fec8206a30f4b6c473d68ae76"
                  />
                </div>

                <div className="flex items-center space-x-2">
                  <Switch
                    checked={adConfig.stealthMode}
                    onCheckedChange={(checked) => setAdConfig({...adConfig, stealthMode: checked})}
                  />
                  <Label>Stealth Mode</Label>
                </div>
              </CardContent>
            </Card>

            {/* Tool Status */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Activity className="h-5 w-5" />
                  Tool Status
                </CardTitle>
                <CardDescription>
                  Current status of AD penetration testing tools
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {toolExecutions.map((tool) => (
                  <div key={tool.id} className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="font-medium">{tool.tool}</span>
                      <Badge 
                        variant={
                          tool.status === 'completed' ? 'default' :
                          tool.status === 'running' ? 'secondary' :
                          tool.status === 'failed' ? 'destructive' : 'outline'
                        }
                      >
                        {tool.status === 'running' && <Loader2 className="w-3 h-3 mr-1 animate-spin" />}
                        {tool.status === 'completed' && <CheckCircle className="w-3 h-3 mr-1" />}
                        {tool.status === 'failed' && <AlertTriangle className="w-3 h-3 mr-1" />}
                        {tool.status}
                      </Badge>
                    </div>
                    {tool.status === 'running' && (
                      <Progress value={tool.progress} className="h-2" />
                    )}
                    {tool.findings > 0 && (
                      <div className="text-sm text-muted-foreground">
                        Found {tool.findings} security issues
                      </div>
                    )}
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* Real-time Terminal Output */}
          <RealtimeTerminal
            sessionId={sessionId}
            isExecuting={toolExecutions.some(t => t.status === 'running')}
            currentTool={toolExecutions.find(t => t.status === 'running')?.tool}
          />
        </TabsContent>

        {/* BloodHound Tab */}
        <TabsContent value="bloodhound" className="space-y-6">
          <ToolConfigurationForm
            tool={toolConfigurations.bloodhound}
            onConfigurationChange={(config) => {
              console.log('BloodHound config changed:', config);
            }}
            onExecute={executeBloodHound}
            isExecuting={toolExecutions.find(t => t.id === 'bloodhound')?.status === 'running'}
          />
          
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Network className="h-5 w-5" />
                BloodHound Analysis
              </CardTitle>
              <CardDescription>
                Attack path analysis and AD enumeration
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex gap-4">
                  <Button 
                    onClick={executeBloodHound}
                    disabled={!sessionId || toolExecutions.find(t => t.id === 'bloodhound')?.status === 'running'}
                  >
                    <Search className="w-4 h-4 mr-2" />
                    Run BloodHound
                  </Button>
                  
                  <Select defaultValue="sharphound">
                    <SelectTrigger className="w-48">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="sharphound">SharpHound</SelectItem>
                      <SelectItem value="bloodhound-python">BloodHound.py</SelectItem>
                      <SelectItem value="azurehound">AzureHound</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {bloodhoundData && (
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
                    <Card className="p-4">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-red-500">
                          {bloodhoundData.domainAdmins?.length || 0}
                        </div>
                        <div className="text-sm text-muted-foreground">Domain Admins</div>
                      </div>
                    </Card>
                    <Card className="p-4">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-orange-500">
                          {bloodhoundData.attackPaths?.length || 0}
                        </div>
                        <div className="text-sm text-muted-foreground">Attack Paths</div>
                      </div>
                    </Card>
                    <Card className="p-4">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-yellow-500">
                          {bloodhoundData.kerberoastableUsers?.length || 0}
                        </div>
                        <div className="text-sm text-muted-foreground">Kerberoastable</div>
                      </div>
                    </Card>
                    <Card className="p-4">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-blue-500">
                          {bloodhoundData.highValueTargets?.length || 0}
                        </div>
                        <div className="text-sm text-muted-foreground">High Value</div>
                      </div>
                    </Card>
                  </div>
                )}

                {toolExecutions.find(t => t.id === 'bloodhound')?.output && (
                  <Card className="mt-4">
                    <CardHeader>
                      <CardTitle className="text-sm">Output</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ScrollArea className="h-32">
                        <pre className="text-xs">
                          {toolExecutions.find(t => t.id === 'bloodhound')?.output}
                        </pre>
                      </ScrollArea>
                    </CardContent>
                  </Card>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* CrackMapExec Tab */}
        <TabsContent value="crackmapexec" className="space-y-6">
          <ToolConfigurationForm
            tool={toolConfigurations.crackmapexec}
            onConfigurationChange={(config) => {
              console.log('CrackMapExec config changed:', config);
            }}
            onExecute={executeCrackMapExec}
            isExecuting={toolExecutions.find(t => t.id === 'crackmapexec')?.status === 'running'}
          />
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Terminal className="h-5 w-5" />
                CrackMapExec / NetExec
              </CardTitle>
              <CardDescription>
                Lateral movement and credential validation
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex gap-4">
                  <Button 
                    onClick={executeCrackMapExec}
                    disabled={!sessionId || toolExecutions.find(t => t.id === 'crackmapexec')?.status === 'running'}
                  >
                    <PlayCircle className="w-4 h-4 mr-2" />
                    Run CrackMapExec
                  </Button>
                  
                  <Select defaultValue="smb">
                    <SelectTrigger className="w-32">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="smb">SMB</SelectItem>
                      <SelectItem value="ldap">LDAP</SelectItem>
                      <SelectItem value="winrm">WinRM</SelectItem>
                      <SelectItem value="mssql">MSSQL</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {toolExecutions.find(t => t.id === 'crackmapexec')?.output && (
                  <Card className="mt-4">
                    <CardHeader>
                      <CardTitle className="text-sm">Output</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ScrollArea className="h-32">
                        <pre className="text-xs">
                          {toolExecutions.find(t => t.id === 'crackmapexec')?.output}
                        </pre>
                      </ScrollArea>
                    </CardContent>
                  </Card>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Attack Techniques Tab */}
        <TabsContent value="attacks" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {[
              { name: 'Kerberoasting', description: 'Extract service tickets for offline cracking', icon: Key },
              { name: 'ASREPRoasting', description: 'Attack users without Kerberos pre-auth', icon: Unlock },
              { name: 'DCSync', description: 'Replicate directory data from DC', icon: Database },
              { name: 'Golden Ticket', description: 'Forge Kerberos TGT with krbtgt hash', icon: Shield },
              { name: 'Silver Ticket', description: 'Forge service tickets', icon: Lock },
              { name: 'Unconstrained Delegation', description: 'Abuse delegation for privilege escalation', icon: Server }
            ].map((attack) => (
              <Card key={attack.name} className="cursor-pointer hover:shadow-md transition-shadow">
                <CardContent className="pt-6">
                  <div className="flex items-center gap-3 mb-2">
                    <attack.icon className="h-5 w-5 text-primary" />
                    <h4 className="font-semibold">{attack.name}</h4>
                  </div>
                  <p className="text-sm text-muted-foreground">{attack.description}</p>
                  <Button size="sm" className="mt-3 w-full" variant="outline">
                    Execute
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Results Tab */}
        <TabsContent value="results" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Eye className="h-5 w-5" />
                Assessment Results
              </CardTitle>
              <CardDescription>
                Summary of Active Directory security findings
              </CardDescription>
            </CardHeader>
            <CardContent>
              {toolExecutions.some(t => t.status === 'completed') ? (
                <div className="space-y-4">
                  <Alert>
                    <CheckCircle className="h-4 w-4" />
                    <AlertDescription>
                      AD assessment completed. Review findings and recommendations below.
                    </AlertDescription>
                  </Alert>
                  
                  {/* Results summary would go here */}
                  <div className="text-center py-8 text-muted-foreground">
                    <Eye className="h-12 w-12 mx-auto mb-4 opacity-50" />
                    <p>Detailed results and analysis</p>
                    <p className="text-sm">Available after tool execution completes</p>
                  </div>
                </div>
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <Clock className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>No results available yet</p>
                  <p className="text-sm">Run the AD assessment to see security findings</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};