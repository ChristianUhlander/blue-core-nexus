/**
 * Network Penetration Testing Module
 * Comprehensive network security assessment using modern tools
 */

import React, { useState, useCallback } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  Network, 
  Wifi, 
  Shield, 
  Target,
  PlayCircle,
  StopCircle,
  Activity,
  CheckCircle,
  AlertTriangle,
  Loader2,
  Search,
  Zap,
  Globe,
  Server,
  Eye,
  Bug
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { modernPentestApi } from "@/services/modernPentestApi";
import { ToolConfigurationForm } from "@/components/ToolConfigurationForm";
import { RealtimeTerminal } from "@/components/RealtimeTerminal";
import { PentestTarget } from "@/types/modernPentest";
import { toolConfigurations } from "@/data/toolConfigurations";

interface NetworkPentestingModuleProps {
  sessionId?: string;
  targetConfig: PentestTarget;
}

interface NetworkToolExecution {
  id: string;
  tool: string;
  status: 'idle' | 'running' | 'completed' | 'failed';
  progress: number;
  output: string;
  findings: number;
  startTime?: string;
  duration?: number;
}

export const NetworkPentestingModule: React.FC<NetworkPentestingModuleProps> = ({ 
  sessionId, 
  targetConfig 
}) => {
  const { toast } = useToast();

  // Tool execution state
  const [toolExecutions, setToolExecutions] = useState<NetworkToolExecution[]>([
    { id: 'nmap', tool: 'Nmap', status: 'idle', progress: 0, output: '', findings: 0 },
    { id: 'masscan', tool: 'Masscan', status: 'idle', progress: 0, output: '', findings: 0 },
    { id: 'naabu', tool: 'Naabu', status: 'idle', progress: 0, output: '', findings: 0 },
    { id: 'nuclei', tool: 'Nuclei', status: 'idle', progress: 0, output: '', findings: 0 }
  ]);

  // Network configuration
  const [networkConfig, setNetworkConfig] = useState({
    target: targetConfig.primary || '',
    portRange: '1-65535',
    scanType: 'syn' as 'syn' | 'tcp' | 'udp' | 'comprehensive',
    timing: 4,
    stealthMode: true,
    osDetection: false,
    serviceDetection: true,
    scriptScanning: false,
    aggressiveMode: false
  });

  // Update tool execution status
  const updateToolStatus = useCallback((toolId: string, updates: Partial<NetworkToolExecution>) => {
    setToolExecutions(prev => 
      prev.map(tool => 
        tool.id === toolId ? { ...tool, ...updates } : tool
      )
    );
  }, []);

  // Execute Nmap scan
  const executeNmap = useCallback(async () => {
    if (!sessionId) {
      toast({
        title: "No Active Session",
        description: "Please start a penetration test session first",
        variant: "destructive"
      });
      return;
    }

    try {
      updateToolStatus('nmap', { 
        status: 'running', 
        progress: 0,
        startTime: new Date().toISOString()
      });

      const config = {
        sessionId,
        target: networkConfig.target,
        scanType: networkConfig.scanType,
        ports: networkConfig.portRange,
        timing: networkConfig.timing,
        serviceDetection: networkConfig.serviceDetection,
        osDetection: networkConfig.osDetection,
        stealthMode: networkConfig.stealthMode,
        scriptScanning: networkConfig.scriptScanning,
        aggressiveMode: networkConfig.aggressiveMode
      };

      // Mock Nmap execution for now - replace with actual API when available
      // const response = await modernPentestApi.executeNmap({
      //   sessionId,
      //   targets: [networkConfig.target]
      // });
      
      // Simulate successful execution
      const response = { success: true, error: null };

      if (response.success) {
        updateToolStatus('nmap', { 
          status: 'completed', 
          progress: 100,
          output: 'Nmap scan completed successfully',
          findings: 5 // Mock findings count
        });

        toast({
          title: "Nmap Scan Complete",
          description: "Network discovery and port scanning completed"
        });
      } else {
        throw new Error(response.error || 'Nmap execution failed');
      }
    } catch (error) {
      updateToolStatus('nmap', { 
        status: 'failed', 
        output: error instanceof Error ? error.message : 'Unknown error'
      });

      toast({
        title: "Nmap Scan Failed",
        description: error instanceof Error ? error.message : 'Unknown error occurred',
        variant: "destructive"
      });
    }
  }, [sessionId, networkConfig, updateToolStatus, toast]);

  // Execute Nuclei vulnerability scan
  const executeNuclei = useCallback(async () => {
    if (!sessionId) {
      toast({
        title: "No Active Session",
        description: "Please start a penetration test session first",
        variant: "destructive"
      });
      return;
    }

    try {
      updateToolStatus('nuclei', { 
        status: 'running', 
        progress: 0,
        startTime: new Date().toISOString()
      });

      const config = {
        sessionId,
        target: networkConfig.target,
        templates: 'all',
        severity: ['critical', 'high', 'medium'],
        concurrency: 25,
        rateLimit: 150,
        timeout: 5
      };

      // Mock Nuclei execution for now - replace with actual API when available
      // const response = await modernPentestApi.executeNuclei({
      //   sessionId,
      //   targets: [networkConfig.target],
      //   templates: config.templates.split(','),
      //   severity: config.severity
      // });
      
      // Simulate successful execution
      const response = { success: true, error: null };

      if (response.success) {
        updateToolStatus('nuclei', { 
          status: 'completed', 
          progress: 100,
          output: 'Nuclei vulnerability scan completed successfully',
          findings: 8 // Mock findings count
        });

        toast({
          title: "Nuclei Scan Complete",
          description: "Vulnerability assessment completed"
        });
      } else {
        throw new Error(response.error || 'Nuclei execution failed');
      }
    } catch (error) {
      updateToolStatus('nuclei', { 
        status: 'failed', 
        output: error instanceof Error ? error.message : 'Unknown error'
      });

      toast({
        title: "Nuclei Scan Failed",
        description: error instanceof Error ? error.message : 'Unknown error occurred',
        variant: "destructive"
      });
    }
  }, [sessionId, networkConfig, updateToolStatus, toast]);

  // Execute full network assessment
  const executeFullNetworkAssessment = useCallback(async () => {
    if (!networkConfig.target) {
      toast({
        title: "Configuration Required",
        description: "Please configure a target before starting the assessment",
        variant: "destructive"
      });
      return;
    }

    // Execute tools in sequence
    await executeNmap();
    await new Promise(resolve => setTimeout(resolve, 2000));
    await executeNuclei();

    toast({
      title: "Network Assessment Complete",
      description: "Full network security assessment completed successfully"
    });
  }, [networkConfig, executeNmap, executeNuclei, toast]);

  // Get step status icon
  const getStepIcon = (status: NetworkToolExecution['status']) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-success" />;
      case 'running':
        return <Loader2 className="h-4 w-4 text-primary animate-spin" />;
      case 'failed':
        return <AlertTriangle className="h-4 w-4 text-destructive" />;
      default:
        return <Eye className="h-4 w-4 text-muted-foreground" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-2xl font-bold flex items-center gap-2">
            <Network className="h-6 w-6" />
            Network Penetration Testing
          </h3>
          <p className="text-muted-foreground">
            Comprehensive network security assessment using industry-standard tools
          </p>
        </div>
        <Button 
          onClick={executeFullNetworkAssessment}
          disabled={!sessionId || toolExecutions.some(t => t.status === 'running')}
          size="lg"
        >
          {toolExecutions.some(t => t.status === 'running') ? (
            <>
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              Running Assessment
            </>
          ) : (
            <>
              <PlayCircle className="w-4 h-4 mr-2" />
              Start Network Assessment
            </>
          )}
        </Button>
      </div>

      <Tabs defaultValue="nmap" className="w-full">
        <TabsList className="grid grid-cols-4 w-full">
          <TabsTrigger value="nmap">Nmap</TabsTrigger>
          <TabsTrigger value="nuclei">Nuclei</TabsTrigger>
          <TabsTrigger value="advanced">Advanced</TabsTrigger>
          <TabsTrigger value="results">Results</TabsTrigger>
        </TabsList>

        {/* Nmap Configuration */}
        <TabsContent value="nmap" className="space-y-6">
          <ToolConfigurationForm
            tool={toolConfigurations.nmap}
            onConfigurationChange={(config) => {
              console.log('Nmap config changed:', config);
              // Update networkConfig based on the tool configuration
            }}
            onExecute={executeNmap}
            isExecuting={toolExecutions.find(t => t.id === 'nmap')?.status === 'running'}
          />

          {/* Real-time Terminal */}
          <RealtimeTerminal
            sessionId={sessionId}
            isExecuting={toolExecutions.find(t => t.id === 'nmap')?.status === 'running'}
            currentTool="nmap"
          />
        </TabsContent>

        {/* Nuclei Configuration */}
        <TabsContent value="nuclei" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Bug className="h-5 w-5" />
                Nuclei Vulnerability Scanner
              </CardTitle>
              <CardDescription>
                Fast and customizable vulnerability scanner powered by the global security community
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex gap-4">
                <Button 
                  onClick={executeNuclei}
                  disabled={!sessionId || toolExecutions.find(t => t.id === 'nuclei')?.status === 'running'}
                >
                  <Search className="w-4 h-4 mr-2" />
                  Run Nuclei Scan
                </Button>
              </div>

              <Alert>
                <Zap className="h-4 w-4" />
                <AlertDescription>
                  <strong>Automation Available:</strong> Nuclei can automatically select templates based on discovered services and technologies.
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>

          {/* Real-time Terminal */}
          <RealtimeTerminal
            sessionId={sessionId}
            isExecuting={toolExecutions.find(t => t.id === 'nuclei')?.status === 'running'}
            currentTool="nuclei"
          />
        </TabsContent>

        {/* Advanced Tools */}
        <TabsContent value="advanced" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Wifi className="h-5 w-5" />
                  Masscan
                </CardTitle>
                <CardDescription>
                  High-speed port scanner for large networks
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="font-medium">Status</span>
                    <Badge 
                      variant={
                        toolExecutions.find(t => t.id === 'masscan')?.status === 'completed' ? 'default' :
                        toolExecutions.find(t => t.id === 'masscan')?.status === 'running' ? 'secondary' :
                        toolExecutions.find(t => t.id === 'masscan')?.status === 'failed' ? 'destructive' : 'outline'
                      }
                    >
                      {getStepIcon(toolExecutions.find(t => t.id === 'masscan')?.status || 'idle')}
                      {toolExecutions.find(t => t.id === 'masscan')?.status || 'idle'}
                    </Badge>
                  </div>
                  
                  <Button 
                    size="sm" 
                    variant="outline"
                    className="w-full"
                    disabled={!sessionId}
                  >
                    Configure Masscan
                  </Button>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Server className="h-5 w-5" />
                  Naabu
                </CardTitle>
                <CardDescription>
                  Fast port scanner written in Go with focus on reliability
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="font-medium">Status</span>
                    <Badge 
                      variant={
                        toolExecutions.find(t => t.id === 'naabu')?.status === 'completed' ? 'default' :
                        toolExecutions.find(t => t.id === 'naabu')?.status === 'running' ? 'secondary' :
                        toolExecutions.find(t => t.id === 'naabu')?.status === 'failed' ? 'destructive' : 'outline'
                      }
                    >
                      {getStepIcon(toolExecutions.find(t => t.id === 'naabu')?.status || 'idle')}
                      {toolExecutions.find(t => t.id === 'naabu')?.status || 'idle'}
                    </Badge>
                  </div>
                  
                  <Button 
                    size="sm" 
                    variant="outline"
                    className="w-full"
                    disabled={!sessionId}
                  >
                    Configure Naabu
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Results */}
        <TabsContent value="results" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Activity className="h-5 w-5" />
                Network Assessment Results
              </CardTitle>
              <CardDescription>
                Summary of network security assessment findings
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {toolExecutions.map((tool) => (
                <div key={tool.id} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="font-medium">{tool.tool}</span>
                    <Badge 
                      variant={
                        tool.status === 'completed' ? 'default' :
                        tool.status === 'running' ? 'secondary' :
                        tool.status === 'failed' ? 'destructive' : 'outline'
                      }
                    >
                      {getStepIcon(tool.status)}
                      {tool.status}
                    </Badge>
                  </div>
                  {tool.status === 'running' && (
                    <Progress value={tool.progress} className="h-2" />
                  )}
                  {tool.findings > 0 && (
                    <div className="text-sm text-muted-foreground">
                      Found {tool.findings} network issues
                    </div>
                  )}
                </div>
              ))}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};