/**
 * OSINT (Open Source Intelligence) Penetration Testing Module
 * SpiderFoot and automated reconnaissance workflows
 */

import React, { useState, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';
import { ToolConfigurationForm } from './ToolConfigurationForm';
import { toolConfigurations } from '@/data/toolConfigurations';
import { 
  Search, 
  Shield, 
  Globe, 
  Eye, 
  Database, 
  Network, 
  Users, 
  Settings,
  Play,
  Square,
  FileText,
  AlertTriangle
} from 'lucide-react';

interface OSINTPentestingModuleProps {
  sessionId: string;
  targetConfig: {
    type: 'domain' | 'ip' | 'email' | 'organization';
    primary: string;
    scope: {
      inScope: string[];
      outOfScope: string[];
      domains: string[];
      ipRanges: string[];
      ports: string[];
    };
    environment: 'production' | 'staging' | 'development';
    businessCriticality: 'critical' | 'high' | 'medium' | 'low';
    compliance: string[];
  };
}

export const OSINTPentestingModule: React.FC<OSINTPentestingModuleProps> = ({
  sessionId,
  targetConfig
}) => {
  const { toast } = useToast();

  // Tool execution state
  const [executingTool, setExecutingTool] = useState<string | null>(null);
  const [executionProgress, setExecutionProgress] = useState<number>(0);
  const [executionLogs, setExecutionLogs] = useState<string[]>([]);

  // OSINT module categories and state
  const [selectedModules, setSelectedModules] = useState<string[]>([
    'sfp_dnsresolve',
    'sfp_whois',
    'sfp_shodan'
  ]);

  // Top SpiderFoot modules organized by category
  const spiderfootModules = {
    'network': [
      {
        id: 'sfp_dnsresolve',
        name: 'DNS Resolution',
        description: 'Resolve DNS records for domains and subdomains',
        risk: 'LOW',
        popular: true
      },
      {
        id: 'sfp_whois',
        name: 'WHOIS Lookup',
        description: 'WHOIS registration data for domains and IP addresses',
        risk: 'LOW',
        popular: true
      },
      {
        id: 'sfp_shodan',
        name: 'Shodan Search',
        description: 'Search Shodan for exposed services and vulnerabilities',
        risk: 'MEDIUM',
        popular: true
      },
      {
        id: 'sfp_censys',
        name: 'Censys Search',
        description: 'Certificate and host discovery via Censys',
        risk: 'MEDIUM',
        popular: false
      }
    ],
    'threat_intel': [
      {
        id: 'sfp_virustotal',
        name: 'VirusTotal',
        description: 'Check domains/IPs against VirusTotal database',
        risk: 'MEDIUM',
        popular: true
      },
      {
        id: 'sfp_threatcrowd',
        name: 'ThreatCrowd',
        description: 'Open source threat intelligence data',
        risk: 'MEDIUM',
        popular: true
      },
      {
        id: 'sfp_malwaredomains',
        name: 'Malware Domains',
        description: 'Check against known malware domain lists',
        risk: 'HIGH',
        popular: false
      }
    ],
    'search_engines': [
      {
        id: 'sfp_google',
        name: 'Google Search',
        description: 'Google dorking and search results analysis',
        risk: 'LOW',
        popular: true
      },
      {
        id: 'sfp_bing',
        name: 'Bing Search',
        description: 'Bing search engine reconnaissance',
        risk: 'LOW',
        popular: false
      },
      {
        id: 'sfp_pgp',
        name: 'PGP Key Servers',
        description: 'Search PGP key servers for email addresses',
        risk: 'LOW',
        popular: false
      }
    ],
    'people': [
      {
        id: 'sfp_haveibeenpwned',
        name: 'HaveIBeenPwned',
        description: 'Check emails against breach databases',
        risk: 'MEDIUM',
        popular: true
      },
      {
        id: 'sfp_hunter_io',
        name: 'Hunter.io',
        description: 'Find email addresses associated with domains',
        risk: 'MEDIUM',
        popular: true
      },
      {
        id: 'sfp_linkedin',
        name: 'LinkedIn',
        description: 'LinkedIn profile and company information',
        risk: 'LOW',
        popular: false
      }
    ]
  };

  // Tool configuration change handlers
  const handleSpiderfootConfigChange = useCallback((config: any) => {
    console.log('SpiderFoot configuration updated:', config);
    // Update configuration state here
  }, []);

  // Execute tool with configuration
  const handleExecuteSpiderfoot = useCallback(async (config: any) => {
    console.log('Executing SpiderFoot with config:', config);
    setExecutingTool('spiderfoot');
    setExecutionProgress(0);
    setExecutionLogs(['Starting SpiderFoot OSINT scan...']);

    // Simulate progressive execution
    const progressInterval = setInterval(() => {
      setExecutionProgress(prev => {
        if (prev >= 100) {
          clearInterval(progressInterval);
          setExecutingTool(null);
          toast({
            title: "SpiderFoot Scan Complete",
            description: `OSINT reconnaissance completed for ${targetConfig.primary}`,
          });
          return 100;
        }
        
        // Add realistic log messages
        const logMessages = [
          `Resolving DNS for ${targetConfig.primary}...`,
          `Querying WHOIS databases...`,
          `Searching Shodan for exposed services...`,
          `Checking threat intelligence feeds...`,
          `Correlating findings...`,
          `Generating intelligence report...`
        ];
        
        const currentStep = Math.floor((prev / 100) * logMessages.length);
        if (currentStep < logMessages.length) {
          setExecutionLogs(prev => [...prev, logMessages[currentStep]]);
        }
        
        return prev + Math.random() * 5;
      });
    }, 1000);

    // Cleanup function would go here
    return () => clearInterval(progressInterval);
  }, [targetConfig.primary, toast]);

  // Toggle module selection
  const toggleModule = (moduleId: string) => {
    setSelectedModules(prev => 
      prev.includes(moduleId) 
        ? prev.filter(id => id !== moduleId)
        : [...prev, moduleId]
    );
  };

  // Get risk badge color
  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'HIGH': return 'destructive';
      case 'MEDIUM': return 'default';
      case 'LOW': return 'secondary';
      default: return 'outline';
    }
  };

  // Simple execute wrapper for tool configuration form
  const executeSpiderfoot = useCallback(() => {
    handleExecuteSpiderfoot({});
  }, [handleExecuteSpiderfoot]);

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold flex items-center gap-2">
            <Search className="h-6 w-6 text-blue-500" />
            OSINT Reconnaissance
          </h2>
          <p className="text-muted-foreground">
            Open Source Intelligence gathering using SpiderFoot and automated workflows
          </p>
        </div>
        <div className="text-right">
          <Badge variant="outline" className="mb-2">
            Target: {targetConfig.primary}
          </Badge>
          <div className="text-sm text-muted-foreground">
            {selectedModules.length} modules selected
          </div>
        </div>
      </div>

      <Tabs defaultValue="tools" className="space-y-4">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="tools">Tool Configuration</TabsTrigger>
          <TabsTrigger value="modules">Module Selection</TabsTrigger>
          <TabsTrigger value="execution">Execution & Results</TabsTrigger>
        </TabsList>

        {/* Tool Configuration Tab */}
        <TabsContent value="tools" className="space-y-4">
          <Card className="gradient-card border border-blue-500/20">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="h-5 w-5 text-blue-500" />
                SpiderFoot Configuration
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ToolConfigurationForm
                tool={toolConfigurations.spiderfoot}
                onConfigurationChange={handleSpiderfootConfigChange}
                onExecute={executeSpiderfoot}
                isExecuting={executingTool === 'spiderfoot'}
              />
            </CardContent>
          </Card>
        </TabsContent>

        {/* Module Selection Tab */}
        <TabsContent value="modules" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {Object.entries(spiderfootModules).map(([category, modules]) => (
              <Card key={category} className="gradient-card border border-blue-500/20">
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg capitalize">
                    {category.replace('_', ' & ')} Modules
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {modules.map((module) => (
                    <div
                      key={module.id}
                      className={`p-3 rounded-lg border cursor-pointer transition-all ${
                        selectedModules.includes(module.id)
                          ? 'border-blue-500 bg-blue-500/10'
                          : 'border-border hover:border-blue-500/30'
                      }`}
                      onClick={() => toggleModule(module.id)}
                    >
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <h4 className="font-medium">{module.name}</h4>
                          {module.popular && (
                            <Badge variant="secondary" className="text-xs">
                              Popular
                            </Badge>
                          )}
                        </div>
                        <Badge variant={getRiskColor(module.risk)} className="text-xs">
                          {module.risk}
                        </Badge>
                      </div>
                      <p className="text-sm text-muted-foreground">
                        {module.description}
                      </p>
                    </div>
                  ))}
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Selection Summary */}
          <Card className="gradient-card border border-green-500/20">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Eye className="h-5 w-5 text-green-500" />
                Selected Modules Summary
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-3 gap-4 text-center">
                <div>
                  <div className="text-2xl font-bold text-green-500">
                    {selectedModules.length}
                  </div>
                  <div className="text-sm text-muted-foreground">Total Selected</div>
                </div>
                <div>
                  <div className="text-2xl font-bold text-yellow-500">
                    {selectedModules.filter(id => {
                      const allModules = Object.values(spiderfootModules).flat();
                      const module = allModules.find(m => m.id === id);
                      return module?.risk === 'MEDIUM';
                    }).length}
                  </div>
                  <div className="text-sm text-muted-foreground">Medium Risk</div>
                </div>
                <div>
                  <div className="text-2xl font-bold text-red-500">
                    {selectedModules.filter(id => {
                      const allModules = Object.values(spiderfootModules).flat();
                      const module = allModules.find(m => m.id === id);
                      return module?.risk === 'HIGH';
                    }).length}
                  </div>
                  <div className="text-sm text-muted-foreground">High Risk</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Execution & Results Tab */}
        <TabsContent value="execution" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Execution Controls */}
            <Card className="gradient-card border border-purple-500/20">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Play className="h-5 w-5 text-purple-500" />
                  Execution Control
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {executingTool && (
                  <div className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span>Progress</span>
                      <span>{Math.round(executionProgress)}%</span>
                    </div>
                    <Progress value={executionProgress} className="w-full" />
                  </div>
                )}
                
                <div className="flex gap-2">
                  <Button
                    onClick={() => {
                      handleExecuteSpiderfoot({});
                    }}
                    disabled={executingTool !== null}
                    className="flex-1"
                  >
                    <Play className="h-4 w-4 mr-2" />
                    Start OSINT Scan
                  </Button>
                  {executingTool && (
                    <Button
                      onClick={() => setExecutingTool(null)}
                      variant="destructive"
                    >
                      <Square className="h-4 w-4 mr-2" />
                      Stop
                    </Button>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Live Logs */}
            <Card className="gradient-card border border-green-500/20">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5 text-green-500" />
                  Execution Logs
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ScrollArea className="h-48 w-full rounded-md border p-4">
                  <div className="space-y-1">
                    {executionLogs.length === 0 ? (
                      <p className="text-muted-foreground text-sm">
                        No execution logs yet. Start a scan to see live output.
                      </p>
                    ) : (
                      executionLogs.map((log, index) => (
                        <div key={index} className="text-sm font-mono">
                          <span className="text-muted-foreground">
                            [{new Date().toLocaleTimeString()}]
                          </span>{' '}
                          {log}
                        </div>
                      ))
                    )}
                  </div>
                </ScrollArea>
              </CardContent>
            </Card>
          </div>

          {/* Results Preview */}
          <Card className="gradient-card border border-orange-500/20">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Database className="h-5 w-5 text-orange-500" />
                Intelligence Results Preview
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8 text-muted-foreground">
                <Database className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p>OSINT results will appear here after scan completion</p>
                <p className="text-sm mt-2">
                  Results include domains, IPs, emails, social profiles, and threat intelligence
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};