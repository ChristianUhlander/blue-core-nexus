/**
 * Web Application Penetration Testing Module
 * Comprehensive web application security assessment
 */

import React, { useState, useCallback } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { 
  Globe, 
  Shield, 
  Database,
  Code,
  PlayCircle,
  StopCircle,
  Activity,
  CheckCircle,
  AlertTriangle,
  Loader2,
  Search,
  Zap,
  Bug,
  Lock,
  Eye,
  Terminal
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { modernPentestApi } from "@/services/modernPentestApi";
import { ToolConfigurationForm } from "@/components/ToolConfigurationForm";
import { RealtimeTerminal } from "@/components/RealtimeTerminal";
import { PentestTarget } from "@/types/modernPentest";
import { toolConfigurations } from "@/data/toolConfigurations";

interface WebAppPentestingModuleProps {
  sessionId?: string;
  targetConfig: PentestTarget;
}

interface WebToolExecution {
  id: string;
  tool: string;
  status: 'idle' | 'running' | 'completed' | 'failed';
  progress: number;
  output: string;
  findings: number;
  startTime?: string;
  duration?: number;
}

export const WebAppPentestingModule: React.FC<WebAppPentestingModuleProps> = ({ 
  sessionId, 
  targetConfig 
}) => {
  const { toast } = useToast();

  // Tool execution state
  const [toolExecutions, setToolExecutions] = useState<WebToolExecution[]>([
    { id: 'nikto', tool: 'Nikto', status: 'idle', progress: 0, output: '', findings: 0 },
    { id: 'sqlmap', tool: 'SQLMap', status: 'idle', progress: 0, output: '', findings: 0 },
    { id: 'dirb', tool: 'Dirb', status: 'idle', progress: 0, output: '', findings: 0 },
    { id: 'gobuster', tool: 'Gobuster', status: 'idle', progress: 0, output: '', findings: 0 }
  ]);

  // Web application configuration
  const [webConfig, setWebConfig] = useState({
    targetUrl: targetConfig.primary || '',
    authentication: {
      enabled: false,
      username: '',
      password: '',
      loginUrl: '',
      sessionCookies: ''
    },
    scope: {
      includePaths: [] as string[],
      excludePaths: [] as string[],
      allowedDomains: [] as string[]
    },
    testing: {
      sqlInjection: true,
      xss: true,
      directoryTraversal: true,
      commandInjection: true,
      fileInclusion: true,
      authentication: false,
      sessionManagement: false
    },
    options: {
      aggressive: false,
      stealthMode: true,
      followRedirects: true,
      checkSSL: true,
      userAgent: 'Mozilla/5.0 (compatible; SecurityScanner/1.0)'
    }
  });

  // Update tool execution status
  const updateToolStatus = useCallback((toolId: string, updates: Partial<WebToolExecution>) => {
    setToolExecutions(prev => 
      prev.map(tool => 
        tool.id === toolId ? { ...tool, ...updates } : tool
      )
    );
  }, []);

  // Execute Nikto scan
  const executeNikto = useCallback(async () => {
    if (!sessionId) {
      toast({
        title: "No Active Session",
        description: "Please start a penetration test session first",
        variant: "destructive"
      });
      return;
    }

    try {
      updateToolStatus('nikto', { 
        status: 'running', 
        progress: 0,
        startTime: new Date().toISOString()
      });

      const config = {
        sessionId,
        target: webConfig.targetUrl,
        ssl: webConfig.options.checkSSL,
        followRedirects: webConfig.options.followRedirects,
        userAgent: webConfig.options.userAgent,
        tuning: webConfig.options.aggressive ? '1,2,3,4,5,6,7,8,9' : '1,2,3',
        format: 'json'
      };

      // Mock Nikto execution for now - replace with actual API when available
      // const response = await modernPentestApi.executeNikto(config);
      
      // Simulate successful execution
      const response = { success: true, error: null };

      if (response.success) {
        updateToolStatus('nikto', { 
          status: 'completed', 
          progress: 100,
          output: 'Nikto web vulnerability scan completed successfully',
          findings: 12 // Mock findings count
        });

        toast({
          title: "Nikto Scan Complete",
          description: "Web vulnerability assessment completed"
        });
      } else {
        throw new Error(response.error || 'Nikto execution failed');
      }
    } catch (error) {
      updateToolStatus('nikto', { 
        status: 'failed', 
        output: error instanceof Error ? error.message : 'Unknown error'
      });

      toast({
        title: "Nikto Scan Failed",
        description: error instanceof Error ? error.message : 'Unknown error occurred',
        variant: "destructive"
      });
    }
  }, [sessionId, webConfig, updateToolStatus, toast]);

  // Execute SQLMap scan
  const executeSQLMap = useCallback(async () => {
    if (!sessionId) {
      toast({
        title: "No Active Session",
        description: "Please start a penetration test session first",
        variant: "destructive"
      });
      return;
    }

    try {
      updateToolStatus('sqlmap', { 
        status: 'running', 
        progress: 0,
        startTime: new Date().toISOString()
      });

      const config = {
        sessionId,
        url: webConfig.targetUrl,
        level: webConfig.options.aggressive ? 5 : 1,
        risk: webConfig.options.aggressive ? 3 : 1,
        batch: true,
        randomAgent: true,
        technique: 'BEUSTQ',
        dbms: 'all',
        os: 'all'
      };

      const response = await modernPentestApi.executeSQLMap({
        sessionId,
        target: webConfig.targetUrl,
        level: config.level,
        risk: config.risk
      });

      if (response.success) {
        updateToolStatus('sqlmap', { 
          status: 'completed', 
          progress: 100,
          output: 'SQLMap injection testing completed successfully',
          findings: 3 // Mock findings count
        });

        toast({
          title: "SQLMap Scan Complete",
          description: "SQL injection testing completed"
        });
      } else {
        throw new Error(response.error || 'SQLMap execution failed');
      }
    } catch (error) {
      updateToolStatus('sqlmap', { 
        status: 'failed', 
        output: error instanceof Error ? error.message : 'Unknown error'
      });

      toast({
        title: "SQLMap Scan Failed",
        description: error instanceof Error ? error.message : 'Unknown error occurred',
        variant: "destructive"
      });
    }
  }, [sessionId, webConfig, updateToolStatus, toast]);

  // Execute full web application assessment
  const executeFullWebAssessment = useCallback(async () => {
    if (!webConfig.targetUrl) {
      toast({
        title: "Configuration Required",
        description: "Please configure a target URL before starting the assessment",
        variant: "destructive"
      });
      return;
    }

    // Execute tools in sequence
    await executeNikto();
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    if (webConfig.testing.sqlInjection) {
      await executeSQLMap();
    }

    toast({
      title: "Web Assessment Complete",
      description: "Full web application security assessment completed successfully"
    });
  }, [webConfig, executeNikto, executeSQLMap, toast]);

  // Get step status icon
  const getStepIcon = (status: WebToolExecution['status']) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-success" />;
      case 'running':
        return <Loader2 className="h-4 w-4 text-primary animate-spin" />;
      case 'failed':
        return <AlertTriangle className="h-4 w-4 text-destructive" />;
      default:
        return <Eye className="h-4 w-4 text-muted-foreground" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-2xl font-bold flex items-center gap-2">
            <Globe className="h-6 w-6" />
            Web Application Penetration Testing
          </h3>
          <p className="text-muted-foreground">
            Comprehensive web application security assessment using OWASP methodology
          </p>
        </div>
        <Button 
          onClick={executeFullWebAssessment}
          disabled={!sessionId || toolExecutions.some(t => t.status === 'running')}
          size="lg"
        >
          {toolExecutions.some(t => t.status === 'running') ? (
            <>
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              Running Assessment
            </>
          ) : (
            <>
              <PlayCircle className="w-4 h-4 mr-2" />
              Start Web Assessment
            </>
          )}
        </Button>
      </div>

      <Tabs defaultValue="config" className="w-full">
        <TabsList className="grid grid-cols-5 w-full">
          <TabsTrigger value="config">Configuration</TabsTrigger>
          <TabsTrigger value="nikto">Nikto</TabsTrigger>
          <TabsTrigger value="sqlmap">SQLMap</TabsTrigger>
          <TabsTrigger value="directory">Directory</TabsTrigger>
          <TabsTrigger value="results">Results</TabsTrigger>
        </TabsList>

        {/* Configuration Tab */}
        <TabsContent value="config" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Target Configuration */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Globe className="h-5 w-5" />
                  Target Configuration
                </CardTitle>
                <CardDescription>
                  Configure web application target and scope
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="target-url">Target URL</Label>
                  <Input
                    id="target-url"
                    value={webConfig.targetUrl}
                    onChange={(e) => setWebConfig({...webConfig, targetUrl: e.target.value})}
                    placeholder="https://example.com"
                  />
                </div>

                <div className="space-y-2">
                  <Label>Testing Options</Label>
                  <div className="grid grid-cols-2 gap-2">
                    <div className="flex items-center space-x-2">
                      <Switch
                        checked={webConfig.testing.sqlInjection}
                        onCheckedChange={(checked) => setWebConfig({
                          ...webConfig, 
                          testing: {...webConfig.testing, sqlInjection: checked}
                        })}
                      />
                      <Label>SQL Injection</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Switch
                        checked={webConfig.testing.xss}
                        onCheckedChange={(checked) => setWebConfig({
                          ...webConfig, 
                          testing: {...webConfig.testing, xss: checked}
                        })}
                      />
                      <Label>XSS Testing</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Switch
                        checked={webConfig.testing.directoryTraversal}
                        onCheckedChange={(checked) => setWebConfig({
                          ...webConfig, 
                          testing: {...webConfig.testing, directoryTraversal: checked}
                        })}
                      />
                      <Label>Directory Traversal</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Switch
                        checked={webConfig.testing.commandInjection}
                        onCheckedChange={(checked) => setWebConfig({
                          ...webConfig, 
                          testing: {...webConfig.testing, commandInjection: checked}
                        })}
                      />
                      <Label>Command Injection</Label>
                    </div>
                  </div>
                </div>

                <div className="flex items-center space-x-2">
                  <Switch
                    checked={webConfig.options.stealthMode}
                    onCheckedChange={(checked) => setWebConfig({
                      ...webConfig, 
                      options: {...webConfig.options, stealthMode: checked}
                    })}
                  />
                  <Label>Stealth Mode</Label>
                </div>
              </CardContent>
            </Card>

            {/* Tool Status */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Activity className="h-5 w-5" />
                  Tool Status
                </CardTitle>
                <CardDescription>
                  Current status of web application testing tools
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {toolExecutions.map((tool) => (
                  <div key={tool.id} className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="font-medium">{tool.tool}</span>
                      <Badge 
                        variant={
                          tool.status === 'completed' ? 'default' :
                          tool.status === 'running' ? 'secondary' :
                          tool.status === 'failed' ? 'destructive' : 'outline'
                        }
                      >
                        {getStepIcon(tool.status)}
                        {tool.status}
                      </Badge>
                    </div>
                    {tool.status === 'running' && (
                      <Progress value={tool.progress} className="h-2" />
                    )}
                    {tool.findings > 0 && (
                      <div className="text-sm text-muted-foreground">
                        Found {tool.findings} web vulnerabilities
                      </div>
                    )}
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* Real-time Terminal Output */}
          <RealtimeTerminal
            sessionId={sessionId}
            isExecuting={toolExecutions.some(t => t.status === 'running')}
            currentTool={toolExecutions.find(t => t.status === 'running')?.tool}
          />
        </TabsContent>

        {/* Nikto Configuration */}
        <TabsContent value="nikto" className="space-y-6">
          <ToolConfigurationForm
            tool={toolConfigurations.nikto}
            onConfigurationChange={(config) => {
              console.log('Nikto config changed:', config);
            }}
            onExecute={executeNikto}
            isExecuting={toolExecutions.find(t => t.id === 'nikto')?.status === 'running'}
          />
        </TabsContent>

        {/* SQLMap Configuration */}
        <TabsContent value="sqlmap" className="space-y-6">
          <ToolConfigurationForm
            tool={toolConfigurations.sqlmap}
            onConfigurationChange={(config) => {
              console.log('SQLMap config changed:', config);
            }}
            onExecute={executeSQLMap}
            isExecuting={toolExecutions.find(t => t.id === 'sqlmap')?.status === 'running'}
          />
        </TabsContent>

        {/* Directory Brute Force */}
        <TabsContent value="directory" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Search className="h-5 w-5" />
                Directory & File Discovery
              </CardTitle>
              <CardDescription>
                Discover hidden directories, files, and endpoints
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Dirb</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-muted-foreground mb-4">
                      Web content scanner using dictionary-based approach
                    </p>
                    <Button size="sm" variant="outline" className="w-full">
                      Configure Dirb
                    </Button>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Gobuster</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-muted-foreground mb-4">
                      Fast directory/file & DNS busting tool written in Go
                    </p>
                    <Button size="sm" variant="outline" className="w-full">
                      Configure Gobuster
                    </Button>
                  </CardContent>
                </Card>
              </div>

              <Alert>
                <Zap className="h-4 w-4" />
                <AlertDescription>
                  <strong>Automation Available:</strong> Directory discovery tools can automatically adjust wordlists based on detected technology stack.
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Results */}
        <TabsContent value="results" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-5 w-5" />
                Web Application Assessment Results
              </CardTitle>
              <CardDescription>
                Summary of web application security findings
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {toolExecutions.filter(t => t.status === 'completed').length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">
                  No completed assessments yet. Run tools to see results here.
                </div>
              ) : (
                toolExecutions.map((tool) => (
                  <div key={tool.id} className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="font-medium">{tool.tool}</span>
                      <Badge 
                        variant={
                          tool.status === 'completed' ? 'default' :
                          tool.status === 'running' ? 'secondary' :
                          tool.status === 'failed' ? 'destructive' : 'outline'
                        }
                      >
                        {getStepIcon(tool.status)}
                        {tool.status}
                      </Badge>
                    </div>
                    {tool.findings > 0 && (
                      <div className="text-sm text-muted-foreground">
                        Found {tool.findings} vulnerabilities
                      </div>
                    )}
                  </div>
                ))
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};