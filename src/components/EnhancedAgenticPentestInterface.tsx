/**
 * Enhanced Agentic Penetration Testing Interface
 * 
 * A production-ready penetration testing configuration interface that provides:
 * - Left Panel: Module Configuration & Selection
 * - Right Panel: Framework Selection, Tool Configuration & Aggression Settings
 * 
 * Features:
 * - Real-time configuration validation
 * - Backend-ready API structure
 * - Comprehensive security framework support
 * - Granular tool selection and configuration
 * - Aggression level management
 * - Export/Import configuration capabilities
 * 
 * @author Security Team
 * @version 2.0.0
 */

import React, { useState, useCallback, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { Slider } from "@/components/ui/slider";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { toast } from "@/hooks/use-toast";
import { 
  Shield, 
  Target, 
  Settings, 
  Zap, 
  AlertTriangle, 
  CheckCircle,
  Download,
  Upload,
  Play,
  Pause,
  RotateCcw,
  Network,
  Globe,
  Lock,
  Search,
  Code,
  Database,
  Bot,
  Terminal,
  Clock,
  TrendingUp,
  Save,
  FileText,
  Eye,
  Gauge
} from "lucide-react";

// ===========================
// TYPE DEFINITIONS
// ===========================

/**
 * Represents a penetration testing module configuration
 */
interface PentestModule {
  id: string;
  name: string;
  description: string;
  category: 'reconnaissance' | 'vulnerability-assessment' | 'exploitation' | 'post-exploitation' | 'reporting';
  enabled: boolean;
  priority: number;
  estimatedTime: string;
  requiredTools: string[];
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  prerequisites?: string[];
}

/**
 * Security framework configuration options
 */
interface SecurityFramework {
  id: string;
  name: string;
  description: string;
  version: string;
  categories: string[];
  enabled: boolean;
  configuration: Record<string, any>;
}

/**
 * Individual tool configuration with detailed settings
 */
interface SecurityTool {
  id: string;
  name: string;
  version: string;
  category: 'network' | 'web' | 'ad' | 'osint' | 'mobile' | 'cloud' | 'social';
  description: string;
  enabled: boolean;
  aggressionLevel: number; // 1-5 scale
  timeout: number;
  retries: number;
  concurrent: boolean;
  customParams: Record<string, any>;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  requiresConfirmation: boolean;
}

/**
 * Overall pentest configuration state
 */
interface PentestConfiguration {
  modules: PentestModule[];
  frameworks: SecurityFramework[];
  tools: SecurityTool[];
  globalSettings: {
    aggressionLevel: number;
    timeout: number;
    retries: number;
    concurrency: number;
    stealth: boolean;
    automated: boolean;
    reportingLevel: 'minimal' | 'standard' | 'comprehensive';
  };
  metadata: {
    name: string;
    description: string;
    target: string;
    scope: string;
    created: string;
    modified: string;
  };
}

// ===========================
// COMPONENT PROPS
// ===========================

interface EnhancedAgenticPentestInterfaceProps {
  onClose: () => void;
  onConfigurationChange?: (config: PentestConfiguration) => void;
  initialConfiguration?: Partial<PentestConfiguration>;
}

// ===========================
// MAIN COMPONENT
// ===========================

export const EnhancedAgenticPentestInterface: React.FC<EnhancedAgenticPentestInterfaceProps> = ({
  onClose,
  onConfigurationChange,
  initialConfiguration
}) => {
  // ===========================
  // STATE MANAGEMENT
  // ===========================

  const [configuration, setConfiguration] = useState<PentestConfiguration>({
    modules: [],
    frameworks: [],
    tools: [],
    globalSettings: {
      aggressionLevel: 3,
      timeout: 300,
      retries: 3,
      concurrency: 5,
      stealth: true,
      automated: false,
      reportingLevel: 'standard'
    },
    metadata: {
      name: 'New Pentest Configuration',
      description: '',
      target: '',
      scope: '',
      created: new Date().toISOString(),
      modified: new Date().toISOString()
    }
  });

  const [isRunning, setIsRunning] = useState(false);
  const [activeLeftTab, setActiveLeftTab] = useState('modules');
  const [activeRightTab, setActiveRightTab] = useState('frameworks');

  // ===========================
  // DEFAULT DATA INITIALIZATION
  // ===========================

  /**
   * Initialize default penetration testing modules
   */
  const initializeDefaultModules = useCallback((): PentestModule[] => [
    {
      id: 'recon-passive',
      name: 'Passive Reconnaissance',
      description: 'Gather information without directly interacting with the target',
      category: 'reconnaissance',
      enabled: true,
      priority: 1,
      estimatedTime: '15-30 min',
      requiredTools: ['subfinder', 'amass', 'shodan'],
      riskLevel: 'low'
    },
    {
      id: 'recon-active',
      name: 'Active Reconnaissance',
      description: 'Direct interaction with target systems for information gathering',
      category: 'reconnaissance',
      enabled: true,
      priority: 2,
      estimatedTime: '30-60 min',
      requiredTools: ['nmap', 'masscan', 'gobuster'],
      riskLevel: 'medium'
    },
    {
      id: 'vuln-scan',
      name: 'Vulnerability Scanning',
      description: 'Automated vulnerability detection and assessment',
      category: 'vulnerability-assessment',
      enabled: true,
      priority: 3,
      estimatedTime: '45-90 min',
      requiredTools: ['nuclei', 'nikto', 'openvas'],
      riskLevel: 'medium'
    },
    {
      id: 'web-exploit',
      name: 'Web Application Exploitation',
      description: 'Test web applications for security vulnerabilities',
      category: 'exploitation',
      enabled: false,
      priority: 4,
      estimatedTime: '60-120 min',
      requiredTools: ['burp', 'sqlmap', 'ffuf'],
      riskLevel: 'high',
      prerequisites: ['vuln-scan']
    },
    {
      id: 'ad-exploit',
      name: 'Active Directory Exploitation',
      description: 'Target Active Directory environments for privilege escalation',
      category: 'exploitation',
      enabled: false,
      priority: 5,
      estimatedTime: '90-180 min',
      requiredTools: ['bloodhound', 'crackmapexec', 'mimikatz'],
      riskLevel: 'critical',
      prerequisites: ['recon-active']
    },
    {
      id: 'post-exploit',
      name: 'Post-Exploitation',
      description: 'Maintain access and gather additional intelligence',
      category: 'post-exploitation',
      enabled: false,
      priority: 6,
      estimatedTime: '60-120 min',
      requiredTools: ['metasploit', 'cobalt-strike', 'empire'],
      riskLevel: 'critical',
      prerequisites: ['web-exploit', 'ad-exploit']
    }
  ], []);

  /**
   * Initialize default security frameworks
   */
  const initializeDefaultFrameworks = useCallback((): SecurityFramework[] => [
    {
      id: 'owasp-top10',
      name: 'OWASP Top 10',
      description: 'OWASP Top 10 Web Application Security Risks',
      version: '2021',
      categories: ['web', 'application'],
      enabled: true,
      configuration: {
        includeAll: true,
        customCategories: []
      }
    },
    {
      id: 'mitre-attack',
      name: 'MITRE ATT&CK',
      description: 'MITRE ATT&CK Framework for threat modeling',
      version: '14.1',
      categories: ['enterprise', 'mobile', 'ics'],
      enabled: true,
      configuration: {
        tactics: ['initial-access', 'execution', 'persistence', 'privilege-escalation'],
        platforms: ['windows', 'linux', 'macos']
      }
    },
    {
      id: 'nist-csf',
      name: 'NIST Cybersecurity Framework',
      description: 'NIST CSF for comprehensive security assessment',
      version: '2.0',
      categories: ['identify', 'protect', 'detect', 'respond', 'recover'],
      enabled: false,
      configuration: {
        functions: ['all'],
        maturityLevel: 'developing'
      }
    },
    {
      id: 'ptes',
      name: 'Penetration Testing Execution Standard',
      description: 'PTES methodology for structured penetration testing',
      version: '1.1',
      categories: ['methodology', 'process'],
      enabled: true,
      configuration: {
        phases: ['pre-engagement', 'intelligence-gathering', 'threat-modeling', 'vulnerability-analysis', 'exploitation', 'post-exploitation', 'reporting'],
        depth: 'comprehensive'
      }
    }
  ], []);

  /**
   * Initialize default security tools
   */
  const initializeDefaultTools = useCallback((): SecurityTool[] => [
    {
      id: 'nmap',
      name: 'Nmap',
      version: '7.94',
      category: 'network',
      description: 'Network discovery and security auditing',
      enabled: true,
      aggressionLevel: 3,
      timeout: 300,
      retries: 2,
      concurrent: true,
      customParams: {
        scanType: 'syn',
        osDetection: true,
        serviceVersion: true,
        scripts: ['default', 'vuln']
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'nuclei',
      name: 'Nuclei',
      version: '3.1.0',
      category: 'web',
      description: 'Fast vulnerability scanner based on templates',
      enabled: true,
      aggressionLevel: 2,
      timeout: 180,
      retries: 1,
      concurrent: true,
      customParams: {
        templates: 'all',
        severity: ['critical', 'high', 'medium'],
        rateLimit: 150
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'bloodhound',
      name: 'BloodHound',
      version: '4.3.1',
      category: 'ad',
      description: 'Active Directory attack path analysis',
      enabled: false,
      aggressionLevel: 4,
      timeout: 600,
      retries: 3,
      concurrent: false,
      customParams: {
        collectMethod: 'All',
        excludeDCs: false,
        ldapPort: 389
      },
      riskLevel: 'high',
      requiresConfirmation: true
    },
    {
      id: 'sqlmap',
      name: 'SQLMap',
      version: '1.7.11',
      category: 'web',
      description: 'Automatic SQL injection exploitation',
      enabled: false,
      aggressionLevel: 5,
      timeout: 900,
      retries: 3,
      concurrent: false,
      customParams: {
        risk: 2,
        level: 3,
        techniques: 'BEUSTQ',
        dbms: 'all'
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'subfinder',
      name: 'Subfinder',
      version: '2.6.3',
      category: 'osint',
      description: 'Subdomain discovery tool',
      enabled: true,
      aggressionLevel: 1,
      timeout: 120,
      retries: 2,
      concurrent: true,
      customParams: {
        sources: 'all',
        recursive: true,
        silent: false
      },
      riskLevel: 'low',
      requiresConfirmation: false
    }
  ], []);

  // ===========================
  // EFFECT HOOKS
  // ===========================

  /**
   * Initialize component with default data and merge with initial configuration
   */
  useEffect(() => {
    const defaultConfig: PentestConfiguration = {
      modules: initializeDefaultModules(),
      frameworks: initializeDefaultFrameworks(),
      tools: initializeDefaultTools(),
      globalSettings: {
        aggressionLevel: 3,
        timeout: 300,
        retries: 3,
        concurrency: 5,
        stealth: true,
        automated: false,
        reportingLevel: 'standard'
      },
      metadata: {
        name: 'New Pentest Configuration',
        description: '',
        target: '',
        scope: '',
        created: new Date().toISOString(),
        modified: new Date().toISOString()
      }
    };

    // Merge with initial configuration if provided
    if (initialConfiguration) {
      const mergedConfig = { ...defaultConfig, ...initialConfiguration };
      setConfiguration(mergedConfig);
    } else {
      setConfiguration(defaultConfig);
    }
  }, [initializeDefaultModules, initializeDefaultFrameworks, initializeDefaultTools, initialConfiguration]);

  /**
   * Notify parent component of configuration changes
   */
  useEffect(() => {
    if (onConfigurationChange) {
      onConfigurationChange(configuration);
    }
  }, [configuration, onConfigurationChange]);

  // ===========================
  // EVENT HANDLERS
  // ===========================

  /**
   * Toggle module enabled state
   */
  const toggleModule = useCallback((moduleId: string) => {
    setConfiguration(prev => ({
      ...prev,
      modules: prev.modules.map(module =>
        module.id === moduleId ? { ...module, enabled: !module.enabled } : module
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Toggle framework enabled state
   */
  const toggleFramework = useCallback((frameworkId: string) => {
    setConfiguration(prev => ({
      ...prev,
      frameworks: prev.frameworks.map(framework =>
        framework.id === frameworkId ? { ...framework, enabled: !framework.enabled } : framework
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Toggle tool enabled state
   */
  const toggleTool = useCallback((toolId: string) => {
    setConfiguration(prev => ({
      ...prev,
      tools: prev.tools.map(tool =>
        tool.id === toolId ? { ...tool, enabled: !tool.enabled } : tool
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Update tool aggression level
   */
  const updateToolAggression = useCallback((toolId: string, level: number) => {
    setConfiguration(prev => ({
      ...prev,
      tools: prev.tools.map(tool =>
        tool.id === toolId ? { ...tool, aggressionLevel: level } : tool
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Update global settings
   */
  const updateGlobalSettings = useCallback((key: keyof PentestConfiguration['globalSettings'], value: any) => {
    setConfiguration(prev => ({
      ...prev,
      globalSettings: { ...prev.globalSettings, [key]: value },
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Export configuration to JSON
   */
  const exportConfiguration = useCallback(() => {
    try {
      const dataStr = JSON.stringify(configuration, null, 2);
      const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
      
      const exportFileDefaultName = `pentest-config-${new Date().toISOString().split('T')[0]}.json`;
      
      const linkElement = document.createElement('a');
      linkElement.setAttribute('href', dataUri);
      linkElement.setAttribute('download', exportFileDefaultName);
      linkElement.click();
      
      toast({
        title: "Configuration Exported",
        description: "Configuration has been exported successfully",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to export configuration",
        variant: "destructive"
      });
    }
  }, [configuration]);

  /**
   * Start penetration test execution
   */
  const startPentest = useCallback(() => {
    const enabledModules = configuration.modules.filter(m => m.enabled);
    const enabledTools = configuration.tools.filter(t => t.enabled);
    
    if (enabledModules.length === 0) {
      toast({
        title: "No Modules Selected",
        description: "Please select at least one module to run",
        variant: "destructive"
      });
      return;
    }
    
    if (enabledTools.length === 0) {
      toast({
        title: "No Tools Selected",
        description: "Please select at least one tool to run",
        variant: "destructive"
      });
      return;
    }
    
    setIsRunning(true);
    toast({
      title: "Pentest Started",
      description: `Starting penetration test with ${enabledModules.length} modules and ${enabledTools.length} tools`,
    });
    
    // Simulate pentest execution (replace with actual backend call)
    setTimeout(() => {
      setIsRunning(false);
      toast({
        title: "Pentest Completed",
        description: "Penetration test has completed successfully",
      });
    }, 5000);
  }, [configuration]);

  // ===========================
  // UTILITY FUNCTIONS
  // ===========================

  /**
   * Get category icon for tools and modules
   */
  const getCategoryIcon = (category: string) => {
    const iconMap: Record<string, React.ComponentType<any>> = {
      network: Network,
      web: Globe,
      ad: Lock,
      osint: Search,
      mobile: Target,
      cloud: Database,
      social: Bot,
      reconnaissance: Eye,
      'vulnerability-assessment': Shield,
      exploitation: Zap,
      'post-exploitation': Terminal,
      reporting: FileText
    };
    
    const IconComponent = iconMap[category] || Terminal;
    return <IconComponent className="w-4 h-4" />;
  };

  /**
   * Get risk level badge variant
   */
  const getRiskBadgeVariant = (risk: string) => {
    switch (risk) {
      case 'low': return 'secondary';
      case 'medium': return 'default';
      case 'high': return 'destructive';
      case 'critical': return 'destructive';
      default: return 'secondary';
    }
  };

  // ===========================
  // RENDER COMPONENT
  // ===========================

  return (
    <div className="flex flex-col h-[85vh] max-h-[900px] w-full">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b bg-muted/30">
        <div className="flex items-center gap-3">
          <div className="flex items-center justify-center w-10 h-10 rounded-lg bg-primary/10">
            <Shield className="w-5 h-5 text-primary" />
          </div>
          <div>
            <h2 className="text-xl font-bold">Enhanced Agentic Pentest Interface</h2>
            <p className="text-sm text-muted-foreground">Production-ready penetration testing configuration</p>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={exportConfiguration}
            className="flex items-center gap-2"
          >
            <Download className="w-4 h-4" />
            Export
          </Button>
          
          <Button
            onClick={startPentest}
            disabled={isRunning}
            className="flex items-center gap-2"
          >
            {isRunning ? (
              <>
                <Pause className="w-4 h-4" />
                Running...
              </>
            ) : (
              <>
                <Play className="w-4 h-4" />
                Start Pentest
              </>
            )}
          </Button>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left Panel - Module Configuration */}
        <div className="w-1/2 border-r flex flex-col">
          <div className="p-4 border-b bg-muted/20">
            <h3 className="font-semibold flex items-center gap-2">
              <Settings className="w-4 h-4" />
              Module Configuration
            </h3>
            <p className="text-sm text-muted-foreground mt-1">
              Configure and enable penetration testing modules
            </p>
          </div>
          
          <Tabs value={activeLeftTab} onValueChange={setActiveLeftTab} className="flex-1 flex flex-col">
            <div className="px-4 pt-2 border-b">
              <TabsList className="grid grid-cols-2 w-full">
                <TabsTrigger value="modules">Modules</TabsTrigger>
                <TabsTrigger value="metadata">Metadata</TabsTrigger>
              </TabsList>
            </div>
            
            <ScrollArea className="flex-1 p-4">
              <TabsContent value="modules" className="space-y-4 mt-0">
                {configuration.modules.map((module) => (
                  <Card key={module.id} className={`transition-all ${
                    module.enabled 
                      ? 'bg-primary/5 border-primary/30 shadow-sm' 
                      : 'bg-muted/20 border-border/50'
                  }`}>
                    <CardContent className="pt-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-start gap-3 flex-1">
                          <div className="flex-shrink-0 mt-1">
                            {getCategoryIcon(module.category)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <h4 className="font-semibold text-sm">{module.name}</h4>
                              <Badge variant={getRiskBadgeVariant(module.riskLevel)} className="text-xs">
                                {module.riskLevel}
                              </Badge>
                            </div>
                            <p className="text-xs text-muted-foreground mb-2 line-clamp-2">
                              {module.description}
                            </p>
                            <div className="flex items-center gap-3 text-xs text-muted-foreground">
                              <div className="flex items-center gap-1">
                                <Clock className="w-3 h-3" />
                                {module.estimatedTime}
                              </div>
                              <div className="flex items-center gap-1">
                                <TrendingUp className="w-3 h-3" />
                                Priority {module.priority}
                              </div>
                            </div>
                          </div>
                        </div>
                        <Switch
                          checked={module.enabled}
                          onCheckedChange={() => toggleModule(module.id)}
                        />
                      </div>
                      
                      {module.enabled && (
                        <div className="mt-3 pt-3 border-t space-y-2">
                          <div className="text-xs">
                            <Label className="font-medium">Required Tools:</Label>
                            <div className="flex flex-wrap gap-1 mt-1">
                              {module.requiredTools.map((tool) => (
                                <Badge key={tool} variant="outline" className="text-xs">
                                  {tool}
                                </Badge>
                              ))}
                            </div>
                          </div>
                          
                          {module.prerequisites && (
                            <div className="text-xs">
                              <Label className="font-medium">Prerequisites:</Label>
                              <div className="flex flex-wrap gap-1 mt-1">
                                {module.prerequisites.map((prereq) => (
                                  <Badge key={prereq} variant="secondary" className="text-xs">
                                    {prereq}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>
              
              <TabsContent value="metadata" className="space-y-4 mt-0">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Configuration Metadata</CardTitle>
                    <CardDescription>
                      Basic information about this penetration test configuration
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="config-name">Configuration Name</Label>
                      <Input
                        id="config-name"
                        value={configuration.metadata.name}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, name: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Enter configuration name"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="config-description">Description</Label>
                      <Textarea
                        id="config-description"
                        value={configuration.metadata.description}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, description: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Describe the purpose and scope of this configuration"
                        rows={3}
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="config-target">Target</Label>
                      <Input
                        id="config-target"
                        value={configuration.metadata.target}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, target: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Target system or domain"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="config-scope">Scope</Label>
                      <Textarea
                        id="config-scope"
                        value={configuration.metadata.scope}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, scope: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Define the scope and boundaries of the test"
                        rows={2}
                      />
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </ScrollArea>
          </Tabs>
        </div>

        {/* Right Panel - Framework & Tool Configuration */}
        <div className="w-1/2 flex flex-col">
          <div className="p-4 border-b bg-muted/20">
            <h3 className="font-semibold flex items-center gap-2">
              <Zap className="w-4 h-4" />
              Framework & Tool Configuration
            </h3>
            <p className="text-sm text-muted-foreground mt-1">
              Select frameworks, configure tools, and set aggression levels
            </p>
          </div>
          
          <Tabs value={activeRightTab} onValueChange={setActiveRightTab} className="flex-1 flex flex-col">
            <div className="px-4 pt-2 border-b">
              <TabsList className="grid grid-cols-3 w-full">
                <TabsTrigger value="frameworks">Frameworks</TabsTrigger>
                <TabsTrigger value="tools">Tools</TabsTrigger>
                <TabsTrigger value="settings">Settings</TabsTrigger>
              </TabsList>
            </div>
            
            <ScrollArea className="flex-1 p-4">
              <TabsContent value="frameworks" className="space-y-4 mt-0">
                {configuration.frameworks.map((framework) => (
                  <Card key={framework.id} className={`transition-all ${
                    framework.enabled 
                      ? 'bg-primary/5 border-primary/30 shadow-sm' 
                      : 'bg-muted/20 border-border/50'
                  }`}>
                    <CardContent className="pt-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <h4 className="font-semibold text-sm">{framework.name}</h4>
                            <Badge variant="outline" className="text-xs">
                              v{framework.version}
                            </Badge>
                          </div>
                          <p className="text-xs text-muted-foreground mb-2">
                            {framework.description}
                          </p>
                          <div className="flex flex-wrap gap-1">
                            {framework.categories.map((category) => (
                              <Badge key={category} variant="secondary" className="text-xs">
                                {category}
                              </Badge>
                            ))}
                          </div>
                        </div>
                        <Switch
                          checked={framework.enabled}
                          onCheckedChange={() => toggleFramework(framework.id)}
                        />
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>
              
              <TabsContent value="tools" className="space-y-4 mt-0">
                {configuration.tools.map((tool) => (
                  <Card key={tool.id} className={`transition-all ${
                    tool.enabled 
                      ? 'bg-primary/5 border-primary/30 shadow-sm' 
                      : 'bg-muted/20 border-border/50'
                  }`}>
                    <CardContent className="pt-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-start gap-3 flex-1">
                          <div className="flex-shrink-0 mt-1">
                            {getCategoryIcon(tool.category)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <h4 className="font-semibold text-sm">{tool.name}</h4>
                              <Badge variant="outline" className="text-xs">
                                v{tool.version}
                              </Badge>
                              <Badge variant={getRiskBadgeVariant(tool.riskLevel)} className="text-xs">
                                {tool.riskLevel}
                              </Badge>
                            </div>
                            <p className="text-xs text-muted-foreground mb-2">
                              {tool.description}
                            </p>
                          </div>
                        </div>
                        <Switch
                          checked={tool.enabled}
                          onCheckedChange={() => toggleTool(tool.id)}
                        />
                      </div>
                      
                      {tool.enabled && (
                        <div className="mt-3 pt-3 border-t space-y-3">
                          <div>
                            <div className="flex items-center justify-between mb-2">
                              <Label className="text-xs font-medium">Aggression Level</Label>
                              <Badge variant="outline" className="text-xs">
                                {tool.aggressionLevel}/5
                              </Badge>
                            </div>
                            <Slider
                              value={[tool.aggressionLevel]}
                              onValueChange={([value]) => updateToolAggression(tool.id, value)}
                              max={5}
                              min={1}
                              step={1}
                              className="w-full"
                            />
                            <div className="flex justify-between text-xs text-muted-foreground mt-1">
                              <span>Passive</span>
                              <span>Aggressive</span>
                            </div>
                          </div>
                          
                          {tool.requiresConfirmation && (
                            <div className="flex items-center gap-2 text-xs text-orange-600">
                              <AlertTriangle className="w-3 h-3" />
                              <span>Requires manual confirmation before execution</span>
                            </div>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>
              
              <TabsContent value="settings" className="space-y-4 mt-0">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base flex items-center gap-2">
                      <Gauge className="w-4 h-4" />
                      Global Settings
                    </CardTitle>
                    <CardDescription>
                      Configure global penetration test parameters
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <Label className="text-sm font-medium">Global Aggression Level</Label>
                        <Badge variant="outline" className="text-xs">
                          {configuration.globalSettings.aggressionLevel}/5
                        </Badge>
                      </div>
                      <Slider
                        value={[configuration.globalSettings.aggressionLevel]}
                        onValueChange={([value]) => updateGlobalSettings('aggressionLevel', value)}
                        max={5}
                        min={1}
                        step={1}
                        className="w-full"
                      />
                      <div className="flex justify-between text-xs text-muted-foreground mt-1">
                        <span>Conservative</span>
                        <span>Aggressive</span>
                      </div>
                    </div>
                    
                    <Separator />
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="timeout" className="text-sm">Timeout (seconds)</Label>
                        <Input
                          id="timeout"
                          type="number"
                          value={configuration.globalSettings.timeout}
                          onChange={(e) => updateGlobalSettings('timeout', parseInt(e.target.value) || 300)}
                          min={30}
                          max={3600}
                        />
                      </div>
                      
                      <div>
                        <Label htmlFor="retries" className="text-sm">Max Retries</Label>
                        <Input
                          id="retries"
                          type="number"
                          value={configuration.globalSettings.retries}
                          onChange={(e) => updateGlobalSettings('retries', parseInt(e.target.value) || 3)}
                          min={1}
                          max={10}
                        />
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="concurrency" className="text-sm">Concurrency Level</Label>
                      <Input
                        id="concurrency"
                        type="number"
                        value={configuration.globalSettings.concurrency}
                        onChange={(e) => updateGlobalSettings('concurrency', parseInt(e.target.value) || 5)}
                        min={1}
                        max={50}
                      />
                    </div>
                    
                    <Separator />
                    
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="stealth" className="text-sm">Stealth Mode</Label>
                        <Switch
                          id="stealth"
                          checked={configuration.globalSettings.stealth}
                          onCheckedChange={(checked) => updateGlobalSettings('stealth', checked)}
                        />
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <Label htmlFor="automated" className="text-sm">Fully Automated</Label>
                        <Switch
                          id="automated"
                          checked={configuration.globalSettings.automated}
                          onCheckedChange={(checked) => updateGlobalSettings('automated', checked)}
                        />
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="reporting" className="text-sm">Reporting Level</Label>
                      <Select
                        value={configuration.globalSettings.reportingLevel}
                        onValueChange={(value: any) => updateGlobalSettings('reportingLevel', value)}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="minimal">Minimal</SelectItem>
                          <SelectItem value="standard">Standard</SelectItem>
                          <SelectItem value="comprehensive">Comprehensive</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Configuration Summary</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Enabled Modules:</span>
                          <span className="font-medium">
                            {configuration.modules.filter(m => m.enabled).length}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Active Frameworks:</span>
                          <span className="font-medium">
                            {configuration.frameworks.filter(f => f.enabled).length}
                          </span>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Enabled Tools:</span>
                          <span className="font-medium">
                            {configuration.tools.filter(t => t.enabled).length}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">High Risk Tools:</span>
                          <span className="font-medium text-orange-600">
                            {configuration.tools.filter(t => t.enabled && (t.riskLevel === 'high' || t.riskLevel === 'critical')).length}
                          </span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </ScrollArea>
          </Tabs>
        </div>
      </div>
    </div>
  );
};