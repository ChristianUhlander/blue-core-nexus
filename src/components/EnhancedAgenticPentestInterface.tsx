/**
 * Enhanced Agentic Penetration Testing Interface
 * 
 * A production-ready penetration testing configuration interface that provides:
 * - Left Panel: Module Configuration & Selection
 * - Right Panel: Framework Selection, Tool Configuration & Aggression Settings
 * 
 * Features:
 * - Real-time configuration validation
 * - Backend-ready API structure
 * - Comprehensive security framework support
 * - Granular tool selection and configuration
 * - Aggression level management
 * - Export/Import configuration capabilities
 * 
 * @author Security Team
 * @version 2.0.0
 */

import React, { useState, useCallback, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { Slider } from "@/components/ui/slider";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { toast } from "@/hooks/use-toast";
import { 
  Shield, 
  Target, 
  Settings, 
  Zap, 
  AlertTriangle, 
  CheckCircle,
  Download,
  Upload,
  Play,
  Pause,
  RotateCcw,
  Network,
  Globe,
  Lock,
  Search,
  Code,
  Database,
  Bot,
  Terminal,
  Clock,
  TrendingUp,
  Save,
  FileText,
  Eye,
  Gauge
} from "lucide-react";

// ===========================
// TYPE DEFINITIONS
// ===========================

/**
 * Represents a penetration testing module configuration
 */
interface PentestModule {
  id: string;
  name: string;
  description: string;
  category: 'reconnaissance' | 'vulnerability-assessment' | 'exploitation' | 'post-exploitation' | 'reporting';
  enabled: boolean;
  priority: number;
  estimatedTime: string;
  requiredTools: string[];
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  prerequisites?: string[];
}

/**
 * Security framework configuration options
 */
interface SecurityFramework {
  id: string;
  name: string;
  description: string;
  version: string;
  categories: string[];
  enabled: boolean;
  configuration: Record<string, any>;
}

/**
 * Individual tool configuration with detailed settings
 */
interface SecurityTool {
  id: string;
  name: string;
  version: string;
  category: 'network' | 'web' | 'ad' | 'osint' | 'mobile' | 'cloud' | 'social';
  description: string;
  enabled: boolean;
  aggressionLevel: number; // 1-5 scale
  timeout: number;
  retries: number;
  concurrent: boolean;
  customParams: Record<string, any>;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  requiresConfirmation: boolean;
}

/**
 * AI Agent/LLM configuration interface
 */
interface AIAgentConfiguration {
  model: string;
  fallbackModel: string;
  temperature: number;
  maxTokens: number;
  systemPrompt: string;
  enableReasoningMode: boolean;
  reasoningModel: string;
  customInstructions: string;
  responseFormat: 'json' | 'text' | 'structured';
  safetyLevel: 'low' | 'medium' | 'high';
  contextWindow: number;
  streamingEnabled: boolean;
  // Local model configuration
  useLocalModel: boolean;
  localModelConfig: {
    apiEndpoint: string;
    port: number;
    modelName: string;
    apiKey?: string;
    timeout: number;
    maxRetries: number;
    provider: 'ollama' | 'lm-studio' | 'text-generation-webui' | 'custom';
  };
  // System prompt presets
  systemPromptPreset: string;
  customSystemPrompts: Record<string, string>;
}

/**
 * Overall pentest configuration state
 */
interface PentestConfiguration {
  modules: PentestModule[];
  frameworks: SecurityFramework[];
  tools: SecurityTool[];
  aiAgent: AIAgentConfiguration;
  globalSettings: {
    aggressionLevel: number;
    timeout: number;
    retries: number;
    concurrency: number;
    stealth: boolean;
    automated: boolean;
    reportingLevel: 'minimal' | 'standard' | 'comprehensive';
  };
  metadata: {
    name: string;
    description: string;
    target: string;
    scope: string;
    created: string;
    modified: string;
  };
}

// ===========================
// COMPONENT PROPS
// ===========================

interface EnhancedAgenticPentestInterfaceProps {
  onClose: () => void;
  onConfigurationChange?: (config: PentestConfiguration) => void;
  initialConfiguration?: Partial<PentestConfiguration>;
}

// ===========================
// MAIN COMPONENT
// ===========================

export const EnhancedAgenticPentestInterface: React.FC<EnhancedAgenticPentestInterfaceProps> = ({
  onClose,
  onConfigurationChange,
  initialConfiguration
}) => {
  // ===========================
  // STATE MANAGEMENT
  // ===========================

  const [configuration, setConfiguration] = useState<PentestConfiguration>({
    modules: [],
    frameworks: [],
    tools: [],
    aiAgent: {
      model: 'gpt-5-2025-08-07',
      fallbackModel: 'gpt-4.1-2025-04-14',
      temperature: 0.2,
      maxTokens: 2000,
      systemPrompt: 'You are an expert AI cybersecurity agent specializing in penetration testing and vulnerability assessment. Provide detailed, actionable insights while maintaining ethical and legal compliance.',
      enableReasoningMode: false,
      reasoningModel: 'o4-mini-2025-04-16',
      customInstructions: '',
      responseFormat: 'structured',
      safetyLevel: 'high',
      contextWindow: 200000,
      streamingEnabled: true,
      useLocalModel: false,
      localModelConfig: {
        apiEndpoint: 'http://localhost',
        port: 11434,
        modelName: 'llama2',
        timeout: 30000,
        maxRetries: 3,
        provider: 'ollama'
      },
      systemPromptPreset: 'pentest-expert',
      customSystemPrompts: {
        'pentest-expert': 'You are an expert AI cybersecurity agent specializing in penetration testing and vulnerability assessment. Provide detailed, actionable insights while maintaining ethical and legal compliance.',
        'red-team': 'You are an advanced red team operator with deep expertise in offensive security. Focus on creative attack vectors while ensuring all activities remain within legal boundaries.',
        'compliance-focused': 'You are a cybersecurity compliance expert conducting authorized security assessments. Prioritize documentation, risk classification, and regulatory alignment in all analyses.',
        'beginner-friendly': 'You are a patient cybersecurity mentor helping newcomers learn penetration testing. Explain concepts clearly, provide educational context, and emphasize safety practices.'
      }
    },
    globalSettings: {
      aggressionLevel: 3,
      timeout: 300,
      retries: 3,
      concurrency: 5,
      stealth: true,
      automated: false,
      reportingLevel: 'standard'
    },
    metadata: {
      name: 'New Pentest Configuration',
      description: '',
      target: '',
      scope: '',
      created: new Date().toISOString(),
      modified: new Date().toISOString()
    }
  });

  const [isRunning, setIsRunning] = useState(false);
  const [activeLeftTab, setActiveLeftTab] = useState('modules');
  const [activeRightTab, setActiveRightTab] = useState('frameworks');

  // ===========================
  // DEFAULT DATA INITIALIZATION
  // ===========================

  /**
   * Initialize default penetration testing modules
   */
  const initializeDefaultModules = useCallback((): PentestModule[] => [
    {
      id: 'recon-passive',
      name: 'Passive Reconnaissance',
      description: 'Gather information without directly interacting with the target',
      category: 'reconnaissance',
      enabled: true,
      priority: 1,
      estimatedTime: '15-30 min',
      requiredTools: ['subfinder', 'amass', 'shodan'],
      riskLevel: 'low'
    },
    {
      id: 'recon-active',
      name: 'Active Reconnaissance',
      description: 'Direct interaction with target systems for information gathering',
      category: 'reconnaissance',
      enabled: true,
      priority: 2,
      estimatedTime: '30-60 min',
      requiredTools: ['nmap', 'masscan', 'gobuster'],
      riskLevel: 'medium'
    },
    {
      id: 'vuln-scan',
      name: 'Vulnerability Scanning',
      description: 'Automated vulnerability detection and assessment',
      category: 'vulnerability-assessment',
      enabled: true,
      priority: 3,
      estimatedTime: '45-90 min',
      requiredTools: ['nuclei', 'nikto', 'openvas'],
      riskLevel: 'medium'
    },
    {
      id: 'web-exploit',
      name: 'Web Application Exploitation',
      description: 'Test web applications for security vulnerabilities',
      category: 'exploitation',
      enabled: false,
      priority: 4,
      estimatedTime: '60-120 min',
      requiredTools: ['burp', 'sqlmap', 'ffuf'],
      riskLevel: 'high',
      prerequisites: ['vuln-scan']
    },
    {
      id: 'ad-exploit',
      name: 'Active Directory Exploitation',
      description: 'Target Active Directory environments for privilege escalation',
      category: 'exploitation',
      enabled: false,
      priority: 5,
      estimatedTime: '90-180 min',
      requiredTools: ['bloodhound', 'crackmapexec', 'mimikatz'],
      riskLevel: 'critical',
      prerequisites: ['recon-active']
    },
    {
      id: 'post-exploit',
      name: 'Post-Exploitation',
      description: 'Maintain access and gather additional intelligence',
      category: 'post-exploitation',
      enabled: false,
      priority: 6,
      estimatedTime: '60-120 min',
      requiredTools: ['metasploit', 'cobalt-strike', 'empire'],
      riskLevel: 'critical',
      prerequisites: ['web-exploit', 'ad-exploit']
    }
  ], []);

  /**
   * Initialize default security frameworks
   */
  const initializeDefaultFrameworks = useCallback((): SecurityFramework[] => [
    {
      id: 'owasp-top10',
      name: 'OWASP Top 10',
      description: 'OWASP Top 10 Web Application Security Risks',
      version: '2021',
      categories: ['web', 'application'],
      enabled: true,
      configuration: {
        includeAll: true,
        customCategories: []
      }
    },
    {
      id: 'mitre-attack',
      name: 'MITRE ATT&CK',
      description: 'MITRE ATT&CK Framework for threat modeling',
      version: '14.1',
      categories: ['enterprise', 'mobile', 'ics'],
      enabled: true,
      configuration: {
        tactics: ['initial-access', 'execution', 'persistence', 'privilege-escalation'],
        platforms: ['windows', 'linux', 'macos']
      }
    },
    {
      id: 'nist-csf',
      name: 'NIST Cybersecurity Framework',
      description: 'NIST CSF for comprehensive security assessment',
      version: '2.0',
      categories: ['identify', 'protect', 'detect', 'respond', 'recover'],
      enabled: false,
      configuration: {
        functions: ['all'],
        maturityLevel: 'developing'
      }
    },
    {
      id: 'ptes',
      name: 'Penetration Testing Execution Standard',
      description: 'PTES methodology for structured penetration testing',
      version: '1.1',
      categories: ['methodology', 'process'],
      enabled: true,
      configuration: {
        phases: ['pre-engagement', 'intelligence-gathering', 'threat-modeling', 'vulnerability-analysis', 'exploitation', 'post-exploitation', 'reporting'],
        depth: 'comprehensive'
      }
    }
  ], []);

  /**
   * Initialize default security tools
   */
  const initializeDefaultTools = useCallback((): SecurityTool[] => [
    {
      id: 'nmap',
      name: 'Nmap',
      version: '7.94',
      category: 'network',
      description: 'Network discovery and security auditing',
      enabled: true,
      aggressionLevel: 3,
      timeout: 300,
      retries: 2,
      concurrent: true,
      customParams: {
        scanType: 'syn',
        osDetection: true,
        serviceVersion: true,
        scripts: ['default', 'vuln']
      },
      riskLevel: 'low',
      requiresConfirmation: false
    },
    {
      id: 'nuclei',
      name: 'Nuclei',
      version: '3.1.0',
      category: 'web',
      description: 'Fast vulnerability scanner based on templates',
      enabled: true,
      aggressionLevel: 2,
      timeout: 180,
      retries: 1,
      concurrent: true,
      customParams: {
        templates: 'all',
        severity: ['critical', 'high', 'medium'],
        rateLimit: 150
      },
      riskLevel: 'medium',
      requiresConfirmation: false
    },
    {
      id: 'bloodhound',
      name: 'BloodHound',
      version: '4.3.1',
      category: 'ad',
      description: 'Active Directory attack path analysis',
      enabled: false,
      aggressionLevel: 4,
      timeout: 600,
      retries: 3,
      concurrent: false,
      customParams: {
        collectMethod: 'All',
        excludeDCs: false,
        ldapPort: 389
      },
      riskLevel: 'high',
      requiresConfirmation: true
    },
    {
      id: 'sqlmap',
      name: 'SQLMap',
      version: '1.7.11',
      category: 'web',
      description: 'Automatic SQL injection exploitation',
      enabled: false,
      aggressionLevel: 5,
      timeout: 900,
      retries: 3,
      concurrent: false,
      customParams: {
        risk: 2,
        level: 3,
        techniques: 'BEUSTQ',
        dbms: 'all'
      },
      riskLevel: 'critical',
      requiresConfirmation: true
    },
    {
      id: 'subfinder',
      name: 'Subfinder',
      version: '2.6.3',
      category: 'osint',
      description: 'Subdomain discovery tool',
      enabled: true,
      aggressionLevel: 1,
      timeout: 120,
      retries: 2,
      concurrent: true,
      customParams: {
        sources: 'all',
        recursive: true,
        silent: false
      },
      riskLevel: 'low',
      requiresConfirmation: false
    }
  ], []);

  // ===========================
  // EFFECT HOOKS
  // ===========================

  /**
   * Initialize component with default data and merge with initial configuration
   */
  useEffect(() => {
    const defaultConfig: PentestConfiguration = {
      modules: initializeDefaultModules(),
      frameworks: initializeDefaultFrameworks(),
      tools: initializeDefaultTools(),
      aiAgent: {
        model: 'gpt-5-2025-08-07',
        fallbackModel: 'gpt-4.1-2025-04-14',
        temperature: 0.2,
        maxTokens: 2000,
        systemPrompt: 'You are an expert AI cybersecurity agent specializing in penetration testing and vulnerability assessment. Provide detailed, actionable insights while maintaining ethical and legal compliance.',
        enableReasoningMode: false,
        reasoningModel: 'o4-mini-2025-04-16',
        customInstructions: '',
        responseFormat: 'structured',
        safetyLevel: 'high',
        contextWindow: 200000,
        streamingEnabled: true,
        useLocalModel: false,
        localModelConfig: {
          apiEndpoint: 'http://localhost',
          port: 11434,
          modelName: 'llama2',
          timeout: 30000,
          maxRetries: 3,
          provider: 'ollama'
        },
        systemPromptPreset: 'pentest-expert',
        customSystemPrompts: {
          'pentest-expert': 'You are an expert AI cybersecurity agent specializing in penetration testing and vulnerability assessment. Provide detailed, actionable insights while maintaining ethical and legal compliance.',
          'red-team': 'You are an advanced red team operator with deep expertise in offensive security. Focus on creative attack vectors while ensuring all activities remain within legal boundaries.',
          'compliance-focused': 'You are a cybersecurity compliance expert conducting authorized security assessments. Prioritize documentation, risk classification, and regulatory alignment in all analyses.',
          'beginner-friendly': 'You are a patient cybersecurity mentor helping newcomers learn penetration testing. Explain concepts clearly, provide educational context, and emphasize safety practices.'
        }
      },
      globalSettings: {
        aggressionLevel: 3,
        timeout: 300,
        retries: 3,
        concurrency: 5,
        stealth: true,
        automated: false,
        reportingLevel: 'standard'
      },
      metadata: {
        name: 'New Pentest Configuration',
        description: '',
        target: '',
        scope: '',
        created: new Date().toISOString(),
        modified: new Date().toISOString()
      }
    };

    // Merge with initial configuration if provided
    if (initialConfiguration) {
      const mergedConfig = { ...defaultConfig, ...initialConfiguration };
      setConfiguration(mergedConfig);
    } else {
      setConfiguration(defaultConfig);
    }
  }, [initializeDefaultModules, initializeDefaultFrameworks, initializeDefaultTools, initialConfiguration]);

  /**
   * Notify parent component of configuration changes
   */
  useEffect(() => {
    if (onConfigurationChange) {
      onConfigurationChange(configuration);
    }
  }, [configuration, onConfigurationChange]);

  // ===========================
  // EVENT HANDLERS
  // ===========================

  /**
   * Toggle module enabled state
   */
  const toggleModule = useCallback((moduleId: string) => {
    setConfiguration(prev => ({
      ...prev,
      modules: prev.modules.map(module =>
        module.id === moduleId ? { ...module, enabled: !module.enabled } : module
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Toggle framework enabled state
   */
  const toggleFramework = useCallback((frameworkId: string) => {
    setConfiguration(prev => ({
      ...prev,
      frameworks: prev.frameworks.map(framework =>
        framework.id === frameworkId ? { ...framework, enabled: !framework.enabled } : framework
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Toggle tool enabled state
   */
  const toggleTool = useCallback((toolId: string) => {
    setConfiguration(prev => ({
      ...prev,
      tools: prev.tools.map(tool =>
        tool.id === toolId ? { ...tool, enabled: !tool.enabled } : tool
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Update tool aggression level
   */
  const updateToolAggression = useCallback((toolId: string, level: number) => {
    setConfiguration(prev => ({
      ...prev,
      tools: prev.tools.map(tool =>
        tool.id === toolId ? { ...tool, aggressionLevel: level } : tool
      ),
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Update global settings
   */
  const updateGlobalSettings = useCallback((key: keyof PentestConfiguration['globalSettings'], value: any) => {
    setConfiguration(prev => ({
      ...prev,
      globalSettings: { ...prev.globalSettings, [key]: value },
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Update AI Agent configuration
   */
  const updateAIAgentConfig = useCallback((key: keyof AIAgentConfiguration, value: any) => {
    setConfiguration(prev => ({
      ...prev,
      aiAgent: { ...prev.aiAgent, [key]: value },
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Test AI Agent connection
   */
  const testAIAgent = useCallback(async () => {
    const endpoint = configuration.aiAgent.useLocalModel 
      ? `${configuration.aiAgent.localModelConfig.apiEndpoint}:${configuration.aiAgent.localModelConfig.port}`
      : configuration.aiAgent.model;
      
    toast({
      title: "Testing AI Agent",
      description: `Testing connection to ${endpoint}...`,
    });

    // Mock test - in production, make actual API call
    setTimeout(() => {
      toast({
        title: "AI Agent Test",
        description: configuration.aiAgent.useLocalModel
          ? `Local model ${configuration.aiAgent.localModelConfig.modelName} is ready`
          : `${configuration.aiAgent.model} is ready for penetration testing`,
      });
    }, 2000);
  }, [configuration.aiAgent]);

  /**
   * Update local model configuration
   */
  const updateLocalModelConfig = useCallback((key: keyof AIAgentConfiguration['localModelConfig'], value: any) => {
    setConfiguration(prev => ({
      ...prev,
      aiAgent: { 
        ...prev.aiAgent, 
        localModelConfig: { ...prev.aiAgent.localModelConfig, [key]: value }
      },
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));
  }, []);

  /**
   * Handle system prompt preset selection
   */
  const handleSystemPromptPreset = useCallback((presetId: string) => {
    const preset = configuration.aiAgent.customSystemPrompts[presetId];
    if (preset) {
      setConfiguration(prev => ({
        ...prev,
        aiAgent: {
          ...prev.aiAgent,
          systemPromptPreset: presetId,
          systemPrompt: preset
        },
        metadata: { ...prev.metadata, modified: new Date().toISOString() }
      }));
    }
  }, [configuration.aiAgent.customSystemPrompts]);

  /**
   * Save custom system prompt
   */
  const saveCustomSystemPrompt = useCallback((name: string, prompt: string) => {
    if (!name.trim() || !prompt.trim()) {
      toast({
        title: "Invalid Input",
        description: "Please provide both name and prompt content",
        variant: "destructive"
      });
      return;
    }

    setConfiguration(prev => ({
      ...prev,
      aiAgent: {
        ...prev.aiAgent,
        customSystemPrompts: {
          ...prev.aiAgent.customSystemPrompts,
          [name]: prompt
        }
      },
      metadata: { ...prev.metadata, modified: new Date().toISOString() }
    }));

    toast({
      title: "Prompt Saved",
      description: `Custom prompt "${name}" has been saved successfully`,
    });
  }, []);

  // State for prompt management dialog
  const [showPromptManager, setShowPromptManager] = useState(false);
  const [newPromptName, setNewPromptName] = useState('');
  const [newPromptContent, setNewPromptContent] = useState('');

  /**
   * Get prompt behavior description for UI
   */
  const getPromptBehaviorDescription = (promptKey: string): string => {
    const descriptions: Record<string, string> = {
      'pentest-expert': 'Professional, detailed analysis with compliance focus',
      'red-team': 'Creative attack vectors with advanced tactics',
      'compliance-focused': 'Regulatory alignment and documentation emphasis',
      'beginner-friendly': 'Educational explanations with safety emphasis'
    };
    return descriptions[promptKey] || 'Custom behavior as defined in prompt';
  };

  /**
   * Export configuration to JSON
   */
  const exportConfiguration = useCallback(() => {
    try {
      const dataStr = JSON.stringify(configuration, null, 2);
      const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
      
      const exportFileDefaultName = `pentest-config-${new Date().toISOString().split('T')[0]}.json`;
      
      const linkElement = document.createElement('a');
      linkElement.setAttribute('href', dataUri);
      linkElement.setAttribute('download', exportFileDefaultName);
      linkElement.click();
      
      toast({
        title: "Configuration Exported",
        description: "Configuration has been exported successfully",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to export configuration",
        variant: "destructive"
      });
    }
  }, [configuration]);

  /**
   * Start penetration test execution
   */
  const startPentest = useCallback(() => {
    const enabledModules = configuration.modules.filter(m => m.enabled);
    const enabledTools = configuration.tools.filter(t => t.enabled);
    
    if (enabledModules.length === 0) {
      toast({
        title: "No Modules Selected",
        description: "Please select at least one module to run",
        variant: "destructive"
      });
      return;
    }
    
    if (enabledTools.length === 0) {
      toast({
        title: "No Tools Selected",
        description: "Please select at least one tool to run",
        variant: "destructive"
      });
      return;
    }
    
    setIsRunning(true);
    toast({
      title: "Pentest Started",
      description: `Starting penetration test with ${enabledModules.length} modules and ${enabledTools.length} tools`,
    });
    
    // Simulate pentest execution (replace with actual backend call)
    setTimeout(() => {
      setIsRunning(false);
      toast({
        title: "Pentest Completed",
        description: "Penetration test has completed successfully",
      });
    }, 5000);
  }, [configuration]);

  // ===========================
  // UTILITY FUNCTIONS
  // ===========================

  /**
   * Get category icon for tools and modules
   */
  const getCategoryIcon = (category: string) => {
    const iconMap: Record<string, React.ComponentType<any>> = {
      network: Network,
      web: Globe,
      ad: Lock,
      osint: Search,
      mobile: Target,
      cloud: Database,
      social: Bot,
      reconnaissance: Eye,
      'vulnerability-assessment': Shield,
      exploitation: Zap,
      'post-exploitation': Terminal,
      reporting: FileText
    };
    
    const IconComponent = iconMap[category] || Terminal;
    return <IconComponent className="w-4 h-4" />;
  };

  /**
   * Get risk level badge variant
   */
  const getRiskBadgeVariant = (risk: string) => {
    switch (risk) {
      case 'low': return 'secondary';
      case 'medium': return 'default';
      case 'high': return 'destructive';
      case 'critical': return 'destructive';
      default: return 'secondary';
    }
  };

  // ===========================
  // RENDER COMPONENT
  // ===========================

  return (
    <div className="flex flex-col w-full">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b bg-muted/30 flex-shrink-0">
        <div className="flex items-center gap-3">
          <div className="flex items-center justify-center w-10 h-10 rounded-lg bg-primary/10">
            <Shield className="w-5 h-5 text-primary" />
          </div>
          <div>
            <h2 className="text-xl font-bold">Enhanced Agentic Pentest Interface</h2>
            <p className="text-sm text-muted-foreground">Production-ready penetration testing configuration</p>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={exportConfiguration}
            className="flex items-center gap-2"
          >
            <Download className="w-4 h-4" />
            Export
          </Button>
          
          <Button
            onClick={startPentest}
            disabled={isRunning}
            className="flex items-center gap-2"
          >
            {isRunning ? (
              <>
                <Pause className="w-4 h-4" />
                Running...
              </>
            ) : (
              <>
                <Play className="w-4 h-4" />
                Start Pentest
              </>
            )}
          </Button>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left Panel - Module Configuration */}
        <div className="w-1/2 border-r flex flex-col">
          <div className="p-4 border-b bg-muted/20">
            <h3 className="font-semibold flex items-center gap-2">
              <Settings className="w-4 h-4" />
              Module Configuration
            </h3>
            <p className="text-sm text-muted-foreground mt-1">
              Configure and enable penetration testing modules
            </p>
          </div>
          
          <Tabs value={activeLeftTab} onValueChange={setActiveLeftTab} className="flex-1 flex flex-col">
            <div className="px-4 pt-2 border-b">
              <TabsList className="grid grid-cols-2 w-full">
                <TabsTrigger value="modules">Modules</TabsTrigger>
                <TabsTrigger value="metadata">Metadata</TabsTrigger>
              </TabsList>
            </div>
            
            <ScrollArea className="flex-1">
              <div className="p-4">
                <TabsContent value="modules" className="space-y-4 mt-0">
                {configuration.modules.map((module) => (
                  <Card key={module.id} className={`transition-all ${
                    module.enabled 
                      ? 'bg-primary/5 border-primary/30 shadow-sm' 
                      : 'bg-muted/20 border-border/50'
                  }`}>
                    <CardContent className="pt-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-start gap-3 flex-1">
                          <div className="flex-shrink-0 mt-1">
                            {getCategoryIcon(module.category)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <h4 className="font-semibold text-sm">{module.name}</h4>
                              <Badge variant={getRiskBadgeVariant(module.riskLevel)} className="text-xs">
                                {module.riskLevel}
                              </Badge>
                            </div>
                            <p className="text-xs text-muted-foreground mb-2 line-clamp-2">
                              {module.description}
                            </p>
                            <div className="flex items-center gap-3 text-xs text-muted-foreground">
                              <div className="flex items-center gap-1">
                                <Clock className="w-3 h-3" />
                                {module.estimatedTime}
                              </div>
                              <div className="flex items-center gap-1">
                                <TrendingUp className="w-3 h-3" />
                                Priority {module.priority}
                              </div>
                            </div>
                          </div>
                        </div>
                        <Switch
                          checked={module.enabled}
                          onCheckedChange={() => toggleModule(module.id)}
                        />
                      </div>
                      
                      {module.enabled && (
                        <div className="mt-3 pt-3 border-t space-y-2">
                          <div className="text-xs">
                            <Label className="font-medium">Required Tools:</Label>
                            <div className="flex flex-wrap gap-1 mt-1">
                              {module.requiredTools.map((tool) => (
                                <Badge key={tool} variant="outline" className="text-xs">
                                  {tool}
                                </Badge>
                              ))}
                            </div>
                          </div>
                          
                          {module.prerequisites && (
                            <div className="text-xs">
                              <Label className="font-medium">Prerequisites:</Label>
                              <div className="flex flex-wrap gap-1 mt-1">
                                {module.prerequisites.map((prereq) => (
                                  <Badge key={prereq} variant="secondary" className="text-xs">
                                    {prereq}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>
              
              <TabsContent value="metadata" className="space-y-4 mt-0">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Configuration Metadata</CardTitle>
                    <CardDescription>
                      Basic information about this penetration test configuration
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="config-name">Configuration Name</Label>
                      <Input
                        id="config-name"
                        value={configuration.metadata.name}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, name: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Enter configuration name"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="config-description">Description</Label>
                      <Textarea
                        id="config-description"
                        value={configuration.metadata.description}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, description: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Describe the purpose and scope of this configuration"
                        rows={3}
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="config-target">Target</Label>
                      <Input
                        id="config-target"
                        value={configuration.metadata.target}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, target: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Target system or domain"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="config-scope">Scope</Label>
                      <Textarea
                        id="config-scope"
                        value={configuration.metadata.scope}
                        onChange={(e) => setConfiguration(prev => ({
                          ...prev,
                          metadata: { ...prev.metadata, scope: e.target.value, modified: new Date().toISOString() }
                        }))}
                        placeholder="Define the scope and boundaries of the test"
                        rows={2}
                      />
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              </div>
            </ScrollArea>
          </Tabs>
        </div>

        {/* Right Panel - Framework & Tool Configuration */}
        <div className="w-1/2 flex flex-col">
          <div className="p-4 border-b bg-muted/20">
            <h3 className="font-semibold flex items-center gap-2">
              <Zap className="w-4 h-4" />
              Framework & Tool Configuration
            </h3>
            <p className="text-sm text-muted-foreground mt-1">
              Select frameworks, configure tools, and set aggression levels
            </p>
          </div>
          
          <Tabs value={activeRightTab} onValueChange={setActiveRightTab} className="flex-1 flex flex-col">
            <div className="px-4 pt-2 border-b">
              <TabsList className="grid grid-cols-4 w-full">
                <TabsTrigger value="frameworks">Frameworks</TabsTrigger>
                <TabsTrigger value="tools">Tools</TabsTrigger>
                <TabsTrigger value="ai-agent">AI Agent</TabsTrigger>
                <TabsTrigger value="settings">Settings</TabsTrigger>
              </TabsList>
            </div>
            
            <ScrollArea className="flex-1">
              <div className="p-4">
                <TabsContent value="frameworks" className="space-y-4 mt-0">
                {configuration.frameworks.map((framework) => (
                  <Card key={framework.id} className={`transition-all ${
                    framework.enabled 
                      ? 'bg-primary/5 border-primary/30 shadow-sm' 
                      : 'bg-muted/20 border-border/50'
                  }`}>
                    <CardContent className="pt-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <h4 className="font-semibold text-sm">{framework.name}</h4>
                            <Badge variant="outline" className="text-xs">
                              v{framework.version}
                            </Badge>
                          </div>
                          <p className="text-xs text-muted-foreground mb-2">
                            {framework.description}
                          </p>
                          <div className="flex flex-wrap gap-1">
                            {framework.categories.map((category) => (
                              <Badge key={category} variant="secondary" className="text-xs">
                                {category}
                              </Badge>
                            ))}
                          </div>
                        </div>
                        <Switch
                          checked={framework.enabled}
                          onCheckedChange={() => toggleFramework(framework.id)}
                        />
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>
              
              <TabsContent value="tools" className="space-y-4 mt-0">
                {configuration.tools.map((tool) => (
                  <Card key={tool.id} className={`transition-all ${
                    tool.enabled 
                      ? 'bg-primary/5 border-primary/30 shadow-sm' 
                      : 'bg-muted/20 border-border/50'
                  }`}>
                    <CardContent className="pt-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-start gap-3 flex-1">
                          <div className="flex-shrink-0 mt-1">
                            {getCategoryIcon(tool.category)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <h4 className="font-semibold text-sm">{tool.name}</h4>
                              <Badge variant="outline" className="text-xs">
                                v{tool.version}
                              </Badge>
                              <Badge variant={getRiskBadgeVariant(tool.riskLevel)} className="text-xs">
                                {tool.riskLevel}
                              </Badge>
                            </div>
                            <p className="text-xs text-muted-foreground mb-2">
                              {tool.description}
                            </p>
                          </div>
                        </div>
                        <Switch
                          checked={tool.enabled}
                          onCheckedChange={() => toggleTool(tool.id)}
                        />
                      </div>
                      
                      {tool.enabled && (
                        <div className="mt-3 pt-3 border-t space-y-3">
                          <div>
                            <div className="flex items-center justify-between mb-2">
                              <Label className="text-xs font-medium">Aggression Level</Label>
                              <Badge variant="outline" className="text-xs">
                                {tool.aggressionLevel}/5
                              </Badge>
                            </div>
                            <Slider
                              value={[tool.aggressionLevel]}
                              onValueChange={([value]) => updateToolAggression(tool.id, value)}
                              max={5}
                              min={1}
                              step={1}
                              className="w-full"
                            />
                            <div className="flex justify-between text-xs text-muted-foreground mt-1">
                              <span>Passive</span>
                              <span>Aggressive</span>
                            </div>
                          </div>
                          
                          {tool.requiresConfirmation && (
                            <div className="flex items-center gap-2 text-xs text-orange-600">
                              <AlertTriangle className="w-3 h-3" />
                              <span>Requires manual confirmation before execution</span>
                            </div>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>
              
              {/* AI Agent Configuration Tab */}
              <TabsContent value="ai-agent" className="space-y-4 mt-0">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base flex items-center gap-2">
                      <Bot className="w-4 h-4" />
                      AI Agent Configuration
                    </CardTitle>
                    <CardDescription>
                      Configure the AI agent that will orchestrate and analyze the penetration test
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* Model Selection */}
                    <div className="space-y-3">
                      <div>
                        <Label htmlFor="primary-model">Primary AI Model</Label>
                        <div className="flex items-center gap-2 mb-2">
                          <Switch
                            checked={configuration.aiAgent.useLocalModel}
                            onCheckedChange={(checked) => updateAIAgentConfig('useLocalModel', checked)}
                          />
                          <Label className="text-sm">Use Local Model</Label>
                        </div>
                        
                        {configuration.aiAgent.useLocalModel ? (
                          <div className="space-y-3 p-3 border rounded-lg bg-muted/20">
                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <Label htmlFor="local-provider">Provider</Label>
                                <Select 
                                  value={configuration.aiAgent.localModelConfig.provider} 
                                  onValueChange={(value: any) => updateLocalModelConfig('provider', value)}
                                >
                                  <SelectTrigger>
                                    <SelectValue />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="ollama">
                                      <div className="flex items-center gap-2">
                                        <Badge variant="secondary" className="text-xs">Popular</Badge>
                                        Ollama
                                      </div>
                                    </SelectItem>
                                    <SelectItem value="lm-studio">LM Studio</SelectItem>
                                    <SelectItem value="text-generation-webui">Text Generation WebUI</SelectItem>
                                    <SelectItem value="custom">Custom API</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div>
                                <Label htmlFor="local-model-name">Model Name</Label>
                                <Input
                                  id="local-model-name"
                                  value={configuration.aiAgent.localModelConfig.modelName}
                                  onChange={(e) => updateLocalModelConfig('modelName', e.target.value)}
                                  placeholder="llama2, mistral-7b, etc."
                                />
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <Label htmlFor="local-endpoint">API Endpoint</Label>
                                <Input
                                  id="local-endpoint"
                                  value={configuration.aiAgent.localModelConfig.apiEndpoint}
                                  onChange={(e) => updateLocalModelConfig('apiEndpoint', e.target.value)}
                                  placeholder="http://localhost"
                                />
                              </div>
                              
                              <div>
                                <Label htmlFor="local-port">Port</Label>
                                <Input
                                  id="local-port"
                                  type="number"
                                  value={configuration.aiAgent.localModelConfig.port}
                                  onChange={(e) => updateLocalModelConfig('port', parseInt(e.target.value) || 11434)}
                                  placeholder="11434"
                                />
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <Label htmlFor="local-timeout">Timeout (ms)</Label>
                                <Input
                                  id="local-timeout"
                                  type="number"
                                  value={configuration.aiAgent.localModelConfig.timeout}
                                  onChange={(e) => updateLocalModelConfig('timeout', parseInt(e.target.value) || 30000)}
                                  placeholder="30000"
                                />
                              </div>
                              
                              <div>
                                <Label htmlFor="local-retries">Max Retries</Label>
                                <Input
                                  id="local-retries"
                                  type="number"
                                  value={configuration.aiAgent.localModelConfig.maxRetries}
                                  onChange={(e) => updateLocalModelConfig('maxRetries', parseInt(e.target.value) || 3)}
                                  min="1"
                                  max="10"
                                />
                              </div>
                            </div>
                            
                            {(configuration.aiAgent.localModelConfig.provider === 'custom' || 
                              configuration.aiAgent.localModelConfig.provider === 'text-generation-webui') && (
                              <div>
                                <Label htmlFor="local-api-key">API Key (Optional)</Label>
                                <Input
                                  id="local-api-key"
                                  type="password"
                                  value={configuration.aiAgent.localModelConfig.apiKey || ''}
                                  onChange={(e) => updateLocalModelConfig('apiKey', e.target.value)}
                                  placeholder="Optional authentication key"
                                />
                              </div>
                            )}
                            
                            <div className="flex items-center justify-between p-2 bg-blue-50 dark:bg-blue-950/30 rounded border border-blue-200 dark:border-blue-800">
                              <div className="text-sm">
                                <div className="font-medium">Endpoint Preview:</div>
                                <div className="text-muted-foreground">
                                  {configuration.aiAgent.localModelConfig.apiEndpoint}:{configuration.aiAgent.localModelConfig.port}
                                </div>
                              </div>
                              <Badge variant="outline" className="text-xs">
                                {configuration.aiAgent.localModelConfig.provider}
                              </Badge>
                            </div>
                          </div>
                        ) : (
                          <Select 
                            value={configuration.aiAgent.model} 
                            onValueChange={(value) => updateAIAgentConfig('model', value)}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="gpt-5-2025-08-07">
                                <div className="flex items-center gap-2">
                                  <Badge variant="secondary" className="text-xs">Latest</Badge>
                                  GPT-5 (Flagship Model)
                                </div>
                              </SelectItem>
                              <SelectItem value="gpt-4.1-2025-04-14">GPT-4.1 (Reliable Performance)</SelectItem>
                              <SelectItem value="gpt-5-mini-2025-08-07">GPT-5 Mini (Fast & Efficient)</SelectItem>
                              <SelectItem value="claude-opus-4-20250514">
                                <div className="flex items-center gap-2">
                                  <Badge variant="outline" className="text-xs">Anthropic</Badge>
                                  Claude Opus 4 (Most Capable)
                                </div>
                              </SelectItem>
                              <SelectItem value="claude-sonnet-4-20250514">
                                <div className="flex items-center gap-2">
                                  <Badge variant="outline" className="text-xs">Anthropic</Badge>
                                  Claude Sonnet 4 (High Performance)
                                </div>
                              </SelectItem>
                              <SelectItem value="claude-3-5-haiku-20241022">Claude Haiku (Fastest Response)</SelectItem>
                            </SelectContent>
                          </Select>
                        )}
                        
                        <p className="text-xs text-muted-foreground mt-1">
                          {configuration.aiAgent.useLocalModel 
                            ? 'Configure your local AI model for enhanced privacy and control'
                            : 'Primary model for analysis, decision-making, and report generation'
                          }
                        </p>
                      </div>

                      <div>
                        <Label htmlFor="fallback-model">Fallback Model</Label>
                        <Select 
                          value={configuration.aiAgent.fallbackModel} 
                          onValueChange={(value) => updateAIAgentConfig('fallbackModel', value)}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="gpt-4.1-2025-04-14">GPT-4.1 (Reliable)</SelectItem>
                            <SelectItem value="gpt-5-mini-2025-08-07">GPT-5 Mini (Fast)</SelectItem>
                            <SelectItem value="gpt-5-nano-2025-08-07">GPT-5 Nano (Fastest)</SelectItem>
                            <SelectItem value="claude-3-5-haiku-20241022">Claude Haiku (Quick)</SelectItem>
                          </SelectContent>
                        </Select>
                        <p className="text-xs text-muted-foreground mt-1">
                          Backup model used when primary model is unavailable
                        </p>
                      </div>
                    </div>

                    <Separator />

                    {/* Advanced Model Settings */}
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <Label>Enable Reasoning Mode</Label>
                          <p className="text-xs text-muted-foreground">Use specialized reasoning models for complex analysis</p>
                        </div>
                        <Switch
                          checked={configuration.aiAgent.enableReasoningMode}
                          onCheckedChange={(checked) => updateAIAgentConfig('enableReasoningMode', checked)}
                        />
                      </div>

                      {configuration.aiAgent.enableReasoningMode && (
                        <div>
                          <Label htmlFor="reasoning-model">Reasoning Model</Label>
                          <Select 
                            value={configuration.aiAgent.reasoningModel} 
                            onValueChange={(value) => updateAIAgentConfig('reasoningModel', value)}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="o3-2025-04-16">
                                <div className="flex items-center gap-2">
                                  <Badge variant="destructive" className="text-xs">Pro</Badge>
                                  O3 (Most Powerful Reasoning)
                                </div>
                              </SelectItem>
                              <SelectItem value="o4-mini-2025-04-16">O4 Mini (Fast Reasoning)</SelectItem>
                            </SelectContent>
                          </Select>
                          <p className="text-xs text-muted-foreground mt-1">
                            Specialized model for multi-step analysis and complex problem-solving
                          </p>
                        </div>
                      )}

                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <Label>Temperature: {configuration.aiAgent.temperature}</Label>
                          <Slider
                            value={[configuration.aiAgent.temperature]}
                            onValueChange={([value]) => updateAIAgentConfig('temperature', parseFloat(value.toFixed(1)))}
                            max={1}
                            min={0}
                            step={0.1}
                            className="w-full mt-2"
                          />
                          <div className="flex justify-between text-xs text-muted-foreground mt-1">
                            <span>Focused</span>
                            <span>Creative</span>
                          </div>
                        </div>
                        
                        <div>
                          <Label htmlFor="max-tokens">Max Tokens</Label>
                          <Input
                            id="max-tokens"
                            type="number"
                            value={configuration.aiAgent.maxTokens}
                            onChange={(e) => updateAIAgentConfig('maxTokens', parseInt(e.target.value) || 2000)}
                            min={100}
                            max={8000}
                          />
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <Label htmlFor="response-format">Response Format</Label>
                          <Select 
                            value={configuration.aiAgent.responseFormat} 
                            onValueChange={(value) => updateAIAgentConfig('responseFormat', value)}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="structured">Structured (Recommended)</SelectItem>
                              <SelectItem value="json">JSON</SelectItem>
                              <SelectItem value="text">Plain Text</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div>
                          <Label htmlFor="safety-level">Safety Level</Label>
                          <Select 
                            value={configuration.aiAgent.safetyLevel} 
                            onValueChange={(value) => updateAIAgentConfig('safetyLevel', value)}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="high">
                                <div className="flex items-center gap-2">
                                  <CheckCircle className="w-3 h-3 text-green-500" />
                                  High (Recommended)
                                </div>
                              </SelectItem>
                              <SelectItem value="medium">Medium</SelectItem>
                              <SelectItem value="low">
                                <div className="flex items-center gap-2">
                                  <AlertTriangle className="w-3 h-3 text-orange-500" />
                                  Low (Advanced Users)
                                </div>
                              </SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <Label>Streaming Enabled</Label>
                          <p className="text-xs text-muted-foreground">Real-time response streaming for better UX</p>
                        </div>
                        <Switch
                          checked={configuration.aiAgent.streamingEnabled}
                          onCheckedChange={(checked) => updateAIAgentConfig('streamingEnabled', checked)}
                        />
                      </div>
                    </div>

                    <Separator />

                    {/* System Prompt Configuration */}
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="system-prompt">System Prompt Configuration</Label>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setShowPromptManager(true)}
                          className="flex items-center gap-2"
                        >
                          <Settings className="w-3 h-3" />
                          Manage Prompts
                        </Button>
                      </div>

                      <div>
                        <Label htmlFor="prompt-preset">System Prompt Preset</Label>
                        <Select 
                          value={configuration.aiAgent.systemPromptPreset} 
                          onValueChange={handleSystemPromptPreset}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="pentest-expert">
                              <div className="space-y-1">
                                <div className="font-medium">Penetration Testing Expert</div>
                                <div className="text-xs text-muted-foreground">Professional security assessment focus</div>
                              </div>
                            </SelectItem>
                            <SelectItem value="red-team">
                              <div className="space-y-1">
                                <div className="font-medium">Red Team Operator</div>
                                <div className="text-xs text-muted-foreground">Advanced offensive security tactics</div>
                              </div>
                            </SelectItem>
                            <SelectItem value="compliance-focused">
                              <div className="space-y-1">
                                <div className="font-medium">Compliance Expert</div>
                                <div className="text-xs text-muted-foreground">Regulatory and compliance alignment</div>
                              </div>
                            </SelectItem>
                            <SelectItem value="beginner-friendly">
                              <div className="space-y-1">
                                <div className="font-medium">Security Mentor</div>
                                <div className="text-xs text-muted-foreground">Educational and learning-focused</div>
                              </div>
                            </SelectItem>
                            {Object.keys(configuration.aiAgent.customSystemPrompts).filter(key => 
                              !['pentest-expert', 'red-team', 'compliance-focused', 'beginner-friendly'].includes(key)
                            ).map(key => (
                              <SelectItem key={key} value={key}>
                                <div className="space-y-1">
                                  <div className="font-medium">{key}</div>
                                  <div className="text-xs text-muted-foreground">Custom prompt</div>
                                </div>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <p className="text-xs text-muted-foreground mt-1">
                          Choose a pre-configured prompt or create your own
                        </p>
                      </div>

                      <div>
                        <Label htmlFor="system-prompt">Current System Prompt</Label>
                        <Textarea
                          id="system-prompt"
                          value={configuration.aiAgent.systemPrompt}
                          onChange={(e) => updateAIAgentConfig('systemPrompt', e.target.value)}
                          placeholder="Define the AI agent's role and behavior..."
                          rows={6}
                          className="text-sm"
                        />
                        <div className="flex items-center justify-between mt-1">
                          <p className="text-xs text-muted-foreground">
                            Core instructions that define the AI agent's expertise and behavior
                          </p>
                          <Badge variant="outline" className="text-xs">
                            {configuration.aiAgent.systemPrompt.length} characters
                          </Badge>
                        </div>
                      </div>

                      <div>
                        <Label htmlFor="custom-instructions">Additional Instructions (Context-Specific)</Label>
                        <Textarea
                          id="custom-instructions"
                          value={configuration.aiAgent.customInstructions}
                          onChange={(e) => updateAIAgentConfig('customInstructions', e.target.value)}
                          placeholder="Additional specific instructions for this pentest configuration..."
                          rows={3}
                          className="text-sm"
                        />
                        <p className="text-xs text-muted-foreground mt-1">
                          Specific instructions that will be appended to the system prompt for this configuration
                        </p>
                      </div>
                    </div>

                    <Separator />

                    {/* Agent Test & Actions */}
                    <div className="flex items-center justify-between">
                      <div>
                        <Label>AI Agent Status</Label>
                        <p className="text-xs text-muted-foreground">
                          Current model: {configuration.aiAgent.model}
                          {configuration.aiAgent.enableReasoningMode && ` + ${configuration.aiAgent.reasoningModel}`}
                        </p>
                      </div>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={testAIAgent}
                        className="flex items-center gap-2"
                      >
                        <CheckCircle className="w-4 h-4" />
                        Test Agent
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                {/* Agent Capabilities Overview */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Agent Capabilities</CardTitle>
                    <CardDescription>
                      What the AI agent can do with the current configuration
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-green-500" />
                          <span>Automated vulnerability analysis</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-green-500" />
                          <span>Intelligent attack path planning</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-green-500" />
                          <span>Real-time threat correlation</span>
                        </div>
                        <div className="flex items-center gap-2">
                          {configuration.aiAgent.enableReasoningMode ? (
                            <CheckCircle className="w-4 h-4 text-green-500" />
                          ) : (
                            <span className="w-4 h-4 rounded-full bg-muted" />
                          )}
                          <span className={configuration.aiAgent.enableReasoningMode ? '' : 'text-muted-foreground'}>
                            Advanced reasoning & multi-step analysis
                          </span>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-green-500" />
                          <span>Comprehensive report generation</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-green-500" />
                          <span>Risk assessment & prioritization</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-green-500" />
                          <span>Remediation recommendations</span>
                        </div>
                        <div className="flex items-center gap-2">
                          {configuration.aiAgent.streamingEnabled ? (
                            <CheckCircle className="w-4 h-4 text-green-500" />
                          ) : (
                            <span className="w-4 h-4 rounded-full bg-muted" />
                          )}
                          <span className={configuration.aiAgent.streamingEnabled ? '' : 'text-muted-foreground'}>
                            Real-time streaming updates
                          </span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              
              <TabsContent value="settings" className="space-y-4 mt-0">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base flex items-center gap-2">
                      <Gauge className="w-4 h-4" />
                      Global Settings
                    </CardTitle>
                    <CardDescription>
                      Configure global penetration test parameters
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <Label className="text-sm font-medium">Global Aggression Level</Label>
                        <Badge variant="outline" className="text-xs">
                          {configuration.globalSettings.aggressionLevel}/5
                        </Badge>
                      </div>
                      <Slider
                        value={[configuration.globalSettings.aggressionLevel]}
                        onValueChange={([value]) => updateGlobalSettings('aggressionLevel', value)}
                        max={5}
                        min={1}
                        step={1}
                        className="w-full"
                      />
                      <div className="flex justify-between text-xs text-muted-foreground mt-1">
                        <span>Conservative</span>
                        <span>Aggressive</span>
                      </div>
                    </div>
                    
                    <Separator />
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="timeout" className="text-sm">Timeout (seconds)</Label>
                        <Input
                          id="timeout"
                          type="number"
                          value={configuration.globalSettings.timeout}
                          onChange={(e) => updateGlobalSettings('timeout', parseInt(e.target.value) || 300)}
                          min={30}
                          max={3600}
                        />
                      </div>
                      
                      <div>
                        <Label htmlFor="retries" className="text-sm">Max Retries</Label>
                        <Input
                          id="retries"
                          type="number"
                          value={configuration.globalSettings.retries}
                          onChange={(e) => updateGlobalSettings('retries', parseInt(e.target.value) || 3)}
                          min={1}
                          max={10}
                        />
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="concurrency" className="text-sm">Concurrency Level</Label>
                      <Input
                        id="concurrency"
                        type="number"
                        value={configuration.globalSettings.concurrency}
                        onChange={(e) => updateGlobalSettings('concurrency', parseInt(e.target.value) || 5)}
                        min={1}
                        max={50}
                      />
                    </div>
                    
                    <Separator />
                    
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="stealth" className="text-sm">Stealth Mode</Label>
                        <Switch
                          id="stealth"
                          checked={configuration.globalSettings.stealth}
                          onCheckedChange={(checked) => updateGlobalSettings('stealth', checked)}
                        />
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <Label htmlFor="automated" className="text-sm">Fully Automated</Label>
                        <Switch
                          id="automated"
                          checked={configuration.globalSettings.automated}
                          onCheckedChange={(checked) => updateGlobalSettings('automated', checked)}
                        />
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="reporting" className="text-sm">Reporting Level</Label>
                      <Select
                        value={configuration.globalSettings.reportingLevel}
                        onValueChange={(value: any) => updateGlobalSettings('reportingLevel', value)}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="minimal">Minimal</SelectItem>
                          <SelectItem value="standard">Standard</SelectItem>
                          <SelectItem value="comprehensive">Comprehensive</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Configuration Summary</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Enabled Modules:</span>
                          <span className="font-medium">
                            {configuration.modules.filter(m => m.enabled).length}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Active Frameworks:</span>
                          <span className="font-medium">
                            {configuration.frameworks.filter(f => f.enabled).length}
                          </span>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Enabled Tools:</span>
                          <span className="font-medium">
                            {configuration.tools.filter(t => t.enabled).length}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">High Risk Tools:</span>
                          <span className="font-medium text-orange-600">
                            {configuration.tools.filter(t => t.enabled && (t.riskLevel === 'high' || t.riskLevel === 'critical')).length}
                          </span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              </div>
            </ScrollArea>
          </Tabs>
        </div>
      </div>

      {/* System Prompt Manager Dialog */}
      {showPromptManager && (
        <Dialog open={showPromptManager} onOpenChange={setShowPromptManager}>
          <DialogContent className="max-w-4xl h-[80vh] p-0 overflow-hidden">
            <DialogHeader className="p-6 pb-4 flex-shrink-0">
              <DialogTitle className="flex items-center gap-2">
                <Settings className="h-5 w-5" />
                System Prompt Manager
              </DialogTitle>
              <DialogDescription>
                Manage and configure AI agent system prompts for different penetration testing scenarios
              </DialogDescription>
            </DialogHeader>
            
            <ScrollArea className="flex-1">
              <div className="p-6 pt-2 space-y-6">
              {/* Preset Prompts */}
              <div>
                <h3 className="text-lg font-semibold mb-3">Preset Prompts</h3>
                <div className="grid gap-4">
                  {Object.entries(configuration.aiAgent.customSystemPrompts).map(([key, prompt]) => (
                    <Card key={key} className="p-4">
                      <div className="flex items-start justify-between mb-2">
                        <div>
                          <h4 className="font-medium capitalize">{key.replace('-', ' ')}</h4>
                          <p className="text-sm text-muted-foreground">
                            {prompt.length > 100 ? `${prompt.substring(0, 100)}...` : prompt}
                          </p>
                        </div>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleSystemPromptPreset(key)}
                          disabled={configuration.aiAgent.systemPromptPreset === key}
                        >
                          Use This
                        </Button>
                      </div>
                    </Card>
                  ))}
                </div>
              </div>

              <Separator />

              {/* Create New Prompt */}
              <div>
                <h3 className="text-lg font-semibold mb-3">Create Custom Prompt</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="new-prompt-name">Prompt Name</Label>
                    <Input
                      id="new-prompt-name"
                      value={newPromptName}
                      onChange={(e) => setNewPromptName(e.target.value)}
                      placeholder="e.g., web-app-specialist"
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="new-prompt-content">Prompt Content</Label>
                    <Textarea
                      id="new-prompt-content"
                      value={newPromptContent}
                      onChange={(e) => setNewPromptContent(e.target.value)}
                      placeholder="You are an expert cybersecurity AI agent..."
                      rows={8}
                      className="text-sm"
                    />
                  </div>

                  <div className="flex justify-end gap-2">
                    <Button
                      variant="outline"
                      onClick={() => {
                        setNewPromptName('');
                        setNewPromptContent('');
                      }}
                    >
                      Clear
                    </Button>
                    <Button
                      onClick={() => {
                        saveCustomSystemPrompt(newPromptName, newPromptContent);
                        setNewPromptName('');
                        setNewPromptContent('');
                      }}
                      disabled={!newPromptName.trim() || !newPromptContent.trim()}
                    >
                      Save Prompt
                    </Button>
                  </div>
                </div>
              </div>
              </div>
            </ScrollArea>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
};