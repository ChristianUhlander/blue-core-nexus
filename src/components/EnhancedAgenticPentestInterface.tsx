/**
 * Enhanced Agentic Penetration Testing Interface
 * Advanced Security Tools & Research Integration
 * 
 * ENHANCED FEATURES:
 * ✅ Advanced Tools: Bloodhound, Mimikatz, CrackMapExec, ffuf, Recon-ng
 * ✅ Online Research Integration with HackTricks, MITRE ATT&CK
 * ✅ Scenario Generation from Security Blog Posts
 * ✅ Real-time Security Intelligence
 * ✅ AI-Powered Attack Path Analysis
 */

import React, { useState, useCallback, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { toast } from "@/hooks/use-toast";
import { 
  Target, 
  Bot, 
  Shield, 
  Eye, 
  Settings, 
  PlayCircle, 
  Terminal,
  Search,
  Globe,
  FileText,
  AlertTriangle,
  CheckCircle,
  Loader2,
  BrainCircuit,
  ExternalLink,
  Code,
  Database,
  Network,
  Lock
} from "lucide-react";

interface AdvancedTool {
  name: string;
  version: string;
  enabled: boolean;
  category: 'network' | 'web' | 'ad' | 'osint' | 'reversing' | 'social' | 'mobile';
  description: string;
  destructive: boolean;
  requiresConfirmation: boolean;
  configuration: Record<string, any>;
}

interface SecurityScenario {
  id: string;
  name: string;
  description: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  targetType: string;
  tools: string[];
  attackChain: string[];
  references: string[];
}

interface ResearchSource {
  name: string;
  url: string;
  description: string;
  category: string;
  enabled: boolean;
}

export const EnhancedAgenticPentestInterface: React.FC<{ onClose: () => void }> = ({ onClose }) => {
  const [activeTab, setActiveTab] = useState('tools');
  const [isResearching, setIsResearching] = useState(false);
  const [researchQuery, setResearchQuery] = useState('');
  const [scenarios, setScenarios] = useState<SecurityScenario[]>([]);
  const [selectedScenario, setSelectedScenario] = useState<string>('');
  const [apiKey, setApiKey] = useState('');

  // Enhanced Advanced Security Tools
  const [advancedTools, setAdvancedTools] = useState<AdvancedTool[]>([
    {
      name: 'bloodhound',
      version: '4.3.1',
      enabled: false,
      category: 'ad',
      description: 'Active Directory reconnaissance and attack path analysis',
      destructive: false,
      requiresConfirmation: true,
      configuration: {
        collectMethod: 'All',
        zipFilename: 'bloodhound_data.zip',
        excludeDCs: false
      }
    },
    {
      name: 'crackmapexec',
      version: '5.4.0',
      enabled: false,
      category: 'ad',
      description: 'Swiss army knife for pentesting networks and Active Directory',
      destructive: true,
      requiresConfirmation: true,
      configuration: {
        protocol: 'smb',
        threads: 100,
        timeout: 20
      }
    },
    {
      name: 'mimikatz',
      version: '2.2.0',
      enabled: false,
      category: 'ad',
      description: 'Windows credential extraction and manipulation',
      destructive: true,
      requiresConfirmation: true,
      configuration: {
        module: 'sekurlsa',
        command: 'logonpasswords'
      }
    },
    {
      name: 'ffuf',
      version: '2.1.0',
      enabled: true,
      category: 'web',
      description: 'Fast web fuzzer written in Go',
      destructive: false,
      requiresConfirmation: false,
      configuration: {
        wordlist: '/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt',
        threads: 40,
        timeout: 10
      }
    },
    {
      name: 'recon-ng',
      version: '5.1.2',
      enabled: true,
      category: 'osint',
      description: 'Modular reconnaissance framework',
      destructive: false,
      requiresConfirmation: false,
      configuration: {
        workspace: 'default',
        modules: ['recon/domains-hosts/brute_hosts', 'recon/hosts-ports/masscan']
      }
    },
    {
      name: 'nuclei',
      version: '3.1.0',
      enabled: true,
      category: 'web',
      description: 'Fast vulnerability scanner based on YAML templates',
      destructive: false,
      requiresConfirmation: false,
      configuration: {
        templates: '/nuclei-templates/',
        concurrency: 25,
        rateLimit: 150
      }
    },
    {
      name: 'subfinder',
      version: '2.6.3',
      enabled: true,
      category: 'osint',
      description: 'Subdomain discovery tool',
      destructive: false,
      requiresConfirmation: false,
      configuration: {
        sources: ['all'],
        timeout: 30,
        threads: 10
      }
    },
    {
      name: 'gobuster',
      version: '3.6.0',
      enabled: true,
      category: 'web',
      description: 'Directory/file and DNS busting tool',
      destructive: false,
      requiresConfirmation: false,
      configuration: {
        wordlist: '/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt',
        threads: 30,
        timeout: 10
      }
    }
  ]);

  // Security Research Sources
  const [researchSources] = useState<ResearchSource[]>([
    {
      name: 'HackTricks',
      url: 'https://book.hacktricks.xyz/',
      description: 'Comprehensive penetration testing methodology and techniques',
      category: 'methodology',
      enabled: true
    },
    {
      name: 'MITRE ATT&CK',
      url: 'https://attack.mitre.org/',
      description: 'Adversarial tactics, techniques, and procedures knowledge base',
      category: 'framework',
      enabled: true
    },
    {
      name: 'PayloadsAllTheThings',
      url: 'https://github.com/swisskyrepo/PayloadsAllTheThings',
      description: 'Comprehensive list of payloads and bypass techniques',
      category: 'payloads',
      enabled: true
    },
    {
      name: 'GTFOBins',
      url: 'https://gtfobins.github.io/',
      description: 'Unix binaries for privilege escalation and file operations',
      category: 'privilege-escalation',
      enabled: true
    },
    {
      name: 'LOLBAS',
      url: 'https://lolbas-project.github.io/',
      description: 'Living off the land binaries for Windows',
      category: 'windows',
      enabled: true
    },
    {
      name: 'Red Team Notes',
      url: 'https://www.ired.team/',
      description: 'Red team tactics and techniques',
      category: 'redteam',
      enabled: true
    }
  ]);

  // Predefined Attack Scenarios
  const predefinedScenarios: SecurityScenario[] = [
    {
      id: 'ad-bloodhound-attack',
      name: 'Active Directory Bloodhound Analysis',
      description: 'Comprehensive AD enumeration and attack path identification using Bloodhound',
      difficulty: 'advanced',
      targetType: 'Active Directory',
      tools: ['bloodhound', 'crackmapexec', 'mimikatz'],
      attackChain: [
        'Initial domain enumeration with Bloodhound',
        'Identify shortest paths to high-value targets',
        'Credential harvesting with Mimikatz',
        'Lateral movement with CrackMapExec',
        'Privilege escalation exploitation',
        'Domain admin compromise'
      ],
      references: [
        'https://book.hacktricks.xyz/windows-hardening/active-directory-methodology',
        'https://attack.mitre.org/tactics/TA0008/',
        'https://www.ired.team/offensive-security/active-directory'
      ]
    },
    {
      id: 'web-fuzzing-comprehensive',
      name: 'Advanced Web Application Fuzzing',
      description: 'Multi-layered web application enumeration using modern fuzzing techniques',
      difficulty: 'intermediate',
      targetType: 'Web Application',
      tools: ['ffuf', 'nuclei', 'gobuster'],
      attackChain: [
        'Initial web reconnaissance and technology stack identification',
        'Directory and file fuzzing with ffuf',
        'Parameter fuzzing and hidden endpoint discovery',
        'Vulnerability scanning with Nuclei templates',
        'Content discovery with Gobuster',
        'Exploitation of discovered vulnerabilities'
      ],
      references: [
        'https://book.hacktricks.xyz/pentesting-web/web-vulnerabilities-methodology',
        'https://github.com/ffuf/ffuf',
        'https://nuclei.projectdiscovery.io/'
      ]
    },
    {
      id: 'osint-recon-advanced',
      name: 'Advanced OSINT Reconnaissance',
      description: 'Comprehensive intelligence gathering using multiple OSINT frameworks',
      difficulty: 'beginner',
      targetType: 'External Infrastructure',
      tools: ['recon-ng', 'subfinder', 'nuclei'],
      attackChain: [
        'Domain and subdomain enumeration with Subfinder',
        'Social media and public records research with Recon-ng',
        'Technology stack and service identification',
        'Vulnerability scanning of discovered assets with Nuclei',
        'Attack surface analysis and prioritization'
      ],
      references: [
        'https://book.hacktricks.xyz/generic-methodologies-and-resources/external-recon-methodology',
        'https://github.com/projectdiscovery/subfinder',
        'https://github.com/lanmaster53/recon-ng'
      ]
    }
  ];

  // Toggle tool enabled state
  const toggleTool = useCallback((toolName: string) => {
    setAdvancedTools(prev =>
      prev.map(tool =>
        tool.name === toolName ? { ...tool, enabled: !tool.enabled } : tool
      )
    );
  }, []);

  // Conduct online security research
  const conductSecurityResearch = useCallback(async (query: string) => {
    if (!apiKey) {
      toast({
        title: "API Key Required",
        description: "Please provide your Perplexity API key for security research",
        variant: "destructive"
      });
      return;
    }

    setIsResearching(true);
    try {
      const response = await fetch('https://api.perplexity.ai/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'llama-3.1-sonar-large-128k-online',
          messages: [
            {
              role: 'system',
              content: `You are a cybersecurity research assistant specializing in penetration testing. 
              Research the latest security techniques, vulnerabilities, and attack methodologies.
              Include references to HackTricks, MITRE ATT&CK, and recent security blog posts.
              Focus on practical, actionable information for penetration testers.`
            },
            {
              role: 'user',
              content: `Research the latest information about: ${query}. Include:
              1. Current attack techniques and methodologies
              2. Tool recommendations and practical usage
              3. References to authoritative sources like HackTricks, MITRE ATT&CK
              4. Recent vulnerabilities and exploits
              5. Step-by-step attack scenarios
              6. Real-world examples from security researchers`
            }
          ],
          temperature: 0.2,
          max_tokens: 3000,
          search_recency_filter: 'month'
        }),
      });

      const data = await response.json();
      const researchResults = data.choices?.[0]?.message?.content || 'No research results found';
      
      // Generate scenarios from research
      await generateScenariosFromResearch(researchResults, query);
      
      toast({
        title: "Research Complete",
        description: "Latest security intelligence retrieved and scenarios generated"
      });
    } catch (error) {
      console.error('Research failed:', error);
      toast({
        title: "Research Failed",
        description: "Unable to conduct security research",
        variant: "destructive"
      });
    } finally {
      setIsResearching(false);
    }
  }, [apiKey]);

  // Generate scenarios from research results
  const generateScenariosFromResearch = useCallback(async (researchData: string, originalQuery: string) => {
    try {
      const response = await fetch('https://api.perplexity.ai/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'llama-3.1-sonar-large-128k-online',
          messages: [
            {
              role: 'system',
              content: `You are an expert penetration testing scenario designer. Create detailed attack scenarios based on current security research.
              Each scenario should be realistic, practical, and based on real-world attack techniques documented by security researchers.`
            },
            {
              role: 'user',
              content: `Based on this security research about "${originalQuery}", create 2-3 realistic penetration testing scenarios:
              
              Research Data: ${researchData}
              
              For each scenario, provide:
              1. Scenario name and brief description
              2. Target environment type
              3. Required tools from our arsenal
              4. Step-by-step attack chain
              5. Difficulty level (beginner/intermediate/advanced/expert)
              6. References to specific blog posts or research papers
              
              Format as JSON array with objects containing: id, name, description, difficulty, targetType, tools, attackChain, references`
            }
          ],
          temperature: 0.4,
          max_tokens: 2000
        }),
      });

      const data = await response.json();
      const scenarioText = data.choices?.[0]?.message?.content || '';
      
      // Parse scenarios from response
      try {
        const jsonMatch = scenarioText.match(/\[[\s\S]*\]/);
        if (jsonMatch) {
          const parsedScenarios = JSON.parse(jsonMatch[0]);
          const formattedScenarios = parsedScenarios.map((scenario: any, index: number) => ({
            id: scenario.id || `research-scenario-${Date.now()}-${index}`,
            name: scenario.name || `Research Scenario ${index + 1}`,
            description: scenario.description || 'Generated from security research',
            difficulty: scenario.difficulty || 'intermediate',
            targetType: scenario.targetType || 'General',
            tools: scenario.tools || ['ffuf', 'nuclei'],
            attackChain: scenario.attackChain || ['Initial reconnaissance', 'Vulnerability identification', 'Exploitation'],
            references: scenario.references || []
          }));
          
          setScenarios(prev => [...formattedScenarios, ...prev]);
        }
      } catch (parseError) {
        // Fallback: create a generic scenario based on the query
        const fallbackScenario: SecurityScenario = {
          id: `fallback-${Date.now()}`,
          name: `${originalQuery} Research Scenario`,
          description: `Penetration testing scenario based on latest research about ${originalQuery}`,
          difficulty: 'intermediate',
          targetType: 'General',
          tools: advancedTools.filter(t => t.enabled).map(t => t.name).slice(0, 3),
          attackChain: [
            'Initial reconnaissance',
            'Vulnerability assessment',
            'Exploitation attempts',
            'Post-exploitation activities'
          ],
          references: researchSources.filter(s => s.enabled).map(s => s.url).slice(0, 2)
        };
        
        setScenarios(prev => [fallbackScenario, ...prev]);
      }
    } catch (error) {
      console.error('Scenario generation failed:', error);
    }
  }, [apiKey, advancedTools, researchSources]);

  // Load predefined scenarios on mount
  useEffect(() => {
    setScenarios(predefinedScenarios);
  }, []);

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'network': return <Network className="w-4 h-4" />;
      case 'web': return <Globe className="w-4 h-4" />;
      case 'ad': return <Lock className="w-4 h-4" />;
      case 'osint': return <Search className="w-4 h-4" />;
      case 'reversing': return <Code className="w-4 h-4" />;
      case 'social': return <Bot className="w-4 h-4" />;
      case 'mobile': return <Target className="w-4 h-4" />;
      default: return <Terminal className="w-4 h-4" />;
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-background w-[95vw] h-[95vh] rounded-lg border shadow-2xl flex flex-col">
        <div className="flex items-center justify-between p-6 border-b">
          <div>
            <h2 className="text-2xl font-bold">Enhanced Agentic Pentest Interface</h2>
            <p className="text-muted-foreground">Advanced security tools with research-driven attack scenarios</p>
          </div>
          <Button variant="outline" onClick={onClose}>Close</Button>
        </div>

        <div className="flex-1 overflow-hidden">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full flex flex-col">
            <div className="px-6 py-2 border-b">
              <TabsList className="grid grid-cols-3 w-full max-w-md">
                <TabsTrigger value="tools">Advanced Tools</TabsTrigger>
                <TabsTrigger value="research">Research</TabsTrigger>
                <TabsTrigger value="scenarios">Scenarios</TabsTrigger>
              </TabsList>
            </div>

            <div className="flex-1 overflow-y-auto p-6">
              {/* Advanced Tools Tab */}
              <TabsContent value="tools" className="space-y-6 mt-0">
                <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
                  {advancedTools.map((tool) => (
                    <Card key={tool.name} className={`transition-all ${
                      tool.enabled 
                        ? 'bg-primary/5 border-primary/30 shadow-md' 
                        : 'bg-muted/5 border-border/20'
                    }`}>
                      <CardContent className="pt-4">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-start gap-3">
                            <div className="flex-shrink-0 mt-1">
                              {getCategoryIcon(tool.category)}
                            </div>
                            <div className="flex-1 min-w-0">
                              <div className="flex items-center gap-2 mb-1">
                                <h4 className="font-semibold text-sm">{tool.name}</h4>
                                <Badge variant="secondary" className="text-xs">{tool.version}</Badge>
                              </div>
                              <p className="text-xs text-muted-foreground mb-2 line-clamp-2">
                                {tool.description}
                              </p>
                              <div className="flex items-center gap-2">
                                <Badge variant="outline" className="text-xs">
                                  {tool.category}
                                </Badge>
                                {tool.destructive && (
                                  <Badge variant="destructive" className="text-xs">
                                    <AlertTriangle className="w-3 h-3 mr-1" />
                                    Destructive
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </div>
                          <Switch
                            checked={tool.enabled}
                            onCheckedChange={() => toggleTool(tool.name)}
                          />
                        </div>
                        
                        {tool.enabled && (
                          <div className="mt-3 pt-3 border-t border-border/20">
                            <div className="text-xs text-muted-foreground">
                              {tool.requiresConfirmation && (
                                <div className="flex items-center gap-1 text-orange-600 mb-1">
                                  <AlertTriangle className="w-3 h-3" />
                                  Requires confirmation
                                </div>
                              )}
                              <div>Category: {tool.category}</div>
                            </div>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  ))}
                </div>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Tool Arsenal Summary</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                      <div>
                        <div className="text-2xl font-bold text-primary">
                          {advancedTools.filter(t => t.enabled).length}
                        </div>
                        <div className="text-sm text-muted-foreground">Enabled Tools</div>
                      </div>
                      <div>
                        <div className="text-2xl font-bold text-orange-500">
                          {advancedTools.filter(t => t.enabled && t.destructive).length}
                        </div>
                        <div className="text-sm text-muted-foreground">Destructive Tools</div>
                      </div>
                      <div>
                        <div className="text-2xl font-bold text-blue-500">
                          {advancedTools.filter(t => t.enabled && t.category === 'ad').length}
                        </div>
                        <div className="text-sm text-muted-foreground">AD Tools</div>
                      </div>
                      <div>
                        <div className="text-2xl font-bold text-green-500">
                          {advancedTools.filter(t => t.enabled && t.category === 'web').length}
                        </div>
                        <div className="text-sm text-muted-foreground">Web Tools</div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Research Tab */}
              <TabsContent value="research" className="space-y-6 mt-0">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Search className="w-5 h-5" />
                        Security Research
                      </CardTitle>
                      <CardDescription>
                        Conduct real-time research on the latest security techniques
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Label htmlFor="api-key">Perplexity API Key</Label>
                        <Input
                          id="api-key"
                          type="password"
                          value={apiKey}
                          onChange={(e) => setApiKey(e.target.value)}
                          placeholder="Enter your Perplexity API key"
                        />
                      </div>
                      
                      <div>
                        <Label htmlFor="research-query">Research Query</Label>
                        <div className="flex gap-2">
                          <Input
                            id="research-query"
                            value={researchQuery}
                            onChange={(e) => setResearchQuery(e.target.value)}
                            placeholder="e.g., latest Active Directory attack techniques"
                            className="flex-1"
                          />
                          <Button 
                            onClick={() => conductSecurityResearch(researchQuery)}
                            disabled={isResearching || !researchQuery.trim() || !apiKey}
                          >
                            {isResearching ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Search className="w-4 h-4" />
                            )}
                          </Button>
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-2">
                        {[
                          'Bloodhound attack paths',
                          'CrackMapExec techniques',
                          'ffuf advanced usage',
                          'Mimikatz latest features',
                          'Container security testing',
                          'API security assessment'
                        ].map((topic) => (
                          <Button
                            key={topic}
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              setResearchQuery(topic);
                              if (apiKey) conductSecurityResearch(topic);
                            }}
                            disabled={isResearching || !apiKey}
                          >
                            {topic}
                          </Button>
                        ))}
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Globe className="w-5 h-5" />
                        Security Resources
                      </CardTitle>
                      <CardDescription>
                        Quick access to essential security resources
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <ScrollArea className="h-80">
                        <div className="space-y-3">
                          {researchSources.map((source) => (
                            <div key={source.name} className="flex items-center justify-between p-3 border rounded">
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-1">
                                  <h4 className="font-medium text-sm">{source.name}</h4>
                                  <Badge variant="outline" className="text-xs">{source.category}</Badge>
                                </div>
                                <p className="text-xs text-muted-foreground mb-2">{source.description}</p>
                                <a 
                                  href={source.url} 
                                  target="_blank" 
                                  rel="noopener noreferrer"
                                  className="text-xs text-blue-600 hover:underline flex items-center gap-1"
                                >
                                  <ExternalLink className="w-3 h-3" />
                                  {source.url}
                                </a>
                              </div>
                            </div>
                          ))}
                        </div>
                      </ScrollArea>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>

              {/* Scenarios Tab */}
              <TabsContent value="scenarios" className="space-y-6 mt-0">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-semibold">Attack Scenarios</h3>
                    <p className="text-sm text-muted-foreground">
                      Research-driven penetration testing scenarios
                    </p>
                  </div>
                  <Badge variant="outline">
                    {scenarios.length} scenarios available
                  </Badge>
                </div>

                <div className="grid gap-4">
                  {scenarios.map((scenario) => (
                    <Card key={scenario.id} className="hover:shadow-md transition-shadow">
                      <CardContent className="pt-4">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <h4 className="font-semibold">{scenario.name}</h4>
                              <Badge variant="outline" className="text-xs">
                                {scenario.difficulty}
                              </Badge>
                              <Badge variant="secondary" className="text-xs">
                                {scenario.targetType}
                              </Badge>
                            </div>
                            <p className="text-sm text-muted-foreground mb-3">
                              {scenario.description}
                            </p>
                          </div>
                          <Button
                            size="sm"
                            variant={selectedScenario === scenario.id ? "default" : "outline"}
                            onClick={() => setSelectedScenario(scenario.id)}
                          >
                            {selectedScenario === scenario.id ? "Selected" : "Select"}
                          </Button>
                        </div>

                        <div className="space-y-3">
                          <div>
                            <Label className="text-xs font-medium">Required Tools</Label>
                            <div className="flex flex-wrap gap-1 mt-1">
                              {scenario.tools.map((tool) => (
                                <Badge key={tool} variant="secondary" className="text-xs">
                                  {tool}
                                </Badge>
                              ))}
                            </div>
                          </div>

                          <div>
                            <Label className="text-xs font-medium">Attack Chain</Label>
                            <div className="mt-1 space-y-1">
                              {scenario.attackChain.map((step, index) => (
                                <div key={index} className="flex items-center gap-2 text-xs">
                                  <div className="w-4 h-4 rounded-full bg-primary/20 text-primary text-xs flex items-center justify-center font-medium">
                                    {index + 1}
                                  </div>
                                  <span className="text-muted-foreground">{step}</span>
                                </div>
                              ))}
                            </div>
                          </div>

                          {scenario.references.length > 0 && (
                            <div>
                              <Label className="text-xs font-medium">References</Label>
                              <div className="mt-1 space-y-1">
                                {scenario.references.map((ref, index) => (
                                  <a 
                                    key={index}
                                    href={ref} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    className="text-xs text-blue-600 hover:underline flex items-center gap-1"
                                  >
                                    <ExternalLink className="w-3 h-3" />
                                    {ref.length > 50 ? `${ref.substring(0, 50)}...` : ref}
                                  </a>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>

                {scenarios.length === 0 && (
                  <div className="text-center py-12">
                    <FileText className="w-12 h-12 mx-auto text-muted-foreground/50 mb-4" />
                    <h3 className="text-lg font-medium mb-2">No Scenarios Available</h3>
                    <p className="text-muted-foreground mb-4">
                      Use the Research tab to generate scenarios based on the latest security research
                    </p>
                    <Button onClick={() => setActiveTab('research')}>
                      <Search className="w-4 h-4 mr-2" />
                      Start Research
                    </Button>
                  </div>
                )}
              </TabsContent>
            </div>
          </Tabs>
        </div>
      </div>
    </div>
  );
};